
sensorNet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  00003b10  00003ba4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004e9  008001da  008001da  00003c7e  2**0
                  ALLOC
  3 .debug_aranges 00000a10  00000000  00000000  00003c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000190c  00000000  00000000  0000468e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001048d  00000000  00000000  00005f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000316c  00000000  00000000  00016427  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00008119  00000000  00000000  00019593  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000011e0  00000000  00000000  000216ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000036fc  00000000  00000000  0002288c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006e9d  00000000  00000000  00025f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bd8  00000000  00000000  0002ce25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
          return (i << 3) + j;
        }
  return 0;
}

void Stash::freeBlock (uint8_t block) {
       0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__ctors_end>
static byte readRegByte (byte address) {
    SetBank(address);
    return readOp(ENC28J60_READ_CTRL_REG, address);
}

static word readReg(byte address) {
       4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
  void emit_raw_p (PGM_P p, uint16_t n) { memcpy_P(ptr, p, n); ptr += n; }
  
  uint8_t* buffer () const { return start; }
  uint16_t position () const { return ptr - start; }
  
  virtual WRITE_RESULT write (uint8_t v) { *ptr++ = v; WRITE_RETURN }
       8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
	{
		if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((byte) listeners[i].port)) {
			listeners[i].listening = true;
		}
	}
}
       c:	0c 94 85 11 	jmp	0x230a	; 0x230a <__vector_3>
        urlbuf++;
        urlbuf++;
        str++;
    }
    *urlbuf='\0';
}
      10:	0c 94 af 11 	jmp	0x235e	; 0x235e <__vector_4>
    SREG = oldSREG;
    return true;
  }

  return false;
}
      14:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <__vector_5>
DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
  _pin = pin;
  _type = type;
  _count = count;
  firstreading = true;
}
      18:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>

  void put (char c);
  char get ();
  uint16_t size ();

  virtual WRITE_RESULT write(uint8_t b) { put(b); WRITE_RETURN }
      1c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      20:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      24:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      28:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      2c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      30:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      34:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      38:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      3c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      40:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__vector_16>
      44:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      48:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <__vector_18>
      4c:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <__vector_19>
      50:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      54:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      58:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      5c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      60:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      64:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>

00000068 <_ZL9arpreqhdr>:
      68:	00 01 08 00 06 04 00 01                             ........

00000070 <_ZL5iphdr>:
      70:	45 00 00 82 00 00 40 00 20                          E.....@. 

00000079 <_ZZL31www_client_internal_datafill_cbhE3__c_0>:
      79:	50 4f 53 54 20 24 46 20 48 54 54 50 2f 31 2e 30     POST $F HTTP/1.0
      89:	0d 0a 48 6f 73 74 3a 20 24 46 0d 0a 24 46 24 53     ..Host: $F..$F$S
      99:	41 63 63 65 70 74 3a 20 2a 2f 2a 0d 0a 43 6f 6e     Accept: */*..Con
      a9:	74 65 6e 74 2d 4c 65 6e 67 74 68 3a 20 24 44 0d     tent-Length: $D.
      b9:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 61     .Content-Type: a
      c9:	70 70 6c 69 63 61 74 69 6f 6e 2f 78 2d 77 77 77     pplication/x-www
      d9:	2d 66 6f 72 6d 2d 75 72 6c 65 6e 63 6f 64 65 64     -form-urlencoded
      e9:	0d 0a 0d 0a 24 53 00                                ....$S.

000000f0 <_ZZL31www_client_internal_datafill_cbhE3__c>:
      f0:	47 45 54 20 24 46 24 53 20 48 54 54 50 2f 31 2e     GET $F$S HTTP/1.
     100:	30 0d 0a 48 6f 73 74 3a 20 24 46 0d 0a 24 46 0d     0..Host: $F..$F.
     110:	0a 0d 0a 00                                         ....

00000114 <_ZZN9EtherCard9browseUrlEPcPKcS0_PFvhjjEE3__c>:
     114:	41 63 63 65 70 74 3a 20 74 65 78 74 2f 68 74 6d     Accept: text/htm
     124:	6c 00                                               l.

00000126 <_ZL9ntpreqhdr>:
     126:	e3 00 04 fa 00 01 00 00 00 01                       ..........

00000130 <website>:
     130:	61 70 69 2e 63 6f 73 6d 2e 63 6f 6d 00              api.cosm.com.

0000013d <_ZZ4loopE3__c_1>:
     13d:	35 5f 57 67 71 50 6a 6a 77 6d 71 69 75 5a 33 74     5_WgqPjjwmqiuZ3t
     14d:	5f 53 2d 53 59 6a 45 58 30 6b 6d 53 41 4b 78 42     _S-SYjEX0kmSAKxB
     15d:	5a 47 35 52 64 45 70 69 57 45 34 35 55 54 30 67     ZG5RdEpiWE45UT0g
	...

0000016e <_ZZ4loopE3__c_0>:
     16e:	31 31 38 32 39 35 00                                118295.

00000175 <_ZZ4loopE3__c>:
     175:	50 55 54 20 68 74 74 70 3a 2f 2f 24 46 2f 76 32     PUT http://$F/v2
     185:	2f 66 65 65 64 73 2f 24 46 2e 63 73 76 20 48 54     /feeds/$F.csv HT
     195:	54 50 2f 31 2e 30 0d 0a 48 6f 73 74 3a 20 24 46     TP/1.0..Host: $F
     1a5:	0d 0a 58 2d 41 70 69 4b 65 79 3a 20 24 46 0d 0a     ..X-ApiKey: $F..
     1b5:	43 6f 6e 74 65 6e 74 2d 4c 65 6e 67 74 68 3a 20     Content-Length: 
     1c5:	24 44 0d 0a 0d 0a 24 48 00                          $D....$H.

000001ce <port_to_mode_PGM>:
     1ce:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000001d8 <port_to_output_PGM>:
     1d8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001e2 <port_to_input_PGM>:
     1e2:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000001ec <digital_pin_to_port_PGM>:
     1ec:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1fc:	03 03 03 03                                         ....

00000200 <digital_pin_to_bit_mask_PGM>:
     200:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     210:	04 08 10 20                                         ... 

00000214 <digital_pin_to_timer_PGM>:
     214:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     224:	00 00 00 00                                         ....

00000228 <__ctors_start>:
     228:	9f 13       	cpse	r25, r31
     22a:	8d 16       	cp	r8, r29

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	d8 e0       	ldi	r29, 0x08	; 8
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61

00000238 <__do_copy_data>:
     238:	11 e0       	ldi	r17, 0x01	; 1
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	b1 e0       	ldi	r27, 0x01	; 1
     23e:	e0 e1       	ldi	r30, 0x10	; 16
     240:	fb e3       	ldi	r31, 0x3B	; 59
     242:	02 c0       	rjmp	.+4      	; 0x248 <.do_copy_data_start>

00000244 <.do_copy_data_loop>:
     244:	05 90       	lpm	r0, Z+
     246:	0d 92       	st	X+, r0

00000248 <.do_copy_data_start>:
     248:	aa 3d       	cpi	r26, 0xDA	; 218
     24a:	b1 07       	cpc	r27, r17
     24c:	d9 f7       	brne	.-10     	; 0x244 <.do_copy_data_loop>

0000024e <__do_clear_bss>:
     24e:	16 e0       	ldi	r17, 0x06	; 6
     250:	aa ed       	ldi	r26, 0xDA	; 218
     252:	b1 e0       	ldi	r27, 0x01	; 1
     254:	01 c0       	rjmp	.+2      	; 0x258 <.do_clear_bss_start>

00000256 <.do_clear_bss_loop>:
     256:	1d 92       	st	X+, r1

00000258 <.do_clear_bss_start>:
     258:	a3 3c       	cpi	r26, 0xC3	; 195
     25a:	b1 07       	cpc	r27, r17
     25c:	e1 f7       	brne	.-8      	; 0x256 <.do_clear_bss_loop>

0000025e <__do_global_ctors>:
     25e:	12 e0       	ldi	r17, 0x02	; 2
     260:	cc e2       	ldi	r28, 0x2C	; 44
     262:	d2 e0       	ldi	r29, 0x02	; 2
     264:	04 c0       	rjmp	.+8      	; 0x26e <.do_global_ctors_start>

00000266 <.do_global_ctors_loop>:
     266:	22 97       	sbiw	r28, 0x02	; 2
     268:	fe 01       	movw	r30, r28
     26a:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__tablejump__>

0000026e <.do_global_ctors_start>:
     26e:	c8 32       	cpi	r28, 0x28	; 40
     270:	d1 07       	cpc	r29, r17
     272:	c9 f7       	brne	.-14     	; 0x266 <.do_global_ctors_loop>
     274:	0e 94 23 19 	call	0x3246	; 0x3246 <main>
     278:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <_exit>

0000027c <__bad_interrupt>:
     27c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000280 <memcpy_P>:
     280:	fb 01       	movw	r30, r22
     282:	dc 01       	movw	r26, r24
     284:	02 c0       	rjmp	.+4      	; 0x28a <memcpy_P+0xa>
     286:	05 90       	lpm	r0, Z+
     288:	0d 92       	st	X+, r0
     28a:	41 50       	subi	r20, 0x01	; 1
     28c:	50 40       	sbci	r21, 0x00	; 0
     28e:	d8 f7       	brcc	.-10     	; 0x286 <memcpy_P+0x6>
     290:	08 95       	ret

00000292 <strlen_P>:
     292:	fc 01       	movw	r30, r24
     294:	05 90       	lpm	r0, Z+
     296:	00 20       	and	r0, r0
     298:	e9 f7       	brne	.-6      	; 0x294 <strlen_P+0x2>
     29a:	80 95       	com	r24
     29c:	90 95       	com	r25
     29e:	8e 0f       	add	r24, r30
     2a0:	9f 1f       	adc	r25, r31
     2a2:	08 95       	ret

000002a4 <memcmp>:
     2a4:	fb 01       	movw	r30, r22
     2a6:	dc 01       	movw	r26, r24
     2a8:	04 c0       	rjmp	.+8      	; 0x2b2 <memcmp+0xe>
     2aa:	8d 91       	ld	r24, X+
     2ac:	01 90       	ld	r0, Z+
     2ae:	80 19       	sub	r24, r0
     2b0:	21 f4       	brne	.+8      	; 0x2ba <memcmp+0x16>
     2b2:	41 50       	subi	r20, 0x01	; 1
     2b4:	50 40       	sbci	r21, 0x00	; 0
     2b6:	c8 f7       	brcc	.-14     	; 0x2aa <memcmp+0x6>
     2b8:	88 1b       	sub	r24, r24
     2ba:	99 0b       	sbc	r25, r25
     2bc:	08 95       	ret

000002be <_ZN5Stash10allocBlockEv>:
//#define FLOATEMIT // uncomment line to enable $T in emit_P for float emitting

byte Stash::map[256/8];
Stash::Block Stash::bufs[2];

uint8_t Stash::allocBlock () {
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	c0 e0       	ldi	r28, 0x00	; 0
     2c4:	d0 e0       	ldi	r29, 0x00	; 0
     2c6:	5c 2f       	mov	r21, r28
  for (uint8_t i = 0; i < sizeof map; ++i)
    if (map[i] != 0)
     2c8:	fe 01       	movw	r30, r28
     2ca:	e6 52       	subi	r30, 0x26	; 38
     2cc:	fe 4f       	sbci	r31, 0xFE	; 254
     2ce:	e0 81       	ld	r30, Z
     2d0:	ee 23       	and	r30, r30
     2d2:	49 f1       	breq	.+82     	; 0x326 <_ZN5Stash10allocBlockEv+0x68>
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	30 e0       	ldi	r19, 0x00	; 0
      for (uint8_t j = 0; j < 8; ++j)
        if (bitRead(map[i], j)) {
     2d8:	6e 2f       	mov	r22, r30
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	cb 01       	movw	r24, r22
     2de:	02 2e       	mov	r0, r18
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <_ZN5Stash10allocBlockEv+0x28>
     2e2:	95 95       	asr	r25
     2e4:	87 95       	ror	r24
     2e6:	0a 94       	dec	r0
     2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <_ZN5Stash10allocBlockEv+0x24>
     2ea:	80 ff       	sbrs	r24, 0
     2ec:	17 c0       	rjmp	.+46     	; 0x31c <_ZN5Stash10allocBlockEv+0x5e>
          bitClear(map[i], j);
     2ee:	c6 52       	subi	r28, 0x26	; 38
     2f0:	de 4f       	sbci	r29, 0xFE	; 254
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	a0 e0       	ldi	r26, 0x00	; 0
     2f8:	b0 e0       	ldi	r27, 0x00	; 0
     2fa:	02 2e       	mov	r0, r18
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <_ZN5Stash10allocBlockEv+0x48>
     2fe:	88 0f       	add	r24, r24
     300:	99 1f       	adc	r25, r25
     302:	aa 1f       	adc	r26, r26
     304:	bb 1f       	adc	r27, r27
     306:	0a 94       	dec	r0
     308:	d2 f7       	brpl	.-12     	; 0x2fe <_ZN5Stash10allocBlockEv+0x40>
     30a:	80 95       	com	r24
     30c:	8e 23       	and	r24, r30
     30e:	88 83       	st	Y, r24
          return (i << 3) + j;
     310:	85 2f       	mov	r24, r21
     312:	88 0f       	add	r24, r24
     314:	88 0f       	add	r24, r24
     316:	88 0f       	add	r24, r24
     318:	82 0f       	add	r24, r18
     31a:	0a c0       	rjmp	.+20     	; 0x330 <_ZN5Stash10allocBlockEv+0x72>
     31c:	2f 5f       	subi	r18, 0xFF	; 255
     31e:	3f 4f       	sbci	r19, 0xFF	; 255
Stash::Block Stash::bufs[2];

uint8_t Stash::allocBlock () {
  for (uint8_t i = 0; i < sizeof map; ++i)
    if (map[i] != 0)
      for (uint8_t j = 0; j < 8; ++j)
     320:	28 30       	cpi	r18, 0x08	; 8
     322:	31 05       	cpc	r19, r1
     324:	d9 f6       	brne	.-74     	; 0x2dc <_ZN5Stash10allocBlockEv+0x1e>
     326:	21 96       	adiw	r28, 0x01	; 1

byte Stash::map[256/8];
Stash::Block Stash::bufs[2];

uint8_t Stash::allocBlock () {
  for (uint8_t i = 0; i < sizeof map; ++i)
     328:	c0 32       	cpi	r28, 0x20	; 32
     32a:	d1 05       	cpc	r29, r1
     32c:	61 f6       	brne	.-104    	; 0x2c6 <_ZN5Stash10allocBlockEv+0x8>
     32e:	80 e0       	ldi	r24, 0x00	; 0
        if (bitRead(map[i], j)) {
          bitClear(map[i], j);
          return (i << 3) + j;
        }
  return 0;
}
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	08 95       	ret

00000336 <_ZL4wtoajPc>:

uint16_t Stash::size () {
  return 63 * count + fetchByte(last, 62) - sizeof (StashHeader);
}

static char* wtoa (word value, char* ptr) {
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	ec 01       	movw	r28, r24
     33c:	9b 01       	movw	r18, r22
  if (value > 9)
     33e:	8a 30       	cpi	r24, 0x0A	; 10
     340:	91 05       	cpc	r25, r1
     342:	48 f0       	brcs	.+18     	; 0x356 <_ZL4wtoajPc+0x20>
    ptr = wtoa(value / 10, ptr);
     344:	6a e0       	ldi	r22, 0x0A	; 10
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__udivmodhi4>
     34c:	cb 01       	movw	r24, r22
     34e:	b9 01       	movw	r22, r18
     350:	0e 94 9b 01 	call	0x336	; 0x336 <_ZL4wtoajPc>
     354:	9c 01       	movw	r18, r24
  *ptr = '0' + value % 10;
     356:	ce 01       	movw	r24, r28
     358:	6a e0       	ldi	r22, 0x0A	; 10
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__udivmodhi4>
     360:	80 5d       	subi	r24, 0xD0	; 208
     362:	f9 01       	movw	r30, r18
     364:	81 93       	st	Z+, r24
  *++ptr = 0;
     366:	d9 01       	movw	r26, r18
     368:	11 96       	adiw	r26, 0x01	; 1
     36a:	1c 92       	st	X, r1
  return ptr;
}
     36c:	cf 01       	movw	r24, r30
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <_ZN9EtherCard5beginEjPKhh>:
bool EtherCard::using_dhcp = false;
bool EtherCard::persist_tcp_connection = false;

uint8_t EtherCard::begin (const uint16_t size,
                           const uint8_t* macaddr,
                            uint8_t csPin) {
     374:	af 92       	push	r10
     376:	bf 92       	push	r11
     378:	cf 92       	push	r12
     37a:	df 92       	push	r13
     37c:	ff 92       	push	r15
     37e:	0f 93       	push	r16
     380:	1f 93       	push	r17
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	8c 01       	movw	r16, r24
     388:	eb 01       	movw	r28, r22
     38a:	f4 2e       	mov	r15, r20
  using_dhcp = false;
     38c:	10 92 9a 02 	sts	0x029A, r1
     390:	38 e3       	ldi	r19, 0x38	; 56
        }
  return 0;
}

void Stash::freeBlock (uint8_t block) {
  bitSet(map[block>>3], block & 7);
     392:	41 e0       	ldi	r20, 0x01	; 1
     394:	50 e0       	ldi	r21, 0x00	; 0
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	18 c0       	rjmp	.+48     	; 0x3cc <_ZN9EtherCard5beginEjPKhh+0x58>
     39c:	83 2f       	mov	r24, r19
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	fc 01       	movw	r30, r24
     3a2:	b3 e0       	ldi	r27, 0x03	; 3
     3a4:	f5 95       	asr	r31
     3a6:	e7 95       	ror	r30
     3a8:	ba 95       	dec	r27
     3aa:	e1 f7       	brne	.-8      	; 0x3a4 <_ZN9EtherCard5beginEjPKhh+0x30>
     3ac:	e6 52       	subi	r30, 0x26	; 38
     3ae:	fe 4f       	sbci	r31, 0xFE	; 254
     3b0:	87 70       	andi	r24, 0x07	; 7
     3b2:	90 70       	andi	r25, 0x00	; 0
     3b4:	5a 01       	movw	r10, r20
     3b6:	6b 01       	movw	r12, r22
     3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <_ZN9EtherCard5beginEjPKhh+0x4e>
     3ba:	aa 0c       	add	r10, r10
     3bc:	bb 1c       	adc	r11, r11
     3be:	cc 1c       	adc	r12, r12
     3c0:	dd 1c       	adc	r13, r13
     3c2:	8a 95       	dec	r24
     3c4:	d2 f7       	brpl	.-12     	; 0x3ba <_ZN9EtherCard5beginEjPKhh+0x46>
     3c6:	20 81       	ld	r18, Z
     3c8:	2a 29       	or	r18, r10
     3ca:	20 83       	st	Z, r18
          blk == bufs[1].bnum ? bufs[1].bytes[off] :
           ether.peekin(blk, off);
}

void Stash::initMap (uint8_t last) {
  while (--last > 0)
     3cc:	31 50       	subi	r19, 0x01	; 1
     3ce:	31 f7       	brne	.-52     	; 0x39c <_ZN9EtherCard5beginEjPKhh+0x28>
uint8_t EtherCard::begin (const uint16_t size,
                           const uint8_t* macaddr,
                            uint8_t csPin) {
  using_dhcp = false;
  Stash::initMap(56);
  copyMac(mymac, macaddr);
     3d0:	8c e7       	ldi	r24, 0x7C	; 124
     3d2:	92 e0       	ldi	r25, 0x02	; 2
     3d4:	be 01       	movw	r22, r28
     3d6:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN9EtherCard7copyMacEPhPKh>
  return initialize(size, mymac, csPin);
     3da:	c8 01       	movw	r24, r16
     3dc:	6c e7       	ldi	r22, 0x7C	; 124
     3de:	72 e0       	ldi	r23, 0x02	; 2
     3e0:	4f 2d       	mov	r20, r15
     3e2:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <_ZN8ENC28J6010initializeEjPKhh>
}
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	ff 90       	pop	r15
     3f0:	df 90       	pop	r13
     3f2:	cf 90       	pop	r12
     3f4:	bf 90       	pop	r11
     3f6:	af 90       	pop	r10
     3f8:	08 95       	ret

000003fa <_ZN5Stash7releaseEv>:
  memcpy(bufs[0].bytes, (StashHeader*) this, sizeof (StashHeader));
  if (bufs[1].bnum == first)
    load(1, 0); // invalidates original in case it was the same block
}

void Stash::release () {
     3fa:	ef 92       	push	r14
     3fc:	ff 92       	push	r15
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	ec 01       	movw	r28, r24
        }
  return 0;
}

void Stash::freeBlock (uint8_t block) {
  bitSet(map[block>>3], block & 7);
     408:	31 e0       	ldi	r19, 0x01	; 1
     40a:	e3 2e       	mov	r14, r19
     40c:	f1 2c       	mov	r15, r1
     40e:	01 2d       	mov	r16, r1
     410:	11 2d       	mov	r17, r1
     412:	1e c0       	rjmp	.+60     	; 0x450 <_ZN5Stash7releaseEv+0x56>
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	fc 01       	movw	r30, r24
     418:	23 e0       	ldi	r18, 0x03	; 3
     41a:	f5 95       	asr	r31
     41c:	e7 95       	ror	r30
     41e:	2a 95       	dec	r18
     420:	e1 f7       	brne	.-8      	; 0x41a <_ZN5Stash7releaseEv+0x20>
     422:	e6 52       	subi	r30, 0x26	; 38
     424:	fe 4f       	sbci	r31, 0xFE	; 254
     426:	87 70       	andi	r24, 0x07	; 7
     428:	90 70       	andi	r25, 0x00	; 0
     42a:	a8 01       	movw	r20, r16
     42c:	97 01       	movw	r18, r14
     42e:	04 c0       	rjmp	.+8      	; 0x438 <_ZN5Stash7releaseEv+0x3e>
     430:	22 0f       	add	r18, r18
     432:	33 1f       	adc	r19, r19
     434:	44 1f       	adc	r20, r20
     436:	55 1f       	adc	r21, r21
     438:	8a 95       	dec	r24
     43a:	d2 f7       	brpl	.-12     	; 0x430 <_ZN5Stash7releaseEv+0x36>
     43c:	da 01       	movw	r26, r20
     43e:	c9 01       	movw	r24, r18
     440:	20 81       	ld	r18, Z
     442:	28 2b       	or	r18, r24
     444:	20 83       	st	Z, r18
}

void Stash::release () {
  while (first > 0) {
    freeBlock(first);
    first = ether.peekin(first, 63);
     446:	8d 81       	ldd	r24, Y+5	; 0x05
     448:	6f e3       	ldi	r22, 0x3F	; 63
     44a:	0e 94 9d 09 	call	0x133a	; 0x133a <_ZN8ENC28J606peekinEhh>
     44e:	8d 83       	std	Y+5, r24	; 0x05
  if (bufs[1].bnum == first)
    load(1, 0); // invalidates original in case it was the same block
}

void Stash::release () {
  while (first > 0) {
     450:	8d 81       	ldd	r24, Y+5	; 0x05
     452:	88 23       	and	r24, r24
     454:	f9 f6       	brne	.-66     	; 0x414 <_ZN5Stash7releaseEv+0x1a>
    freeBlock(first);
    first = ether.peekin(first, 63);
  }
}
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	1f 91       	pop	r17
     45c:	0f 91       	pop	r16
     45e:	ff 90       	pop	r15
     460:	ef 90       	pop	r14
     462:	08 95       	ret

00000464 <_ZN5Stash9fetchByteEhh>:

void Stash::freeBlock (uint8_t block) {
  bitSet(map[block>>3], block & 7);
}

uint8_t Stash::fetchByte (uint8_t blk, uint8_t off) {
     464:	98 2f       	mov	r25, r24
  return blk == bufs[0].bnum ? bufs[0].bytes[off] :
          blk == bufs[1].bnum ? bufs[1].bytes[off] :
           ether.peekin(blk, off);
     466:	80 91 3a 02 	lds	r24, 0x023A
     46a:	98 17       	cp	r25, r24
     46c:	29 f4       	brne	.+10     	; 0x478 <_ZN5Stash9fetchByteEhh+0x14>
     46e:	e6 2f       	mov	r30, r22
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	e6 50       	subi	r30, 0x06	; 6
     474:	fe 4f       	sbci	r31, 0xFE	; 254
     476:	08 c0       	rjmp	.+16     	; 0x488 <_ZN5Stash9fetchByteEhh+0x24>
     478:	80 91 7b 02 	lds	r24, 0x027B
     47c:	98 17       	cp	r25, r24
     47e:	31 f4       	brne	.+12     	; 0x48c <_ZN5Stash9fetchByteEhh+0x28>
     480:	e6 2f       	mov	r30, r22
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	e5 5c       	subi	r30, 0xC5	; 197
     486:	fd 4f       	sbci	r31, 0xFD	; 253
     488:	80 81       	ld	r24, Z
     48a:	08 95       	ret
     48c:	89 2f       	mov	r24, r25
     48e:	0e 94 9d 09 	call	0x133a	; 0x133a <_ZN8ENC28J606peekinEhh>
}
     492:	08 95       	ret

00000494 <_ZN5Stash4sizeEv>:
    offs = 0;
  }
  return b;
}

uint16_t Stash::size () {
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	fc 01       	movw	r30, r24
  return 63 * count + fetchByte(last, 62) - sizeof (StashHeader);
     49a:	04 81       	ldd	r16, Z+4	; 0x04
     49c:	8f e3       	ldi	r24, 0x3F	; 63
     49e:	08 9f       	mul	r16, r24
     4a0:	80 01       	movw	r16, r0
     4a2:	11 24       	eor	r1, r1
     4a4:	86 81       	ldd	r24, Z+6	; 0x06
     4a6:	6e e3       	ldi	r22, 0x3E	; 62
     4a8:	0e 94 32 02 	call	0x464	; 0x464 <_ZN5Stash9fetchByteEhh>
     4ac:	08 0f       	add	r16, r24
     4ae:	11 1d       	adc	r17, r1
     4b0:	03 50       	subi	r16, 0x03	; 3
     4b2:	10 40       	sbci	r17, 0x00	; 0
}
     4b4:	c8 01       	movw	r24, r16
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	08 95       	ret

000004bc <_ZN5Stash4loadEhh>:
void Stash::initMap (uint8_t last) {
  while (--last > 0)
    freeBlock(last);
}

void Stash::load (uint8_t idx, uint8_t blk) {
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	98 2f       	mov	r25, r24
     4c4:	16 2f       	mov	r17, r22
  if (blk != bufs[idx].bnum) {
     4c6:	c8 2f       	mov	r28, r24
     4c8:	d0 e0       	ldi	r29, 0x00	; 0
     4ca:	fe 01       	movw	r30, r28
     4cc:	56 e0       	ldi	r21, 0x06	; 6
     4ce:	ee 0f       	add	r30, r30
     4d0:	ff 1f       	adc	r31, r31
     4d2:	5a 95       	dec	r21
     4d4:	e1 f7       	brne	.-8      	; 0x4ce <_ZN5Stash4loadEhh+0x12>
     4d6:	ec 0f       	add	r30, r28
     4d8:	fd 1f       	adc	r31, r29
     4da:	e6 50       	subi	r30, 0x06	; 6
     4dc:	fe 4f       	sbci	r31, 0xFE	; 254
     4de:	e0 5c       	subi	r30, 0xC0	; 192
     4e0:	ff 4f       	sbci	r31, 0xFF	; 255
     4e2:	80 81       	ld	r24, Z
     4e4:	e0 54       	subi	r30, 0x40	; 64
     4e6:	f0 40       	sbci	r31, 0x00	; 0
     4e8:	68 17       	cp	r22, r24
     4ea:	71 f1       	breq	.+92     	; 0x548 <_ZN5Stash4loadEhh+0x8c>
    if (idx == 0) {
     4ec:	99 23       	and	r25, r25
     4ee:	59 f4       	brne	.+22     	; 0x506 <_ZN5Stash4loadEhh+0x4a>
      ether.copyout(bufs[idx].bnum, bufs[idx].bytes);
     4f0:	bf 01       	movw	r22, r30
     4f2:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN8ENC28J607copyoutEhPKh>
      if (blk == bufs[1].bnum)
     4f6:	80 91 7b 02 	lds	r24, 0x027B
     4fa:	18 17       	cp	r17, r24
     4fc:	91 f4       	brne	.+36     	; 0x522 <_ZN5Stash4loadEhh+0x66>
        bufs[1].bnum = 255; // forget read page if same
     4fe:	8f ef       	ldi	r24, 0xFF	; 255
     500:	80 93 7b 02 	sts	0x027B, r24
     504:	0e c0       	rjmp	.+28     	; 0x522 <_ZN5Stash4loadEhh+0x66>
    } else if (blk == bufs[0].bnum) {
     506:	80 91 3a 02 	lds	r24, 0x023A
     50a:	68 17       	cp	r22, r24
     50c:	51 f4       	brne	.+20     	; 0x522 <_ZN5Stash4loadEhh+0x66>
      // special case: read page is same as write buffer
      memcpy(&bufs[1], &bufs[0], sizeof bufs[0]);
     50e:	ab e3       	ldi	r26, 0x3B	; 59
     510:	b2 e0       	ldi	r27, 0x02	; 2
     512:	ea ef       	ldi	r30, 0xFA	; 250
     514:	f1 e0       	ldi	r31, 0x01	; 1
     516:	81 e4       	ldi	r24, 0x41	; 65
     518:	01 90       	ld	r0, Z+
     51a:	0d 92       	st	X+, r0
     51c:	81 50       	subi	r24, 0x01	; 1
     51e:	e1 f7       	brne	.-8      	; 0x518 <_ZN5Stash4loadEhh+0x5c>
     520:	13 c0       	rjmp	.+38     	; 0x548 <_ZN5Stash4loadEhh+0x8c>
      return;
    }
    bufs[idx].bnum = blk;
     522:	fe 01       	movw	r30, r28
     524:	46 e0       	ldi	r20, 0x06	; 6
     526:	ee 0f       	add	r30, r30
     528:	ff 1f       	adc	r31, r31
     52a:	4a 95       	dec	r20
     52c:	e1 f7       	brne	.-8      	; 0x526 <_ZN5Stash4loadEhh+0x6a>
     52e:	ec 0f       	add	r30, r28
     530:	fd 1f       	adc	r31, r29
     532:	e6 50       	subi	r30, 0x06	; 6
     534:	fe 4f       	sbci	r31, 0xFE	; 254
     536:	e0 5c       	subi	r30, 0xC0	; 192
     538:	ff 4f       	sbci	r31, 0xFF	; 255
     53a:	10 83       	st	Z, r17
     53c:	e0 54       	subi	r30, 0x40	; 64
     53e:	f0 40       	sbci	r31, 0x00	; 0
    ether.copyin(bufs[idx].bnum, bufs[idx].bytes);
     540:	81 2f       	mov	r24, r17
     542:	bf 01       	movw	r22, r30
     544:	0e 94 c0 09 	call	0x1380	; 0x1380 <_ZN8ENC28J606copyinEhPh>
  }
}
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	08 95       	ret

00000550 <_ZN5Stash6lengthEv>:
  }
  va_end(ap);
}

word Stash::length () {
  Stash::load(0, 0);
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	60 e0       	ldi	r22, 0x00	; 0
     554:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN5Stash4loadEhh>
  return Stash::bufs[0].words[0];
}
     558:	80 91 fa 01 	lds	r24, 0x01FA
     55c:	90 91 fb 01 	lds	r25, 0x01FB
     560:	08 95       	ret

00000562 <_ZN5Stash3getEv>:
    bufs[0].tail = bufs[0].next = 0;
    ++count;
  }
}

char Stash::get () {
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	ec 01       	movw	r28, r24
  load(1, curr);
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	6f 81       	ldd	r22, Y+7	; 0x07
     56c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN5Stash4loadEhh>
  if (curr == last && offs >= bufs[1].tail)
     570:	9f 81       	ldd	r25, Y+7	; 0x07
     572:	8e 81       	ldd	r24, Y+6	; 0x06
     574:	98 17       	cp	r25, r24
     576:	39 f4       	brne	.+14     	; 0x586 <_ZN5Stash3getEv+0x24>
     578:	98 85       	ldd	r25, Y+8	; 0x08
     57a:	80 91 79 02 	lds	r24, 0x0279
     57e:	98 17       	cp	r25, r24
     580:	10 f0       	brcs	.+4      	; 0x586 <_ZN5Stash3getEv+0x24>
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	13 c0       	rjmp	.+38     	; 0x5ac <_ZN5Stash3getEv+0x4a>
    return 0;
  uint8_t b = bufs[1].bytes[offs];
     586:	88 85       	ldd	r24, Y+8	; 0x08
     588:	e8 2f       	mov	r30, r24
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	e5 5c       	subi	r30, 0xC5	; 197
     58e:	fd 4f       	sbci	r31, 0xFD	; 253
     590:	e0 81       	ld	r30, Z
  if (++offs >= 63 && curr != last) {
     592:	8f 5f       	subi	r24, 0xFF	; 255
     594:	88 87       	std	Y+8, r24	; 0x08
     596:	8f 33       	cpi	r24, 0x3F	; 63
     598:	40 f0       	brcs	.+16     	; 0x5aa <_ZN5Stash3getEv+0x48>
     59a:	9f 81       	ldd	r25, Y+7	; 0x07
     59c:	8e 81       	ldd	r24, Y+6	; 0x06
     59e:	98 17       	cp	r25, r24
     5a0:	21 f0       	breq	.+8      	; 0x5aa <_ZN5Stash3getEv+0x48>
    curr = bufs[1].next;
     5a2:	80 91 7a 02 	lds	r24, 0x027A
     5a6:	8f 83       	std	Y+7, r24	; 0x07
    offs = 0;
     5a8:	18 86       	std	Y+8, r1	; 0x08
  }
  return b;
     5aa:	8e 2f       	mov	r24, r30
}
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret

000005b2 <_ZN5Stash3putEc>:
    freeBlock(first);
    first = ether.peekin(first, 63);
  }
}

void Stash::put (char c) {
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	ec 01       	movw	r28, r24
     5ba:	16 2f       	mov	r17, r22
  load(0, last);
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	6e 81       	ldd	r22, Y+6	; 0x06
     5c0:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN5Stash4loadEhh>
  uint8_t t = bufs[0].tail;
     5c4:	80 91 38 02 	lds	r24, 0x0238
  bufs[0].bytes[t++] = c;
     5c8:	e8 2f       	mov	r30, r24
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	e6 50       	subi	r30, 0x06	; 6
     5ce:	fe 4f       	sbci	r31, 0xFE	; 254
     5d0:	10 83       	st	Z, r17
     5d2:	8f 5f       	subi	r24, 0xFF	; 255
  if (t <= 62)
     5d4:	8f 33       	cpi	r24, 0x3F	; 63
     5d6:	18 f4       	brcc	.+6      	; 0x5de <_ZN5Stash3putEc+0x2c>
    bufs[0].tail = t;
     5d8:	80 93 38 02 	sts	0x0238, r24
     5dc:	10 c0       	rjmp	.+32     	; 0x5fe <_ZN5Stash3putEc+0x4c>
  else {
    bufs[0].next = allocBlock();
     5de:	0e 94 5f 01 	call	0x2be	; 0x2be <_ZN5Stash10allocBlockEv>
     5e2:	68 2f       	mov	r22, r24
     5e4:	80 93 39 02 	sts	0x0239, r24
    last = bufs[0].next;
     5e8:	8e 83       	std	Y+6, r24	; 0x06
    load(0, last);
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN5Stash4loadEhh>
    bufs[0].tail = bufs[0].next = 0;
     5f0:	10 92 39 02 	sts	0x0239, r1
     5f4:	10 92 38 02 	sts	0x0238, r1
    ++count;
     5f8:	8c 81       	ldd	r24, Y+4	; 0x04
     5fa:	8f 5f       	subi	r24, 0xFF	; 255
     5fc:	8c 83       	std	Y+4, r24	; 0x04
  }
}
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	08 95       	ret

00000606 <_ZN5Stash5writeEh>:
     606:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN5Stash3putEc>
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	08 95       	ret

00000610 <_ZN5Stash4saveEv>:
  load(1, curr);
  memcpy((StashHeader*) this, bufs[1].bytes, sizeof (StashHeader));
  return curr;
}

void Stash::save () {
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	ec 01       	movw	r28, r24
  load(0, first);
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	6d 81       	ldd	r22, Y+5	; 0x05
     61a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN5Stash4loadEhh>
  memcpy(bufs[0].bytes, (StashHeader*) this, sizeof (StashHeader));
     61e:	aa ef       	ldi	r26, 0xFA	; 250
     620:	b1 e0       	ldi	r27, 0x01	; 1
     622:	fe 01       	movw	r30, r28
     624:	34 96       	adiw	r30, 0x04	; 4
     626:	83 e0       	ldi	r24, 0x03	; 3
     628:	01 90       	ld	r0, Z+
     62a:	0d 92       	st	X+, r0
     62c:	81 50       	subi	r24, 0x01	; 1
     62e:	e1 f7       	brne	.-8      	; 0x628 <_ZN5Stash4saveEv+0x18>
  if (bufs[1].bnum == first)
     630:	90 91 7b 02 	lds	r25, 0x027B
     634:	8d 81       	ldd	r24, Y+5	; 0x05
     636:	98 17       	cp	r25, r24
     638:	21 f4       	brne	.+8      	; 0x642 <_ZN5Stash4saveEv+0x32>
    load(1, 0); // invalidates original in case it was the same block
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN5Stash4loadEhh>
}
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	08 95       	ret

00000648 <_ZN5Stash4openEh>:
  bufs[0].tail = sizeof (StashHeader);
  bufs[0].next = 0;
  return open(blk);
}

uint8_t Stash::open (uint8_t blk) {
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	ec 01       	movw	r28, r24
  curr = blk;
     64e:	6f 83       	std	Y+7, r22	; 0x07
  offs = sizeof (StashHeader);
     650:	83 e0       	ldi	r24, 0x03	; 3
     652:	88 87       	std	Y+8, r24	; 0x08
  load(1, curr);
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN5Stash4loadEhh>
  memcpy((StashHeader*) this, bufs[1].bytes, sizeof (StashHeader));
     65a:	de 01       	movw	r26, r28
     65c:	14 96       	adiw	r26, 0x04	; 4
     65e:	eb e3       	ldi	r30, 0x3B	; 59
     660:	f2 e0       	ldi	r31, 0x02	; 2
     662:	83 e0       	ldi	r24, 0x03	; 3
     664:	01 90       	ld	r0, Z+
     666:	0d 92       	st	X+, r0
     668:	81 50       	subi	r24, 0x01	; 1
     66a:	e1 f7       	brne	.-8      	; 0x664 <_ZN5Stash4openEh+0x1c>
  return curr;
}
     66c:	8f 81       	ldd	r24, Y+7	; 0x07
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	08 95       	ret

00000674 <_ZN5Stash7cleanupEv>:
      *out++ = c;
    ++i;
  }
}

void Stash::cleanup () {
     674:	af 92       	push	r10
     676:	bf 92       	push	r11
     678:	cf 92       	push	r12
     67a:	df 92       	push	r13
     67c:	ef 92       	push	r14
     67e:	ff 92       	push	r15
     680:	0f 93       	push	r16
     682:	1f 93       	push	r17
     684:	df 93       	push	r29
     686:	cf 93       	push	r28
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	29 97       	sbiw	r28, 0x09	; 9
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	f8 94       	cli
     692:	de bf       	out	0x3e, r29	; 62
     694:	0f be       	out	0x3f, r0	; 63
     696:	cd bf       	out	0x3d, r28	; 61
  Stash::load(0, 0);
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN5Stash4loadEhh>
  word* segs = Stash::bufs[0].words;
  PGM_P fmt = (PGM_P) *++segs;
     6a0:	00 91 fc 01 	lds	r16, 0x01FC
     6a4:	10 91 fd 01 	lds	r17, 0x01FD
     6a8:	7c ef       	ldi	r23, 0xFC	; 252
     6aa:	e7 2e       	mov	r14, r23
     6ac:	71 e0       	ldi	r23, 0x01	; 1
     6ae:	f7 2e       	mov	r15, r23
  static void initMap (uint8_t last);
  static void load (uint8_t idx, uint8_t blk);
  static uint8_t freeCount ();

  Stash () : curr (0) { first = 0; }
  Stash (uint8_t fd) { open(fd); }
     6b0:	6a eb       	ldi	r22, 0xBA	; 186
     6b2:	a6 2e       	mov	r10, r22
     6b4:	61 e0       	ldi	r22, 0x01	; 1
     6b6:	b6 2e       	mov	r11, r22
     6b8:	6e 01       	movw	r12, r28
     6ba:	08 94       	sec
     6bc:	c1 1c       	adc	r12, r1
     6be:	d1 1c       	adc	r13, r1
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <_ZN5Stash7cleanupEv+0x52>
    char c = pgm_read_byte(fmt++);
    if (c == 0)
      break;
    if (c == '$') {
      word arg = *++segs;
      if (pgm_read_byte(fmt++) == 'H') {
     6c2:	0f 5f       	subi	r16, 0xFF	; 255
     6c4:	1f 4f       	sbci	r17, 0xFF	; 255
void Stash::cleanup () {
  Stash::load(0, 0);
  word* segs = Stash::bufs[0].words;
  PGM_P fmt = (PGM_P) *++segs;
  for (;;) {
    char c = pgm_read_byte(fmt++);
     6c6:	f8 01       	movw	r30, r16
     6c8:	84 91       	lpm	r24, Z+
    if (c == 0)
     6ca:	88 23       	and	r24, r24
     6cc:	c9 f0       	breq	.+50     	; 0x700 <_ZN5Stash7cleanupEv+0x8c>
void Stash::cleanup () {
  Stash::load(0, 0);
  word* segs = Stash::bufs[0].words;
  PGM_P fmt = (PGM_P) *++segs;
  for (;;) {
    char c = pgm_read_byte(fmt++);
     6ce:	0f 5f       	subi	r16, 0xFF	; 255
     6d0:	1f 4f       	sbci	r17, 0xFF	; 255
    if (c == 0)
      break;
    if (c == '$') {
     6d2:	84 32       	cpi	r24, 0x24	; 36
     6d4:	c1 f7       	brne	.-16     	; 0x6c6 <_ZN5Stash7cleanupEv+0x52>
      word arg = *++segs;
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	e8 0e       	add	r14, r24
     6dc:	f9 1e       	adc	r15, r25
     6de:	f7 01       	movw	r30, r14
     6e0:	60 81       	ld	r22, Z
      if (pgm_read_byte(fmt++) == 'H') {
     6e2:	f8 01       	movw	r30, r16
     6e4:	84 91       	lpm	r24, Z+
     6e6:	88 34       	cpi	r24, 0x48	; 72
     6e8:	61 f7       	brne	.-40     	; 0x6c2 <_ZN5Stash7cleanupEv+0x4e>
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     6ea:	1c 82       	std	Y+4, r1	; 0x04
     6ec:	1b 82       	std	Y+3, r1	; 0x03
     6ee:	ba 82       	std	Y+2, r11	; 0x02
     6f0:	a9 82       	std	Y+1, r10	; 0x01
     6f2:	c6 01       	movw	r24, r12
     6f4:	0e 94 24 03 	call	0x648	; 0x648 <_ZN5Stash4openEh>
        Stash stash (arg);
        stash.release();
     6f8:	c6 01       	movw	r24, r12
     6fa:	0e 94 fd 01 	call	0x3fa	; 0x3fa <_ZN5Stash7releaseEv>
     6fe:	e1 cf       	rjmp	.-62     	; 0x6c2 <_ZN5Stash7cleanupEv+0x4e>
      }
    }
  }
}
     700:	29 96       	adiw	r28, 0x09	; 9
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	f8 94       	cli
     706:	de bf       	out	0x3e, r29	; 62
     708:	0f be       	out	0x3f, r0	; 63
     70a:	cd bf       	out	0x3d, r28	; 61
     70c:	cf 91       	pop	r28
     70e:	df 91       	pop	r29
     710:	1f 91       	pop	r17
     712:	0f 91       	pop	r16
     714:	ff 90       	pop	r15
     716:	ef 90       	pop	r14
     718:	df 90       	pop	r13
     71a:	cf 90       	pop	r12
     71c:	bf 90       	pop	r11
     71e:	af 90       	pop	r10
     720:	08 95       	ret

00000722 <_ZN5Stash7prepareEPKcz>:
  *ptr = '0' + value % 10;
  *++ptr = 0;
  return ptr;
}

void Stash::prepare (PGM_P fmt, ...) {
     722:	4f 92       	push	r4
     724:	5f 92       	push	r5
     726:	6f 92       	push	r6
     728:	7f 92       	push	r7
     72a:	8f 92       	push	r8
     72c:	9f 92       	push	r9
     72e:	af 92       	push	r10
     730:	bf 92       	push	r11
     732:	cf 92       	push	r12
     734:	df 92       	push	r13
     736:	ef 92       	push	r14
     738:	ff 92       	push	r15
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	df 93       	push	r29
     740:	cf 93       	push	r28
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
     746:	60 97       	sbiw	r28, 0x10	; 16
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	de bf       	out	0x3e, r29	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	cd bf       	out	0x3d, r28	; 61
     752:	8e 01       	movw	r16, r28
     754:	0d 5d       	subi	r16, 0xDD	; 221
     756:	1f 4f       	sbci	r17, 0xFF	; 255
     758:	f8 01       	movw	r30, r16
     75a:	e1 90       	ld	r14, Z+
     75c:	f1 90       	ld	r15, Z+
     75e:	8f 01       	movw	r16, r30
  Stash::load(0, 0);
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN5Stash4loadEhh>
  word* segs = Stash::bufs[0].words;
  *segs++ = strlen_P(fmt);
     768:	c7 01       	movw	r24, r14
     76a:	0e 94 49 01 	call	0x292	; 0x292 <strlen_P>
     76e:	90 93 fb 01 	sts	0x01FB, r25
     772:	80 93 fa 01 	sts	0x01FA, r24
  *segs++ = (word) fmt;
     776:	f0 92 fd 01 	sts	0x01FD, r15
     77a:	e0 92 fc 01 	sts	0x01FC, r14
  *ptr = '0' + value % 10;
  *++ptr = 0;
  return ptr;
}

void Stash::prepare (PGM_P fmt, ...) {
     77e:	68 01       	movw	r12, r16
     780:	ae ef       	ldi	r26, 0xFE	; 254
     782:	8a 2e       	mov	r8, r26
     784:	a1 e0       	ldi	r26, 0x01	; 1
     786:	9a 2e       	mov	r9, r26
     788:	fa eb       	ldi	r31, 0xBA	; 186
     78a:	4f 2e       	mov	r4, r31
     78c:	f1 e0       	ldi	r31, 0x01	; 1
     78e:	5f 2e       	mov	r5, r31
     790:	e8 e0       	ldi	r30, 0x08	; 8
     792:	6e 2e       	mov	r6, r30
     794:	71 2c       	mov	r7, r1
     796:	6c 0e       	add	r6, r28
     798:	7d 1e       	adc	r7, r29
    if (c == '$') {
      word argval = va_arg(ap, word), arglen = 0;
      switch (pgm_read_byte(fmt++)) {
        case 'D': {
          char buf[7];
          wtoa(argval, buf);
     79a:	5e 01       	movw	r10, r28
     79c:	08 94       	sec
     79e:	a1 1c       	adc	r10, r1
     7a0:	b1 1c       	adc	r11, r1
  *segs++ = strlen_P(fmt);
  *segs++ = (word) fmt;
  va_list ap;
  va_start(ap, fmt);
  for (;;) {
    char c = pgm_read_byte(fmt++);
     7a2:	f7 01       	movw	r30, r14
     7a4:	84 91       	lpm	r24, Z+
    if (c == 0)
     7a6:	88 23       	and	r24, r24
     7a8:	09 f4       	brne	.+2      	; 0x7ac <_ZN5Stash7prepareEPKcz+0x8a>
     7aa:	65 c0       	rjmp	.+202    	; 0x876 <_ZN5Stash7prepareEPKcz+0x154>
  *segs++ = strlen_P(fmt);
  *segs++ = (word) fmt;
  va_list ap;
  va_start(ap, fmt);
  for (;;) {
    char c = pgm_read_byte(fmt++);
     7ac:	08 94       	sec
     7ae:	e1 1c       	adc	r14, r1
     7b0:	f1 1c       	adc	r15, r1
    if (c == 0)
      break;
    if (c == '$') {
     7b2:	84 32       	cpi	r24, 0x24	; 36
     7b4:	b1 f7       	brne	.-20     	; 0x7a2 <_ZN5Stash7prepareEPKcz+0x80>
      word argval = va_arg(ap, word), arglen = 0;
     7b6:	f6 01       	movw	r30, r12
     7b8:	00 81       	ld	r16, Z
     7ba:	11 81       	ldd	r17, Z+1	; 0x01
      switch (pgm_read_byte(fmt++)) {
     7bc:	f7 01       	movw	r30, r14
     7be:	84 91       	lpm	r24, Z+
     7c0:	86 34       	cpi	r24, 0x46	; 70
     7c2:	29 f1       	breq	.+74     	; 0x80e <_ZN5Stash7prepareEPKcz+0xec>
     7c4:	87 34       	cpi	r24, 0x47	; 71
     7c6:	28 f4       	brcc	.+10     	; 0x7d2 <_ZN5Stash7prepareEPKcz+0xb0>
     7c8:	84 34       	cpi	r24, 0x44	; 68
     7ca:	69 f0       	breq	.+26     	; 0x7e6 <_ZN5Stash7prepareEPKcz+0xc4>
     7cc:	85 34       	cpi	r24, 0x45	; 69
     7ce:	29 f4       	brne	.+10     	; 0x7da <_ZN5Stash7prepareEPKcz+0xb8>
     7d0:	07 c0       	rjmp	.+14     	; 0x7e0 <_ZN5Stash7prepareEPKcz+0xbe>
     7d2:	88 34       	cpi	r24, 0x48	; 72
     7d4:	69 f1       	breq	.+90     	; 0x830 <_ZN5Stash7prepareEPKcz+0x10e>
     7d6:	83 35       	cpi	r24, 0x53	; 83
     7d8:	91 f0       	breq	.+36     	; 0x7fe <_ZN5Stash7prepareEPKcz+0xdc>
     7da:	a0 e0       	ldi	r26, 0x00	; 0
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	34 c0       	rjmp	.+104    	; 0x848 <_ZN5Stash7prepareEPKcz+0x126>
     7e0:	a0 e0       	ldi	r26, 0x00	; 0
     7e2:	b0 e0       	ldi	r27, 0x00	; 0
     7e4:	19 c0       	rjmp	.+50     	; 0x818 <_ZN5Stash7prepareEPKcz+0xf6>
        case 'D': {
          char buf[7];
          wtoa(argval, buf);
     7e6:	c8 01       	movw	r24, r16
     7e8:	b5 01       	movw	r22, r10
     7ea:	0e 94 9b 01 	call	0x336	; 0x336 <_ZL4wtoajPc>
          arglen = strlen(buf);
     7ee:	d5 01       	movw	r26, r10
     7f0:	0d 90       	ld	r0, X+
     7f2:	00 20       	and	r0, r0
     7f4:	e9 f7       	brne	.-6      	; 0x7f0 <_ZN5Stash7prepareEPKcz+0xce>
     7f6:	11 97       	sbiw	r26, 0x01	; 1
     7f8:	aa 19       	sub	r26, r10
     7fa:	bb 09       	sbc	r27, r11
     7fc:	25 c0       	rjmp	.+74     	; 0x848 <_ZN5Stash7prepareEPKcz+0x126>
          break;
        }
        case 'S':
          arglen = strlen((const char*) argval);
     7fe:	d8 01       	movw	r26, r16
     800:	0d 90       	ld	r0, X+
     802:	00 20       	and	r0, r0
     804:	e9 f7       	brne	.-6      	; 0x800 <_ZN5Stash7prepareEPKcz+0xde>
     806:	11 97       	sbiw	r26, 0x01	; 1
     808:	a0 1b       	sub	r26, r16
     80a:	b1 0b       	sbc	r27, r17
     80c:	1d c0       	rjmp	.+58     	; 0x848 <_ZN5Stash7prepareEPKcz+0x126>
          break;
        case 'F':
          arglen = strlen_P((PGM_P) argval);
     80e:	c8 01       	movw	r24, r16
     810:	0e 94 49 01 	call	0x292	; 0x292 <strlen_P>
     814:	18 c0       	rjmp	.+48     	; 0x846 <_ZN5Stash7prepareEPKcz+0x124>
          break;
        case 'E': {
          byte* s = (byte*) argval;
          char d;
          while ((d = eeprom_read_byte(s++)) != 0)
            ++arglen;
     816:	11 96       	adiw	r26, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     818:	f9 99       	sbic	0x1f, 1	; 31
     81a:	fe cf       	rjmp	.-4      	; 0x818 <_ZN5Stash7prepareEPKcz+0xf6>
     81c:	cd 01       	movw	r24, r26
     81e:	80 0f       	add	r24, r16
     820:	91 1f       	adc	r25, r17
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     822:	92 bd       	out	0x22, r25	; 34
     824:	81 bd       	out	0x21, r24	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     826:	f8 9a       	sbi	0x1f, 0	; 31
     828:	80 b5       	in	r24, 0x20	; 32
          arglen = strlen_P((PGM_P) argval);
          break;
        case 'E': {
          byte* s = (byte*) argval;
          char d;
          while ((d = eeprom_read_byte(s++)) != 0)
     82a:	88 23       	and	r24, r24
     82c:	a1 f7       	brne	.-24     	; 0x816 <_ZN5Stash7prepareEPKcz+0xf4>
     82e:	0c c0       	rjmp	.+24     	; 0x848 <_ZN5Stash7prepareEPKcz+0x126>
     830:	1b 86       	std	Y+11, r1	; 0x0b
     832:	1a 86       	std	Y+10, r1	; 0x0a
     834:	59 86       	std	Y+9, r5	; 0x09
     836:	48 86       	std	Y+8, r4	; 0x08
     838:	c3 01       	movw	r24, r6
     83a:	60 2f       	mov	r22, r16
     83c:	0e 94 24 03 	call	0x648	; 0x648 <_ZN5Stash4openEh>
            ++arglen;
          break;
        }
        case 'H': {
          Stash stash (argval);
          arglen = stash.size();
     840:	c3 01       	movw	r24, r6
     842:	0e 94 4a 02 	call	0x494	; 0x494 <_ZN5Stash4sizeEv>
     846:	dc 01       	movw	r26, r24
    char c = pgm_read_byte(fmt++);
    if (c == 0)
      break;
    if (c == '$') {
      word argval = va_arg(ap, word), arglen = 0;
      switch (pgm_read_byte(fmt++)) {
     848:	08 94       	sec
     84a:	e1 1c       	adc	r14, r1
     84c:	f1 1c       	adc	r15, r1
          Stash stash (argval);
          arglen = stash.size();
          break;
        }
      }
      *segs++ = argval;
     84e:	f4 01       	movw	r30, r8
     850:	01 93       	st	Z+, r16
     852:	11 93       	st	Z+, r17
     854:	4f 01       	movw	r8, r30
      Stash::bufs[0].words[0] += arglen - 2;
     856:	80 91 fa 01 	lds	r24, 0x01FA
     85a:	90 91 fb 01 	lds	r25, 0x01FB
     85e:	02 97       	sbiw	r24, 0x02	; 2
     860:	8a 0f       	add	r24, r26
     862:	9b 1f       	adc	r25, r27
     864:	90 93 fb 01 	sts	0x01FB, r25
     868:	80 93 fa 01 	sts	0x01FA, r24
     86c:	82 e0       	ldi	r24, 0x02	; 2
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	c8 0e       	add	r12, r24
     872:	d9 1e       	adc	r13, r25
     874:	96 cf       	rjmp	.-212    	; 0x7a2 <_ZN5Stash7prepareEPKcz+0x80>
    }
  }
  va_end(ap);
}
     876:	60 96       	adiw	r28, 0x10	; 16
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	de bf       	out	0x3e, r29	; 62
     87e:	0f be       	out	0x3f, r0	; 63
     880:	cd bf       	out	0x3d, r28	; 61
     882:	cf 91       	pop	r28
     884:	df 91       	pop	r29
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	ff 90       	pop	r15
     88c:	ef 90       	pop	r14
     88e:	df 90       	pop	r13
     890:	cf 90       	pop	r12
     892:	bf 90       	pop	r11
     894:	af 90       	pop	r10
     896:	9f 90       	pop	r9
     898:	8f 90       	pop	r8
     89a:	7f 90       	pop	r7
     89c:	6f 90       	pop	r6
     89e:	5f 90       	pop	r5
     8a0:	4f 90       	pop	r4
     8a2:	08 95       	ret

000008a4 <_ZN5Stash7extractEjjPv>:
word Stash::length () {
  Stash::load(0, 0);
  return Stash::bufs[0].words[0];
}

void Stash::extract (word offset, word count, void* buf) {
     8a4:	2f 92       	push	r2
     8a6:	3f 92       	push	r3
     8a8:	4f 92       	push	r4
     8aa:	5f 92       	push	r5
     8ac:	6f 92       	push	r6
     8ae:	7f 92       	push	r7
     8b0:	8f 92       	push	r8
     8b2:	9f 92       	push	r9
     8b4:	af 92       	push	r10
     8b6:	bf 92       	push	r11
     8b8:	cf 92       	push	r12
     8ba:	df 92       	push	r13
     8bc:	ff 92       	push	r15
     8be:	0f 93       	push	r16
     8c0:	1f 93       	push	r17
     8c2:	df 93       	push	r29
     8c4:	cf 93       	push	r28
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	60 97       	sbiw	r28, 0x10	; 16
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	f8 94       	cli
     8d0:	de bf       	out	0x3e, r29	; 62
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	cd bf       	out	0x3d, r28	; 61
     8d6:	1c 01       	movw	r2, r24
     8d8:	3b 01       	movw	r6, r22
     8da:	14 2f       	mov	r17, r20
     8dc:	05 2f       	mov	r16, r21
  Stash::load(0, 0);
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN5Stash4loadEhh>
  word* segs = Stash::bufs[0].words;
  PGM_P fmt = (PGM_P) *++segs;
     8e6:	c0 90 fc 01 	lds	r12, 0x01FC
     8ea:	d0 90 fd 01 	lds	r13, 0x01FD
     8ee:	1b 86       	std	Y+11, r1	; 0x0b
     8f0:	1a 86       	std	Y+10, r1	; 0x0a
public:
  static void initMap (uint8_t last);
  static void load (uint8_t idx, uint8_t blk);
  static uint8_t freeCount ();

  Stash () : curr (0) { first = 0; }
     8f2:	8a eb       	ldi	r24, 0xBA	; 186
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	99 87       	std	Y+9, r25	; 0x09
     8f8:	88 87       	std	Y+8, r24	; 0x08
     8fa:	1f 86       	std	Y+15, r1	; 0x0f
     8fc:	1d 86       	std	Y+13, r1	; 0x0d
  Stash stash;
  char mode = '@', tmp[7], *ptr = NULL, *out = (char*) buf;
     8fe:	21 2f       	mov	r18, r17
     900:	30 2f       	mov	r19, r16
     902:	c9 01       	movw	r24, r18
     904:	2c 01       	movw	r4, r24
     906:	0c ef       	ldi	r16, 0xFC	; 252
     908:	80 2e       	mov	r8, r16
     90a:	01 e0       	ldi	r16, 0x01	; 1
     90c:	90 2e       	mov	r9, r16
     90e:	10 e4       	ldi	r17, 0x40	; 64
     910:	f1 2e       	mov	r15, r17
     912:	00 e0       	ldi	r16, 0x00	; 0
     914:	10 e0       	ldi	r17, 0x00	; 0
     916:	aa 24       	eor	r10, r10
     918:	bb 24       	eor	r11, r11
  for (word i = 0; i < offset + count; ) {
     91a:	62 0c       	add	r6, r2
     91c:	73 1c       	adc	r7, r3
     91e:	83 c0       	rjmp	.+262    	; 0xa26 <__stack+0x127>
    char c = 0;
    switch (mode) {
     920:	86 e4       	ldi	r24, 0x46	; 70
     922:	f8 16       	cp	r15, r24
     924:	09 f4       	brne	.+2      	; 0x928 <__stack+0x29>
     926:	5e c0       	rjmp	.+188    	; 0x9e4 <__stack+0xe5>
     928:	8f 15       	cp	r24, r15
     92a:	64 f0       	brlt	.+24     	; 0x944 <__stack+0x45>
     92c:	94 e4       	ldi	r25, 0x44	; 68
     92e:	f9 16       	cp	r15, r25
     930:	09 f4       	brne	.+2      	; 0x934 <__stack+0x35>
     932:	54 c0       	rjmp	.+168    	; 0x9dc <__stack+0xdd>
     934:	9f 15       	cp	r25, r15
     936:	0c f4       	brge	.+2      	; 0x93a <__stack+0x3b>
     938:	5a c0       	rjmp	.+180    	; 0x9ee <__stack+0xef>
     93a:	e0 e4       	ldi	r30, 0x40	; 64
     93c:	fe 16       	cp	r15, r30
     93e:	09 f0       	breq	.+2      	; 0x942 <__stack+0x43>
     940:	70 c0       	rjmp	.+224    	; 0xa22 <__stack+0x123>
     942:	09 c0       	rjmp	.+18     	; 0x956 <__stack+0x57>
     944:	f8 e4       	ldi	r31, 0x48	; 72
     946:	ff 16       	cp	r15, r31
     948:	09 f4       	brne	.+2      	; 0x94c <__stack+0x4d>
     94a:	5b c0       	rjmp	.+182    	; 0xa02 <__stack+0x103>
     94c:	83 e5       	ldi	r24, 0x53	; 83
     94e:	f8 16       	cp	r15, r24
     950:	09 f0       	breq	.+2      	; 0x954 <__stack+0x55>
     952:	67 c0       	rjmp	.+206    	; 0xa22 <__stack+0x123>
     954:	43 c0       	rjmp	.+134    	; 0x9dc <__stack+0xdd>
      case '@': {
        c = pgm_read_byte(fmt++);
     956:	f6 01       	movw	r30, r12
     958:	84 91       	lpm	r24, Z+
     95a:	28 2f       	mov	r18, r24
        if (c == 0)
     95c:	88 23       	and	r24, r24
     95e:	09 f4       	brne	.+2      	; 0x962 <__stack+0x63>
     960:	66 c0       	rjmp	.+204    	; 0xa2e <__stack+0x12f>
  char mode = '@', tmp[7], *ptr = NULL, *out = (char*) buf;
  for (word i = 0; i < offset + count; ) {
    char c = 0;
    switch (mode) {
      case '@': {
        c = pgm_read_byte(fmt++);
     962:	08 94       	sec
     964:	c1 1c       	adc	r12, r1
     966:	d1 1c       	adc	r13, r1
        if (c == 0)
          return;
        if (c != '$')
     968:	84 32       	cpi	r24, 0x24	; 36
     96a:	09 f0       	breq	.+2      	; 0x96e <__stack+0x6f>
     96c:	50 c0       	rjmp	.+160    	; 0xa0e <__stack+0x10f>
          break;
        word arg = *++segs;
     96e:	82 e0       	ldi	r24, 0x02	; 2
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	88 0e       	add	r8, r24
     974:	99 1e       	adc	r9, r25
     976:	f4 01       	movw	r30, r8
     978:	60 81       	ld	r22, Z
     97a:	21 81       	ldd	r18, Z+1	; 0x01
        mode = pgm_read_byte(fmt++);
     97c:	f6 01       	movw	r30, r12
     97e:	08 94       	sec
     980:	c1 1c       	adc	r12, r1
     982:	d1 1c       	adc	r13, r1
     984:	f4 90       	lpm	r15, Z+
        switch (mode) {
     986:	f6 e4       	ldi	r31, 0x46	; 70
     988:	ff 15       	cp	r31, r15
     98a:	44 f0       	brlt	.+16     	; 0x99c <__stack+0x9d>
     98c:	85 e4       	ldi	r24, 0x45	; 69
     98e:	f8 16       	cp	r15, r24
     990:	c4 f4       	brge	.+48     	; 0x9c2 <__stack+0xc3>
     992:	94 e4       	ldi	r25, 0x44	; 68
     994:	f9 16       	cp	r15, r25
     996:	09 f0       	breq	.+2      	; 0x99a <__stack+0x9b>
     998:	46 c0       	rjmp	.+140    	; 0xa26 <__stack+0x127>
     99a:	08 c0       	rjmp	.+16     	; 0x9ac <__stack+0xad>
     99c:	e8 e4       	ldi	r30, 0x48	; 72
     99e:	fe 16       	cp	r15, r30
     9a0:	a9 f0       	breq	.+42     	; 0x9cc <__stack+0xcd>
     9a2:	f3 e5       	ldi	r31, 0x53	; 83
     9a4:	ff 16       	cp	r15, r31
     9a6:	09 f0       	breq	.+2      	; 0x9aa <__stack+0xab>
     9a8:	3e c0       	rjmp	.+124    	; 0xa26 <__stack+0x127>
     9aa:	0b c0       	rjmp	.+22     	; 0x9c2 <__stack+0xc3>
          case 'D':
            wtoa(arg, tmp);
     9ac:	86 2f       	mov	r24, r22
     9ae:	92 2f       	mov	r25, r18
     9b0:	be 01       	movw	r22, r28
     9b2:	6f 5f       	subi	r22, 0xFF	; 255
     9b4:	7f 4f       	sbci	r23, 0xFF	; 255
     9b6:	0e 94 9b 01 	call	0x336	; 0x336 <_ZL4wtoajPc>
     9ba:	8e 01       	movw	r16, r28
     9bc:	0f 5f       	subi	r16, 0xFF	; 255
     9be:	1f 4f       	sbci	r17, 0xFF	; 255
     9c0:	32 c0       	rjmp	.+100    	; 0xa26 <__stack+0x127>
            ptr = tmp;
            break;
          case 'S':
          case 'F':
          case 'E':
            ptr = (char*) arg;
     9c2:	86 2f       	mov	r24, r22
     9c4:	92 2f       	mov	r25, r18
     9c6:	9c 01       	movw	r18, r24
     9c8:	89 01       	movw	r16, r18
     9ca:	2d c0       	rjmp	.+90     	; 0xa26 <__stack+0x127>
            break;
          case 'H':
            stash.open(arg);
     9cc:	ce 01       	movw	r24, r28
     9ce:	08 96       	adiw	r24, 0x08	; 8
     9d0:	0e 94 24 03 	call	0x648	; 0x648 <_ZN5Stash4openEh>
            ptr = (char*) &stash;
     9d4:	8e 01       	movw	r16, r28
     9d6:	08 5f       	subi	r16, 0xF8	; 248
     9d8:	1f 4f       	sbci	r17, 0xFF	; 255
     9da:	25 c0       	rjmp	.+74     	; 0xa26 <__stack+0x127>
        }
        continue;
      }
      case 'D':
      case 'S':
        c = *ptr++;
     9dc:	f8 01       	movw	r30, r16
     9de:	21 91       	ld	r18, Z+
     9e0:	8f 01       	movw	r16, r30
     9e2:	13 c0       	rjmp	.+38     	; 0xa0a <__stack+0x10b>
        break;
      case 'F':
        c = pgm_read_byte(ptr++);
     9e4:	f8 01       	movw	r30, r16
     9e6:	0f 5f       	subi	r16, 0xFF	; 255
     9e8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ea:	24 91       	lpm	r18, Z+
     9ec:	0e c0       	rjmp	.+28     	; 0xa0a <__stack+0x10b>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     9ee:	f9 99       	sbic	0x1f, 1	; 31
     9f0:	fe cf       	rjmp	.-4      	; 0x9ee <__stack+0xef>
        break;
      case 'E':
        c = eeprom_read_byte((byte*) ptr++);
     9f2:	c8 01       	movw	r24, r16
     9f4:	01 96       	adiw	r24, 0x01	; 1
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
     9f6:	12 bd       	out	0x22, r17	; 34
     9f8:	01 bd       	out	0x21, r16	; 33
        "/* END EEPROM READ CRITICAL SECTION */ \n\t"
        : "=r" (__result)
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
     9fa:	f8 9a       	sbi	0x1f, 0	; 31
     9fc:	20 b5       	in	r18, 0x20	; 32
     9fe:	8c 01       	movw	r16, r24
     a00:	04 c0       	rjmp	.+8      	; 0xa0a <__stack+0x10b>
        break;
      case 'H':
        c = ((Stash*) ptr)->get();
     a02:	c8 01       	movw	r24, r16
     a04:	0e 94 b1 02 	call	0x562	; 0x562 <_ZN5Stash3getEv>
     a08:	28 2f       	mov	r18, r24
        break;
    }
    if (c == 0) {
     a0a:	22 23       	and	r18, r18
     a0c:	51 f0       	breq	.+20     	; 0xa22 <__stack+0x123>
      mode = '@';
      continue;
    }
    if (i >= offset)
     a0e:	a2 14       	cp	r10, r2
     a10:	b3 04       	cpc	r11, r3
     a12:	18 f0       	brcs	.+6      	; 0xa1a <__stack+0x11b>
      *out++ = c;
     a14:	f2 01       	movw	r30, r4
     a16:	21 93       	st	Z+, r18
     a18:	2f 01       	movw	r4, r30
    ++i;
     a1a:	08 94       	sec
     a1c:	a1 1c       	adc	r10, r1
     a1e:	b1 1c       	adc	r11, r1
     a20:	02 c0       	rjmp	.+4      	; 0xa26 <__stack+0x127>
     a22:	b0 e4       	ldi	r27, 0x40	; 64
     a24:	fb 2e       	mov	r15, r27
  Stash::load(0, 0);
  word* segs = Stash::bufs[0].words;
  PGM_P fmt = (PGM_P) *++segs;
  Stash stash;
  char mode = '@', tmp[7], *ptr = NULL, *out = (char*) buf;
  for (word i = 0; i < offset + count; ) {
     a26:	a6 14       	cp	r10, r6
     a28:	b7 04       	cpc	r11, r7
     a2a:	08 f4       	brcc	.+2      	; 0xa2e <__stack+0x12f>
     a2c:	79 cf       	rjmp	.-270    	; 0x920 <__stack+0x21>
    }
    if (i >= offset)
      *out++ = c;
    ++i;
  }
}
     a2e:	60 96       	adiw	r28, 0x10	; 16
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	f8 94       	cli
     a34:	de bf       	out	0x3e, r29	; 62
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	cd bf       	out	0x3d, r28	; 61
     a3a:	cf 91       	pop	r28
     a3c:	df 91       	pop	r29
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	ff 90       	pop	r15
     a44:	df 90       	pop	r13
     a46:	cf 90       	pop	r12
     a48:	bf 90       	pop	r11
     a4a:	af 90       	pop	r10
     a4c:	9f 90       	pop	r9
     a4e:	8f 90       	pop	r8
     a50:	7f 90       	pop	r7
     a52:	6f 90       	pop	r6
     a54:	5f 90       	pop	r5
     a56:	4f 90       	pop	r4
     a58:	3f 90       	pop	r3
     a5a:	2f 90       	pop	r2
     a5c:	08 95       	ret

00000a5e <_ZN5Stash6createEv>:
      if (map[i] & m)
        ++count;
  return count;
}

uint8_t Stash::create () {
     a5e:	ef 92       	push	r14
     a60:	ff 92       	push	r15
     a62:	1f 93       	push	r17
     a64:	7c 01       	movw	r14, r24
  uint8_t blk = allocBlock();
     a66:	0e 94 5f 01 	call	0x2be	; 0x2be <_ZN5Stash10allocBlockEv>
     a6a:	18 2f       	mov	r17, r24
  load(0, blk);
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	61 2f       	mov	r22, r17
     a70:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN5Stash4loadEhh>
  bufs[0].head.count = 0;
     a74:	ea ef       	ldi	r30, 0xFA	; 250
     a76:	f1 e0       	ldi	r31, 0x01	; 1
     a78:	10 92 fa 01 	sts	0x01FA, r1
  bufs[0].head.first = bufs[0].head.last = blk;
     a7c:	10 93 fc 01 	sts	0x01FC, r17
     a80:	10 93 fb 01 	sts	0x01FB, r17
  bufs[0].tail = sizeof (StashHeader);
     a84:	83 e0       	ldi	r24, 0x03	; 3
     a86:	86 af       	std	Z+62, r24	; 0x3e
  bufs[0].next = 0;
     a88:	17 ae       	std	Z+63, r1	; 0x3f
  return open(blk);
     a8a:	c7 01       	movw	r24, r14
     a8c:	61 2f       	mov	r22, r17
     a8e:	0e 94 24 03 	call	0x648	; 0x648 <_ZN5Stash4openEh>
}
     a92:	1f 91       	pop	r17
     a94:	ff 90       	pop	r15
     a96:	ef 90       	pop	r14
     a98:	08 95       	ret

00000a9a <_ZL17send_dhcp_messagev>:
// 55  Parameter request list
// 58  Renewal (T1) Time Value
// 61  Client-identifier
// 255 End

static void send_dhcp_message (void) {
     a9a:	df 93       	push	r29
     a9c:	cf 93       	push	r28
     a9e:	00 d0       	rcall	.+0      	; 0xaa0 <_ZL17send_dhcp_messagev+0x6>
     aa0:	00 d0       	rcall	.+0      	; 0xaa2 <_ZL17send_dhcp_messagev+0x8>
     aa2:	00 d0       	rcall	.+0      	; 0xaa4 <_ZL17send_dhcp_messagev+0xa>
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62

	uint8_t allOnes[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
     aa8:	de 01       	movw	r26, r28
     aaa:	11 96       	adiw	r26, 0x01	; 1
     aac:	ee eb       	ldi	r30, 0xBE	; 190
     aae:	f1 e0       	ldi	r31, 0x01	; 1
     ab0:	86 e0       	ldi	r24, 0x06	; 6
     ab2:	01 90       	ld	r0, Z+
     ab4:	0d 92       	st	X+, r0
     ab6:	81 50       	subi	r24, 0x01	; 1
     ab8:	e1 f7       	brne	.-8      	; 0xab2 <_ZL17send_dhcp_messagev+0x18>
	
    memset(gPB, 0, UDP_DATA_P + sizeof( DHCPdata ));
     aba:	86 e1       	ldi	r24, 0x16	; 22
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	e7 e4       	ldi	r30, 0x47	; 71
     ac0:	f3 e0       	ldi	r31, 0x03	; 3
     ac2:	df 01       	movw	r26, r30
     ac4:	9c 01       	movw	r18, r24
     ac6:	1d 92       	st	X+, r1
     ac8:	21 50       	subi	r18, 0x01	; 1
     aca:	30 40       	sbci	r19, 0x00	; 0
     acc:	e1 f7       	brne	.-8      	; 0xac6 <_ZL17send_dhcp_messagev+0x2c>
	
    EtherCard::udpPrepare(DHCP_DEST_PORT, 
		(dhcpState == DHCP_STATE_BOUND ? EtherCard::dhcpip : allOnes),
		DHCP_SRC_PORT);   // SRC<->DST ??
     ace:	80 91 9c 02 	lds	r24, 0x029C
     ad2:	83 30       	cpi	r24, 0x03	; 3
     ad4:	19 f4       	brne	.+6      	; 0xadc <_ZL17send_dhcp_messagev+0x42>
     ad6:	6e e8       	ldi	r22, 0x8E	; 142
     ad8:	72 e0       	ldi	r23, 0x02	; 2
     ada:	03 c0       	rjmp	.+6      	; 0xae2 <_ZL17send_dhcp_messagev+0x48>
     adc:	be 01       	movw	r22, r28
     ade:	6f 5f       	subi	r22, 0xFF	; 255
     ae0:	7f 4f       	sbci	r23, 0xFF	; 255
     ae2:	84 e4       	ldi	r24, 0x44	; 68
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	43 e4       	ldi	r20, 0x43	; 67
     ae8:	50 e0       	ldi	r21, 0x00	; 0
     aea:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_ZN9EtherCard10udpPrepareEjPhj>
    
	if (dhcpState != DHCP_STATE_BOUND)
     aee:	80 91 9c 02 	lds	r24, 0x029C
     af2:	83 30       	cpi	r24, 0x03	; 3
     af4:	39 f0       	breq	.+14     	; 0xb04 <_ZL17send_dhcp_messagev+0x6a>
		EtherCard::copyMac(gPB + ETH_DST_MAC, allOnes); //force broadcast mac
     af6:	87 e4       	ldi	r24, 0x47	; 71
     af8:	93 e0       	ldi	r25, 0x03	; 3
     afa:	be 01       	movw	r22, r28
     afc:	6f 5f       	subi	r22, 0xFF	; 255
     afe:	7f 4f       	sbci	r23, 0xFF	; 255
     b00:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN9EtherCard7copyMacEPhPKh>
   
    // Build DHCP Packet from buf[UDP_DATA_P]
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);
    dhcpPtr->op = DHCP_BOOTREQUEST;
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	80 93 71 03 	sts	0x0371, r24
    dhcpPtr->htype = 1;
     b0a:	80 93 72 03 	sts	0x0372, r24
    dhcpPtr->hlen = 6;
     b0e:	86 e0       	ldi	r24, 0x06	; 6
     b10:	80 93 73 03 	sts	0x0373, r24
    dhcpPtr->xid = currentXid;
     b14:	80 91 a9 02 	lds	r24, 0x02A9
     b18:	90 91 aa 02 	lds	r25, 0x02AA
     b1c:	a0 91 ab 02 	lds	r26, 0x02AB
     b20:	b0 91 ac 02 	lds	r27, 0x02AC
     b24:	80 93 75 03 	sts	0x0375, r24
     b28:	90 93 76 03 	sts	0x0376, r25
     b2c:	a0 93 77 03 	sts	0x0377, r26
     b30:	b0 93 78 03 	sts	0x0378, r27
	if (dhcpState == DHCP_STATE_BOUND) {
     b34:	80 91 9c 02 	lds	r24, 0x029C
     b38:	83 30       	cpi	r24, 0x03	; 3
     b3a:	39 f4       	brne	.+14     	; 0xb4a <_ZL17send_dhcp_messagev+0xb0>
		EtherCard::copyIp(dhcpPtr->ciaddr, EtherCard::myip); 
     b3c:	81 e7       	ldi	r24, 0x71	; 113
     b3e:	93 e0       	ldi	r25, 0x03	; 3
     b40:	0c 96       	adiw	r24, 0x0c	; 12
     b42:	62 e8       	ldi	r22, 0x82	; 130
     b44:	72 e0       	ldi	r23, 0x02	; 2
     b46:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN9EtherCard6copyIpEPhPKh>
	}
    EtherCard::copyMac(dhcpPtr->chaddr, EtherCard::mymac);
     b4a:	8d e8       	ldi	r24, 0x8D	; 141
     b4c:	93 e0       	ldi	r25, 0x03	; 3
     b4e:	6c e7       	ldi	r22, 0x7C	; 124
     b50:	72 e0       	ldi	r23, 0x02	; 2
     b52:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN9EtherCard7copyMacEPhPKh>
     b56:	ad e5       	ldi	r26, 0x5D	; 93
     b58:	b4 e0       	ldi	r27, 0x04	; 4
     b5a:	e5 ea       	ldi	r30, 0xA5	; 165
     b5c:	f1 e0       	ldi	r31, 0x01	; 1
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <_ZL17send_dhcp_messagev+0xca>
    *bufPtr++ = b;
}

static void addBytes (byte len, const byte* data) {
    while (len-- > 0)
        addToBuf(*data++);
     b60:	81 91       	ld	r24, Z+
static byte* bufPtr;

// static uint8_t allOnes[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

static void addToBuf (byte b) {
    *bufPtr++ = b;
     b62:	8d 93       	st	X+, r24
}

static void addBytes (byte len, const byte* data) {
    while (len-- > 0)
     b64:	31 e0       	ldi	r19, 0x01	; 1
     b66:	eb 3a       	cpi	r30, 0xAB	; 171
     b68:	f3 07       	cpc	r31, r19
     b6a:	d1 f7       	brne	.-12     	; 0xb60 <_ZL17send_dhcp_messagev+0xc6>
    // DHCP magic cookie, followed by message type
    static byte cookie[] = { 99, 130, 83, 99, 53, 1 };
    addBytes(sizeof cookie, cookie);
    // addToBuf(53);  // DHCP_STATE_SELECTING, DHCP_STATE_REQUESTING
    // addToBuf(1);   // Length 
 	addToBuf(dhcpState == DHCP_STATE_INIT ? DHCP_DISCOVER : DHCP_REQUEST);
     b6c:	90 91 9c 02 	lds	r25, 0x029C
     b70:	99 23       	and	r25, r25
     b72:	11 f0       	breq	.+4      	; 0xb78 <_ZL17send_dhcp_messagev+0xde>
     b74:	83 e0       	ldi	r24, 0x03	; 3
     b76:	01 c0       	rjmp	.+2      	; 0xb7a <_ZL17send_dhcp_messagev+0xe0>
     b78:	81 e0       	ldi	r24, 0x01	; 1
static byte* bufPtr;

// static uint8_t allOnes[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

static void addToBuf (byte b) {
    *bufPtr++ = b;
     b7a:	80 93 63 04 	sts	0x0463, r24
}

static void addBytes (byte len, const byte* data) {
    while (len-- > 0)
        addToBuf(*data++);
     b7e:	8d e3       	ldi	r24, 0x3D	; 61
     b80:	80 93 64 04 	sts	0x0464, r24
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	80 93 65 04 	sts	0x0465, r24
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	80 93 66 04 	sts	0x0466, r24
     b90:	a7 e6       	ldi	r26, 0x67	; 103
     b92:	b4 e0       	ldi	r27, 0x04	; 4
     b94:	ec e7       	ldi	r30, 0x7C	; 124
     b96:	f2 e0       	ldi	r31, 0x02	; 2
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <_ZL17send_dhcp_messagev+0x104>
     b9a:	81 91       	ld	r24, Z+
static byte* bufPtr;

// static uint8_t allOnes[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

static void addToBuf (byte b) {
    *bufPtr++ = b;
     b9c:	8d 93       	st	X+, r24
}

static void addBytes (byte len, const byte* data) {
    while (len-- > 0)
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	e2 38       	cpi	r30, 0x82	; 130
     ba2:	f8 07       	cpc	r31, r24
     ba4:	d1 f7       	brne	.-12     	; 0xb9a <_ZL17send_dhcp_messagev+0x100>
static byte* bufPtr;

// static uint8_t allOnes[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

static void addToBuf (byte b) {
    *bufPtr++ = b;
     ba6:	8c e0       	ldi	r24, 0x0C	; 12
     ba8:	80 93 6d 04 	sts	0x046D, r24
    addToBuf(0x01);   // Ethernet
    addBytes(6, EtherCard::mymac);
    
    addToBuf(12);     // Host name Option
    addToBuf(10);
    addBytes(10, (byte*) hostname);
     bac:	8a e0       	ldi	r24, 0x0A	; 10
     bae:	80 93 6e 04 	sts	0x046E, r24
     bb2:	e4 e9       	ldi	r30, 0x94	; 148
     bb4:	f1 e0       	ldi	r31, 0x01	; 1
     bb6:	af e6       	ldi	r26, 0x6F	; 111
     bb8:	b4 e0       	ldi	r27, 0x04	; 4
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <_ZL17send_dhcp_messagev+0x126>
    *bufPtr++ = b;
}

static void addBytes (byte len, const byte* data) {
    while (len-- > 0)
        addToBuf(*data++);
     bbc:	81 91       	ld	r24, Z+
static byte* bufPtr;

// static uint8_t allOnes[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

static void addToBuf (byte b) {
    *bufPtr++ = b;
     bbe:	8d 93       	st	X+, r24
}

static void addBytes (byte len, const byte* data) {
    while (len-- > 0)
     bc0:	21 e0       	ldi	r18, 0x01	; 1
     bc2:	ee 39       	cpi	r30, 0x9E	; 158
     bc4:	f2 07       	cpc	r31, r18
     bc6:	d1 f7       	brne	.-12     	; 0xbbc <_ZL17send_dhcp_messagev+0x122>
     bc8:	29 e7       	ldi	r18, 0x79	; 121
     bca:	34 e0       	ldi	r19, 0x04	; 4
     bcc:	30 93 ae 02 	sts	0x02AE, r19
     bd0:	20 93 ad 02 	sts	0x02AD, r18
    addToBuf(12);     // Host name Option
    addToBuf(10);
    addBytes(10, (byte*) hostname);
    
	
	if( dhcpState == DHCP_STATE_SELECTING) {
     bd4:	91 30       	cpi	r25, 0x01	; 1
     bd6:	69 f5       	brne	.+90     	; 0xc32 <_ZL17send_dhcp_messagev+0x198>
static byte* bufPtr;

// static uint8_t allOnes[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

static void addToBuf (byte b) {
    *bufPtr++ = b;
     bd8:	82 e3       	ldi	r24, 0x32	; 50
     bda:	80 93 79 04 	sts	0x0479, r24
}

static void addBytes (byte len, const byte* data) {
    while (len-- > 0)
        addToBuf(*data++);
     bde:	84 e0       	ldi	r24, 0x04	; 4
     be0:	80 93 7a 04 	sts	0x047A, r24
     be4:	d9 01       	movw	r26, r18
     be6:	12 96       	adiw	r26, 0x02	; 2
     be8:	e2 e8       	ldi	r30, 0x82	; 130
     bea:	f2 e0       	ldi	r31, 0x02	; 2
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <_ZL17send_dhcp_messagev+0x158>
     bee:	81 91       	ld	r24, Z+
static byte* bufPtr;

// static uint8_t allOnes[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

static void addToBuf (byte b) {
    *bufPtr++ = b;
     bf0:	8d 93       	st	X+, r24
}

static void addBytes (byte len, const byte* data) {
    while (len-- > 0)
     bf2:	32 e0       	ldi	r19, 0x02	; 2
     bf4:	e6 38       	cpi	r30, 0x86	; 134
     bf6:	f3 07       	cpc	r31, r19
     bf8:	d1 f7       	brne	.-12     	; 0xbee <_ZL17send_dhcp_messagev+0x154>
static byte* bufPtr;

// static uint8_t allOnes[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

static void addToBuf (byte b) {
    *bufPtr++ = b;
     bfa:	86 e3       	ldi	r24, 0x36	; 54
     bfc:	80 93 7f 04 	sts	0x047F, r24
}

static void addBytes (byte len, const byte* data) {
    while (len-- > 0)
        addToBuf(*data++);
     c00:	84 e0       	ldi	r24, 0x04	; 4
     c02:	80 93 80 04 	sts	0x0480, r24
     c06:	81 e8       	ldi	r24, 0x81	; 129
     c08:	94 e0       	ldi	r25, 0x04	; 4
     c0a:	90 93 ae 02 	sts	0x02AE, r25
     c0e:	80 93 ad 02 	sts	0x02AD, r24
     c12:	dc 01       	movw	r26, r24
     c14:	ee e8       	ldi	r30, 0x8E	; 142
     c16:	f2 e0       	ldi	r31, 0x02	; 2
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <_ZL17send_dhcp_messagev+0x184>
     c1a:	81 91       	ld	r24, Z+
static byte* bufPtr;

// static uint8_t allOnes[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

static void addToBuf (byte b) {
    *bufPtr++ = b;
     c1c:	8d 93       	st	X+, r24
}

static void addBytes (byte len, const byte* data) {
    while (len-- > 0)
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	e2 39       	cpi	r30, 0x92	; 146
     c22:	f8 07       	cpc	r31, r24
     c24:	d1 f7       	brne	.-12     	; 0xc1a <_ZL17send_dhcp_messagev+0x180>
     c26:	85 e8       	ldi	r24, 0x85	; 133
     c28:	94 e0       	ldi	r25, 0x04	; 4
     c2a:	90 93 ae 02 	sts	0x02AE, r25
     c2e:	80 93 ad 02 	sts	0x02AD, r24
     c32:	20 91 ad 02 	lds	r18, 0x02AD
     c36:	30 91 ae 02 	lds	r19, 0x02AE
     c3a:	d9 01       	movw	r26, r18
     c3c:	ef e9       	ldi	r30, 0x9F	; 159
     c3e:	f1 e0       	ldi	r31, 0x01	; 1
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <_ZL17send_dhcp_messagev+0x1ac>
        addToBuf(*data++);
     c42:	81 91       	ld	r24, Z+
static byte* bufPtr;

// static uint8_t allOnes[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

static void addToBuf (byte b) {
    *bufPtr++ = b;
     c44:	8d 93       	st	X+, r24
}

static void addBytes (byte len, const byte* data) {
    while (len-- > 0)
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	e5 3a       	cpi	r30, 0xA5	; 165
     c4a:	f8 07       	cpc	r31, r24
     c4c:	d1 f7       	brne	.-12     	; 0xc42 <_ZL17send_dhcp_messagev+0x1a8>
     c4e:	c9 01       	movw	r24, r18
     c50:	06 96       	adiw	r24, 0x06	; 6
     c52:	90 93 ae 02 	sts	0x02AE, r25
     c56:	80 93 ad 02 	sts	0x02AD, r24
    // addToBuf(3);      // Route/Gateway
    // addToBuf(6);      // DNS Server
    // addToBuf(255);    // end option

    // packet size will be under 300 bytes
    EtherCard::udpTransmit((bufPtr - gPB) - UDP_DATA_P);
     c5a:	81 57       	subi	r24, 0x71	; 113
     c5c:	93 40       	sbci	r25, 0x03	; 3
     c5e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <_ZN9EtherCard11udpTransmitEj>
}
     c62:	26 96       	adiw	r28, 0x06	; 6
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	cf 91       	pop	r28
     c70:	df 91       	pop	r29
     c72:	08 95       	ret

00000c74 <_ZN9EtherCard16DhcpStateMachineEj>:
    return dhcpState == DHCP_STATE_BOUND ;
}



void EtherCard::DhcpStateMachine (word len) {
     c74:	ef 92       	push	r14
     c76:	ff 92       	push	r15
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	ec 01       	movw	r28, r24
			Serial.println("Renew");
			break;		
	}
#endif

	switch (dhcpState) {
     c82:	80 91 9c 02 	lds	r24, 0x029C
     c86:	82 30       	cpi	r24, 0x02	; 2
     c88:	09 f4       	brne	.+2      	; 0xc8c <_ZN9EtherCard16DhcpStateMachineEj+0x18>
     c8a:	e0 c0       	rjmp	.+448    	; 0xe4c <_ZN9EtherCard16DhcpStateMachineEj+0x1d8>
     c8c:	83 30       	cpi	r24, 0x03	; 3
     c8e:	30 f4       	brcc	.+12     	; 0xc9c <_ZN9EtherCard16DhcpStateMachineEj+0x28>
     c90:	88 23       	and	r24, r24
     c92:	51 f1       	breq	.+84     	; 0xce8 <_ZN9EtherCard16DhcpStateMachineEj+0x74>
     c94:	81 30       	cpi	r24, 0x01	; 1
     c96:	09 f0       	breq	.+2      	; 0xc9a <_ZN9EtherCard16DhcpStateMachineEj+0x26>
     c98:	3d c1       	rjmp	.+634    	; 0xf14 <_ZN9EtherCard16DhcpStateMachineEj+0x2a0>
     c9a:	4a c0       	rjmp	.+148    	; 0xd30 <_ZN9EtherCard16DhcpStateMachineEj+0xbc>
     c9c:	83 30       	cpi	r24, 0x03	; 3
     c9e:	21 f0       	breq	.+8      	; 0xca8 <_ZN9EtherCard16DhcpStateMachineEj+0x34>
     ca0:	84 30       	cpi	r24, 0x04	; 4
     ca2:	09 f0       	breq	.+2      	; 0xca6 <_ZN9EtherCard16DhcpStateMachineEj+0x32>
     ca4:	37 c1       	rjmp	.+622    	; 0xf14 <_ZN9EtherCard16DhcpStateMachineEj+0x2a0>
     ca6:	d2 c0       	rjmp	.+420    	; 0xe4c <_ZN9EtherCard16DhcpStateMachineEj+0x1d8>
	
		case DHCP_STATE_BOUND:
		    if (millis() >= leaseStart + leaseTime) {
     ca8:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <millis>
     cac:	20 91 a1 02 	lds	r18, 0x02A1
     cb0:	30 91 a2 02 	lds	r19, 0x02A2
     cb4:	40 91 a3 02 	lds	r20, 0x02A3
     cb8:	50 91 a4 02 	lds	r21, 0x02A4
     cbc:	e0 90 9d 02 	lds	r14, 0x029D
     cc0:	f0 90 9e 02 	lds	r15, 0x029E
     cc4:	00 91 9f 02 	lds	r16, 0x029F
     cc8:	10 91 a0 02 	lds	r17, 0x02A0
     ccc:	2e 0d       	add	r18, r14
     cce:	3f 1d       	adc	r19, r15
     cd0:	40 1f       	adc	r20, r16
     cd2:	51 1f       	adc	r21, r17
     cd4:	62 17       	cp	r22, r18
     cd6:	73 07       	cpc	r23, r19
     cd8:	84 07       	cpc	r24, r20
     cda:	95 07       	cpc	r25, r21
     cdc:	08 f4       	brcc	.+2      	; 0xce0 <_ZN9EtherCard16DhcpStateMachineEj+0x6c>
     cde:	1a c1       	rjmp	.+564    	; 0xf14 <_ZN9EtherCard16DhcpStateMachineEj+0x2a0>
				send_dhcp_message(); 
     ce0:	0e 94 4d 05 	call	0xa9a	; 0xa9a <_ZL17send_dhcp_messagev>
				dhcpState = DHCP_STATE_RENEWING;
     ce4:	84 e0       	ldi	r24, 0x04	; 4
     ce6:	17 c0       	rjmp	.+46     	; 0xd16 <_ZN9EtherCard16DhcpStateMachineEj+0xa2>
				stateTimer = millis();
			} 
			break;
	
		case DHCP_STATE_INIT:
			currentXid = millis();
     ce8:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <millis>
     cec:	60 93 a9 02 	sts	0x02A9, r22
     cf0:	70 93 aa 02 	sts	0x02AA, r23
     cf4:	80 93 ab 02 	sts	0x02AB, r24
     cf8:	90 93 ac 02 	sts	0x02AC, r25
			memset(myip,0,4); // force ip 0.0.0.0
     cfc:	10 92 82 02 	sts	0x0282, r1
     d00:	10 92 83 02 	sts	0x0283, r1
     d04:	10 92 84 02 	sts	0x0284, r1
     d08:	10 92 85 02 	sts	0x0285, r1
			send_dhcp_message();
     d0c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <_ZL17send_dhcp_messagev>
			enableBroadcast();
     d10:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN8ENC28J6015enableBroadcastEv>
			dhcpState = DHCP_STATE_SELECTING;
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	80 93 9c 02 	sts	0x029C, r24
			stateTimer = millis();
     d1a:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <millis>
     d1e:	60 93 a5 02 	sts	0x02A5, r22
     d22:	70 93 a6 02 	sts	0x02A6, r23
     d26:	80 93 a7 02 	sts	0x02A7, r24
     d2a:	90 93 a8 02 	sts	0x02A8, r25
     d2e:	f2 c0       	rjmp	.+484    	; 0xf14 <_ZN9EtherCard16DhcpStateMachineEj+0x2a0>

static bool dhcp_received_message_type (word len, byte msgType) {
    // Map struct onto payload
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);
	
	if (len >= 70 && gPB[UDP_SRC_PORT_L_P] == DHCP_SRC_PORT &&
     d30:	c6 34       	cpi	r28, 0x46	; 70
     d32:	d1 05       	cpc	r29, r1
     d34:	08 f4       	brcc	.+2      	; 0xd38 <_ZN9EtherCard16DhcpStateMachineEj+0xc4>
     d36:	b2 c0       	rjmp	.+356    	; 0xe9c <_ZN9EtherCard16DhcpStateMachineEj+0x228>
     d38:	80 91 6a 03 	lds	r24, 0x036A
     d3c:	83 34       	cpi	r24, 0x43	; 67
     d3e:	09 f0       	breq	.+2      	; 0xd42 <_ZN9EtherCard16DhcpStateMachineEj+0xce>
     d40:	ad c0       	rjmp	.+346    	; 0xe9c <_ZN9EtherCard16DhcpStateMachineEj+0x228>
     d42:	80 91 71 03 	lds	r24, 0x0371
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	09 f0       	breq	.+2      	; 0xd4c <_ZN9EtherCard16DhcpStateMachineEj+0xd8>
     d4a:	a8 c0       	rjmp	.+336    	; 0xe9c <_ZN9EtherCard16DhcpStateMachineEj+0x228>
     d4c:	20 91 75 03 	lds	r18, 0x0375
     d50:	30 91 76 03 	lds	r19, 0x0376
     d54:	40 91 77 03 	lds	r20, 0x0377
     d58:	50 91 78 03 	lds	r21, 0x0378
     d5c:	80 91 a9 02 	lds	r24, 0x02A9
     d60:	90 91 aa 02 	lds	r25, 0x02AA
     d64:	a0 91 ab 02 	lds	r26, 0x02AB
     d68:	b0 91 ac 02 	lds	r27, 0x02AC
     d6c:	28 17       	cp	r18, r24
     d6e:	39 07       	cpc	r19, r25
     d70:	4a 07       	cpc	r20, r26
     d72:	5b 07       	cpc	r21, r27
     d74:	09 f0       	breq	.+2      	; 0xd78 <_ZN9EtherCard16DhcpStateMachineEj+0x104>
     d76:	92 c0       	rjmp	.+292    	; 0xe9c <_ZN9EtherCard16DhcpStateMachineEj+0x228>
            dhcpPtr->op == DHCP_BOOTRESPONSE && dhcpPtr->xid == currentXid ) {
	
		int optionIndex = UDP_DATA_P + sizeof( DHCPdata ) + 4;
		return gPB[optionIndex] == 53 ? gPB[optionIndex+2] == msgType : false;
     d78:	80 91 61 04 	lds	r24, 0x0461
     d7c:	85 33       	cpi	r24, 0x35	; 53
     d7e:	09 f0       	breq	.+2      	; 0xd82 <_ZN9EtherCard16DhcpStateMachineEj+0x10e>
     d80:	8d c0       	rjmp	.+282    	; 0xe9c <_ZN9EtherCard16DhcpStateMachineEj+0x228>
     d82:	80 91 63 04 	lds	r24, 0x0463
     d86:	82 30       	cpi	r24, 0x02	; 2
     d88:	09 f0       	breq	.+2      	; 0xd8c <_ZN9EtherCard16DhcpStateMachineEj+0x118>
     d8a:	88 c0       	rjmp	.+272    	; 0xe9c <_ZN9EtherCard16DhcpStateMachineEj+0x228>
     d8c:	a6 c0       	rjmp	.+332    	; 0xeda <_ZN9EtherCard16DhcpStateMachineEj+0x266>
    // Offered IP address is in yiaddr
    EtherCard::copyIp(EtherCard::myip, dhcpPtr->yiaddr);
    // Scan through variable length option list identifying options we want
    byte *ptr = (byte*) (dhcpPtr + 1) + 4;
    do {
        byte option = *ptr++;
     d8e:	df 01       	movw	r26, r30
     d90:	11 96       	adiw	r26, 0x01	; 1
        byte optionLen = *ptr++;
     d92:	e1 80       	ldd	r14, Z+1	; 0x01
     d94:	ed 01       	movw	r28, r26
     d96:	21 96       	adiw	r28, 0x01	; 1
        switch (option) {
     d98:	80 81       	ld	r24, Z
     d9a:	86 30       	cpi	r24, 0x06	; 6
     d9c:	a9 f0       	breq	.+42     	; 0xdc8 <_ZN9EtherCard16DhcpStateMachineEj+0x154>
     d9e:	87 30       	cpi	r24, 0x07	; 7
     da0:	30 f4       	brcc	.+12     	; 0xdae <_ZN9EtherCard16DhcpStateMachineEj+0x13a>
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	59 f0       	breq	.+22     	; 0xdbc <_ZN9EtherCard16DhcpStateMachineEj+0x148>
     da6:	83 30       	cpi	r24, 0x03	; 3
     da8:	09 f0       	breq	.+2      	; 0xdac <_ZN9EtherCard16DhcpStateMachineEj+0x138>
     daa:	45 c0       	rjmp	.+138    	; 0xe36 <_ZN9EtherCard16DhcpStateMachineEj+0x1c2>
     dac:	0a c0       	rjmp	.+20     	; 0xdc2 <_ZN9EtherCard16DhcpStateMachineEj+0x14e>
     dae:	86 33       	cpi	r24, 0x36	; 54
     db0:	e9 f1       	breq	.+122    	; 0xe2c <_ZN9EtherCard16DhcpStateMachineEj+0x1b8>
     db2:	8a 33       	cpi	r24, 0x3A	; 58
     db4:	61 f0       	breq	.+24     	; 0xdce <_ZN9EtherCard16DhcpStateMachineEj+0x15a>
     db6:	83 33       	cpi	r24, 0x33	; 51
     db8:	f1 f5       	brne	.+124    	; 0xe36 <_ZN9EtherCard16DhcpStateMachineEj+0x1c2>
     dba:	09 c0       	rjmp	.+18     	; 0xdce <_ZN9EtherCard16DhcpStateMachineEj+0x15a>
            case 1:  EtherCard::copyIp(EtherCard::mymask, ptr);
     dbc:	86 e8       	ldi	r24, 0x86	; 134
     dbe:	92 e0       	ldi	r25, 0x02	; 2
     dc0:	37 c0       	rjmp	.+110    	; 0xe30 <_ZN9EtherCard16DhcpStateMachineEj+0x1bc>
                     break;
            case 3:  EtherCard::copyIp(EtherCard::gwip, ptr);
     dc2:	8a e8       	ldi	r24, 0x8A	; 138
     dc4:	92 e0       	ldi	r25, 0x02	; 2
     dc6:	34 c0       	rjmp	.+104    	; 0xe30 <_ZN9EtherCard16DhcpStateMachineEj+0x1bc>
                     break;
            case 6:  EtherCard::copyIp(EtherCard::dnsip, ptr);
     dc8:	82 e9       	ldi	r24, 0x92	; 146
     dca:	92 e0       	ldi	r25, 0x02	; 2
     dcc:	31 c0       	rjmp	.+98     	; 0xe30 <_ZN9EtherCard16DhcpStateMachineEj+0x1bc>
                     break;
            case 51:
            case 58: leaseTime = 0; // option 58 = Renewal Time, 51 = Lease Time
                     for (byte i = 0; i<4; i++)
                         leaseTime = (leaseTime << 8) + ptr[i];
     dce:	11 96       	adiw	r26, 0x01	; 1
     dd0:	6c 91       	ld	r22, X
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	98 2f       	mov	r25, r24
     dda:	87 2f       	mov	r24, r23
     ddc:	76 2f       	mov	r23, r22
     dde:	66 27       	eor	r22, r22
     de0:	29 81       	ldd	r18, Y+1	; 0x01
     de2:	62 0f       	add	r22, r18
     de4:	71 1d       	adc	r23, r1
     de6:	81 1d       	adc	r24, r1
     de8:	91 1d       	adc	r25, r1
     dea:	98 2f       	mov	r25, r24
     dec:	87 2f       	mov	r24, r23
     dee:	76 2f       	mov	r23, r22
     df0:	66 27       	eor	r22, r22
     df2:	2a 81       	ldd	r18, Y+2	; 0x02
     df4:	62 0f       	add	r22, r18
     df6:	71 1d       	adc	r23, r1
     df8:	81 1d       	adc	r24, r1
     dfa:	91 1d       	adc	r25, r1
     dfc:	98 2f       	mov	r25, r24
     dfe:	87 2f       	mov	r24, r23
     e00:	76 2f       	mov	r23, r22
     e02:	66 27       	eor	r22, r22
     e04:	2b 81       	ldd	r18, Y+3	; 0x03
     e06:	62 0f       	add	r22, r18
     e08:	71 1d       	adc	r23, r1
     e0a:	81 1d       	adc	r24, r1
     e0c:	91 1d       	adc	r25, r1
                     leaseTime *= 1000;      // milliseconds
     e0e:	28 ee       	ldi	r18, 0xE8	; 232
     e10:	33 e0       	ldi	r19, 0x03	; 3
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	50 e0       	ldi	r21, 0x00	; 0
     e16:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__mulsi3>
     e1a:	60 93 a1 02 	sts	0x02A1, r22
     e1e:	70 93 a2 02 	sts	0x02A2, r23
     e22:	80 93 a3 02 	sts	0x02A3, r24
     e26:	90 93 a4 02 	sts	0x02A4, r25
     e2a:	05 c0       	rjmp	.+10     	; 0xe36 <_ZN9EtherCard16DhcpStateMachineEj+0x1c2>
                     break;
            case 54: EtherCard::copyIp(EtherCard::dhcpip, ptr);
     e2c:	8e e8       	ldi	r24, 0x8E	; 142
     e2e:	92 e0       	ldi	r25, 0x02	; 2
     e30:	be 01       	movw	r22, r28
     e32:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN9EtherCard6copyIpEPhPKh>
                     break;
        }
        ptr += optionLen;
     e36:	fe 01       	movw	r30, r28
     e38:	ee 0d       	add	r30, r14
     e3a:	f1 1d       	adc	r31, r1
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);
    // Offered IP address is in yiaddr
    EtherCard::copyIp(EtherCard::myip, dhcpPtr->yiaddr);
    // Scan through variable length option list identifying options we want
    byte *ptr = (byte*) (dhcpPtr + 1) + 4;
    do {
     e3c:	e0 17       	cp	r30, r16
     e3e:	f1 07       	cpc	r31, r17
     e40:	08 f4       	brcc	.+2      	; 0xe44 <_ZN9EtherCard16DhcpStateMachineEj+0x1d0>
     e42:	a5 cf       	rjmp	.-182    	; 0xd8e <_ZN9EtherCard16DhcpStateMachineEj+0x11a>
			break;
			
		case DHCP_STATE_SELECTING: 
			if (dhcp_received_message_type(len, DHCP_OFFER)) {
				process_dhcp_offer(len);
				send_dhcp_message();
     e44:	0e 94 4d 05 	call	0xa9a	; 0xa9a <_ZL17send_dhcp_messagev>
				dhcpState = DHCP_STATE_REQUESTING;
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	65 cf       	rjmp	.-310    	; 0xd16 <_ZN9EtherCard16DhcpStateMachineEj+0xa2>

static bool dhcp_received_message_type (word len, byte msgType) {
    // Map struct onto payload
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);
	
	if (len >= 70 && gPB[UDP_SRC_PORT_L_P] == DHCP_SRC_PORT &&
     e4c:	c6 34       	cpi	r28, 0x46	; 70
     e4e:	d1 05       	cpc	r29, r1
     e50:	28 f1       	brcs	.+74     	; 0xe9c <_ZN9EtherCard16DhcpStateMachineEj+0x228>
     e52:	80 91 6a 03 	lds	r24, 0x036A
     e56:	83 34       	cpi	r24, 0x43	; 67
     e58:	09 f5       	brne	.+66     	; 0xe9c <_ZN9EtherCard16DhcpStateMachineEj+0x228>
     e5a:	80 91 71 03 	lds	r24, 0x0371
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	e9 f4       	brne	.+58     	; 0xe9c <_ZN9EtherCard16DhcpStateMachineEj+0x228>
     e62:	20 91 75 03 	lds	r18, 0x0375
     e66:	30 91 76 03 	lds	r19, 0x0376
     e6a:	40 91 77 03 	lds	r20, 0x0377
     e6e:	50 91 78 03 	lds	r21, 0x0378
     e72:	80 91 a9 02 	lds	r24, 0x02A9
     e76:	90 91 aa 02 	lds	r25, 0x02AA
     e7a:	a0 91 ab 02 	lds	r26, 0x02AB
     e7e:	b0 91 ac 02 	lds	r27, 0x02AC
     e82:	28 17       	cp	r18, r24
     e84:	39 07       	cpc	r19, r25
     e86:	4a 07       	cpc	r20, r26
     e88:	5b 07       	cpc	r21, r27
     e8a:	41 f4       	brne	.+16     	; 0xe9c <_ZN9EtherCard16DhcpStateMachineEj+0x228>
            dhcpPtr->op == DHCP_BOOTRESPONSE && dhcpPtr->xid == currentXid ) {
	
		int optionIndex = UDP_DATA_P + sizeof( DHCPdata ) + 4;
		return gPB[optionIndex] == 53 ? gPB[optionIndex+2] == msgType : false;
     e8c:	80 91 61 04 	lds	r24, 0x0461
     e90:	85 33       	cpi	r24, 0x35	; 53
     e92:	21 f4       	brne	.+8      	; 0xe9c <_ZN9EtherCard16DhcpStateMachineEj+0x228>
     e94:	80 91 63 04 	lds	r24, 0x0463
     e98:	85 30       	cpi	r24, 0x05	; 5
     e9a:	59 f1       	breq	.+86     	; 0xef2 <_ZN9EtherCard16DhcpStateMachineEj+0x27e>
				disableBroadcast();
				leaseStart = millis();
				if (gwip[0] != 0) setGwIp(gwip); // why is this? because it initiates an arp request
				dhcpState = DHCP_STATE_BOUND;
			} else { 
				if (millis() > stateTimer + DHCP_REQUEST_TIMEOUT) {
     e9c:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <millis>
     ea0:	20 91 a5 02 	lds	r18, 0x02A5
     ea4:	30 91 a6 02 	lds	r19, 0x02A6
     ea8:	40 91 a7 02 	lds	r20, 0x02A7
     eac:	50 91 a8 02 	lds	r21, 0x02A8
     eb0:	20 5f       	subi	r18, 0xF0	; 240
     eb2:	38 4d       	sbci	r19, 0xD8	; 216
     eb4:	4f 4f       	sbci	r20, 0xFF	; 255
     eb6:	5f 4f       	sbci	r21, 0xFF	; 255
     eb8:	26 17       	cp	r18, r22
     eba:	37 07       	cpc	r19, r23
     ebc:	48 07       	cpc	r20, r24
     ebe:	59 07       	cpc	r21, r25
     ec0:	48 f0       	brcs	.+18     	; 0xed4 <_ZN9EtherCard16DhcpStateMachineEj+0x260>
     ec2:	28 c0       	rjmp	.+80     	; 0xf14 <_ZN9EtherCard16DhcpStateMachineEj+0x2a0>
		case DHCP_STATE_REQUESTING:
		case DHCP_STATE_RENEWING:
			if (dhcp_received_message_type(len, DHCP_ACK)) {
				disableBroadcast();
				leaseStart = millis();
				if (gwip[0] != 0) setGwIp(gwip); // why is this? because it initiates an arp request
     ec4:	8a e8       	ldi	r24, 0x8A	; 138
     ec6:	92 e0       	ldi	r25, 0x02	; 2
     ec8:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_ZN9EtherCard7setGwIpEPKh>
				dhcpState = DHCP_STATE_BOUND;
     ecc:	83 e0       	ldi	r24, 0x03	; 3
     ece:	80 93 9c 02 	sts	0x029C, r24
     ed2:	20 c0       	rjmp	.+64     	; 0xf14 <_ZN9EtherCard16DhcpStateMachineEj+0x2a0>
			} else { 
				if (millis() > stateTimer + DHCP_REQUEST_TIMEOUT) {
					dhcpState = DHCP_STATE_INIT;
     ed4:	10 92 9c 02 	sts	0x029C, r1
     ed8:	1d c0       	rjmp	.+58     	; 0xf14 <_ZN9EtherCard16DhcpStateMachineEj+0x2a0>

static void process_dhcp_offer (word len) {
    // Map struct onto payload
    DHCPdata *dhcpPtr = (DHCPdata*) (gPB + UDP_DATA_P);
    // Offered IP address is in yiaddr
    EtherCard::copyIp(EtherCard::myip, dhcpPtr->yiaddr);
     eda:	82 e8       	ldi	r24, 0x82	; 130
     edc:	92 e0       	ldi	r25, 0x02	; 2
     ede:	61 e8       	ldi	r22, 0x81	; 129
     ee0:	73 e0       	ldi	r23, 0x03	; 3
     ee2:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN9EtherCard6copyIpEPhPKh>
    // Scan through variable length option list identifying options we want
    byte *ptr = (byte*) (dhcpPtr + 1) + 4;
     ee6:	e1 e6       	ldi	r30, 0x61	; 97
     ee8:	f4 e0       	ldi	r31, 0x04	; 4
    do {
     eea:	8e 01       	movw	r16, r28
     eec:	09 5b       	subi	r16, 0xB9	; 185
     eee:	1c 4f       	sbci	r17, 0xFC	; 252
     ef0:	4e cf       	rjmp	.-356    	; 0xd8e <_ZN9EtherCard16DhcpStateMachineEj+0x11a>
			break;
			
		case DHCP_STATE_REQUESTING:
		case DHCP_STATE_RENEWING:
			if (dhcp_received_message_type(len, DHCP_ACK)) {
				disableBroadcast();
     ef2:	0e 94 28 09 	call	0x1250	; 0x1250 <_ZN8ENC28J6016disableBroadcastEv>
				leaseStart = millis();
     ef6:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <millis>
     efa:	60 93 9d 02 	sts	0x029D, r22
     efe:	70 93 9e 02 	sts	0x029E, r23
     f02:	80 93 9f 02 	sts	0x029F, r24
     f06:	90 93 a0 02 	sts	0x02A0, r25
				if (gwip[0] != 0) setGwIp(gwip); // why is this? because it initiates an arp request
     f0a:	80 91 8a 02 	lds	r24, 0x028A
     f0e:	88 23       	and	r24, r24
     f10:	e9 f2       	breq	.-70     	; 0xecc <_ZN9EtherCard16DhcpStateMachineEj+0x258>
     f12:	d8 cf       	rjmp	.-80     	; 0xec4 <_ZN9EtherCard16DhcpStateMachineEj+0x250>
				}
			}
			break;		

	}
}
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	1f 91       	pop	r17
     f1a:	0f 91       	pop	r16
     f1c:	ff 90       	pop	r15
     f1e:	ef 90       	pop	r14
     f20:	08 95       	ret

00000f22 <_ZN9EtherCard9dhcpSetupEv>:
		return false;
	}
}


bool EtherCard::dhcpSetup () {
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
	// Use during setup, as this discards all incoming requests until it returns.
	// That shouldn't be a problem, because we don't have an IP-address yet.
	// Will try 60 secs to obtain DHCP-lease.

    using_dhcp = true;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	80 93 9a 02 	sts	0x029A, r24

	// Set a unique hostname, use Arduino-?? with last octet of mac address
	 hostname[8] = '0' + (mymac[5] >> 4);
     f2c:	90 91 81 02 	lds	r25, 0x0281
     f30:	89 2f       	mov	r24, r25
     f32:	82 95       	swap	r24
     f34:	8f 70       	andi	r24, 0x0F	; 15
     f36:	80 5d       	subi	r24, 0xD0	; 208
     f38:	80 93 9c 01 	sts	0x019C, r24
	 hostname[9] = '0' + (mymac[5] & 0x0F);
     f3c:	9f 70       	andi	r25, 0x0F	; 15
     f3e:	90 5d       	subi	r25, 0xD0	; 208
     f40:	90 93 9d 01 	sts	0x019D, r25

	 dhcpState = DHCP_STATE_INIT;
     f44:	10 92 9c 02 	sts	0x029C, r1
	 word start = millis();	
     f48:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <millis>
     f4c:	eb 01       	movw	r28, r22
     f4e:	04 c0       	rjmp	.+8      	; 0xf58 <_ZN9EtherCard9dhcpSetupEv+0x36>

	 while (dhcpState != DHCP_STATE_BOUND && (word) (millis() - start) < 60000) {
	  if (isLinkUp()) DhcpStateMachine(packetReceive());
     f50:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_ZN8ENC28J6013packetReceiveEv>
     f54:	0e 94 3a 06 	call	0xc74	; 0xc74 <_ZN9EtherCard16DhcpStateMachineEj>
	 hostname[9] = '0' + (mymac[5] & 0x0F);

	 dhcpState = DHCP_STATE_INIT;
	 word start = millis();	

	 while (dhcpState != DHCP_STATE_BOUND && (word) (millis() - start) < 60000) {
     f58:	80 91 9c 02 	lds	r24, 0x029C
     f5c:	83 30       	cpi	r24, 0x03	; 3
     f5e:	61 f0       	breq	.+24     	; 0xf78 <_ZN9EtherCard9dhcpSetupEv+0x56>
     f60:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <millis>
     f64:	6c 1b       	sub	r22, r28
     f66:	7d 0b       	sbc	r23, r29
     f68:	60 56       	subi	r22, 0x60	; 96
     f6a:	7a 4e       	sbci	r23, 0xEA	; 234
     f6c:	28 f4       	brcc	.+10     	; 0xf78 <_ZN9EtherCard9dhcpSetupEv+0x56>
	  if (isLinkUp()) DhcpStateMachine(packetReceive());
     f6e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_ZN8ENC28J608isLinkUpEv>
     f72:	88 23       	and	r24, r24
     f74:	89 f3       	breq	.-30     	; 0xf58 <_ZN9EtherCard9dhcpSetupEv+0x36>
     f76:	ec cf       	rjmp	.-40     	; 0xf50 <_ZN9EtherCard9dhcpSetupEv+0x2e>
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	80 91 9c 02 	lds	r24, 0x029C
     f7e:	83 30       	cpi	r24, 0x03	; 3
     f80:	09 f4       	brne	.+2      	; 0xf84 <_ZN9EtherCard9dhcpSetupEv+0x62>
     f82:	91 e0       	ldi	r25, 0x01	; 1
    }
    return dhcpState == DHCP_STATE_BOUND ;
}
     f84:	89 2f       	mov	r24, r25
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	08 95       	ret

00000f8c <_ZN9EtherCard9dnsLookupEPcb>:
    p += p[9] + 10;
  }
}

// use during setup, as this discards all incoming requests until it returns
bool EtherCard::dnsLookup (prog_char* name, bool fromRam) {
     f8c:	ff 92       	push	r15
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	18 2f       	mov	r17, r24
     f98:	09 2f       	mov	r16, r25
     f9a:	f6 2e       	mov	r15, r22
  word start = millis();
     f9c:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <millis>
     fa0:	eb 01       	movw	r28, r22
  while (!isLinkUp() || clientWaitingGw()) {
     fa2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_ZN8ENC28J608isLinkUpEv>
     fa6:	88 23       	and	r24, r24
     fa8:	29 f0       	breq	.+10     	; 0xfb4 <_ZN9EtherCard9dnsLookupEPcb+0x28>
     faa:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN9EtherCard15clientWaitingGwEv>
     fae:	88 23       	and	r24, r24
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <_ZN9EtherCard9dnsLookupEPcb+0x28>
     fb2:	db c0       	rjmp	.+438    	; 0x116a <_ZN9EtherCard9dnsLookupEPcb+0x1de>
    packetLoop(packetReceive());
     fb4:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_ZN8ENC28J6013packetReceiveEv>
     fb8:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_ZN9EtherCard10packetLoopEj>
    if ((word) (millis() - start) >= 30000)
     fbc:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <millis>
     fc0:	6c 1b       	sub	r22, r28
     fc2:	7d 0b       	sbc	r23, r29
     fc4:	60 53       	subi	r22, 0x30	; 48
     fc6:	75 47       	sbci	r23, 0x75	; 117
     fc8:	60 f3       	brcs	.-40     	; 0xfa2 <_ZN9EtherCard9dnsLookupEPcb+0x16>
     fca:	c8 c0       	rjmp	.+400    	; 0x115c <_ZN9EtherCard9dnsLookupEPcb+0x1d0>
#define DNSCLIENT_SRC_PORT_H 0xE0 

static void dnsRequest (const prog_char *progmem_hostname, bool fromRam) {
  ++dnstid_l; // increment for next request, finally wrap
  if (ether.dnsip[0] == 0)
    memset(ether.dnsip, 8, 4); // use 8.8.8.8 Google DNS as default
     fcc:	88 e0       	ldi	r24, 0x08	; 8
     fce:	98 e0       	ldi	r25, 0x08	; 8
     fd0:	a8 e0       	ldi	r26, 0x08	; 8
     fd2:	b8 e0       	ldi	r27, 0x08	; 8
     fd4:	80 93 92 02 	sts	0x0292, r24
     fd8:	90 93 93 02 	sts	0x0293, r25
     fdc:	a0 93 94 02 	sts	0x0294, r26
     fe0:	b0 93 95 02 	sts	0x0295, r27
  ether.udpPrepare((DNSCLIENT_SRC_PORT_H << 8) | dnstid_l,
                                                ether.dnsip, 53);
     fe4:	80 91 af 02 	lds	r24, 0x02AF
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	90 6e       	ori	r25, 0xE0	; 224
     fec:	62 e9       	ldi	r22, 0x92	; 146
     fee:	72 e0       	ldi	r23, 0x02	; 2
     ff0:	45 e3       	ldi	r20, 0x35	; 53
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_ZN9EtherCard10udpPrepareEjPhj>
  memset(gPB + UDP_DATA_P, 0, 12);
     ff8:	a1 e7       	ldi	r26, 0x71	; 113
     ffa:	b3 e0       	ldi	r27, 0x03	; 3
     ffc:	8c e0       	ldi	r24, 0x0C	; 12
     ffe:	fd 01       	movw	r30, r26
    1000:	11 92       	st	Z+, r1
    1002:	8a 95       	dec	r24
    1004:	e9 f7       	brne	.-6      	; 0x1000 <_ZN9EtherCard9dnsLookupEPcb+0x74>
    1006:	81 2f       	mov	r24, r17
    1008:	90 2f       	mov	r25, r16
    100a:	fc 01       	movw	r30, r24
    100c:	cf 01       	movw	r24, r30
    100e:	1c 96       	adiw	r26, 0x0c	; 12
    1010:	30 e0       	ldi	r19, 0x00	; 0
  byte *p = gPB + UDP_DATA_P + 12;
  char c;
  do {
    byte n = 0;
    for(;;) {
      c = fromRam ? *progmem_hostname : pgm_read_byte(progmem_hostname);
    1012:	ff 20       	and	r15, r15
    1014:	19 f0       	breq	.+6      	; 0x101c <_ZN9EtherCard9dnsLookupEPcb+0x90>
    1016:	fc 01       	movw	r30, r24
    1018:	20 81       	ld	r18, Z
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <_ZN9EtherCard9dnsLookupEPcb+0x94>
    101c:	fc 01       	movw	r30, r24
    101e:	24 91       	lpm	r18, Z+
      ++progmem_hostname;
    1020:	01 96       	adiw	r24, 0x01	; 1
      if (c == '.' || c == 0)
    1022:	2e 32       	cpi	r18, 0x2E	; 46
    1024:	41 f0       	breq	.+16     	; 0x1036 <_ZN9EtherCard9dnsLookupEPcb+0xaa>
    1026:	22 23       	and	r18, r18
    1028:	31 f0       	breq	.+12     	; 0x1036 <_ZN9EtherCard9dnsLookupEPcb+0xaa>
        break;
      p[++n] = c;
    102a:	3f 5f       	subi	r19, 0xFF	; 255
    102c:	fd 01       	movw	r30, r26
    102e:	e3 0f       	add	r30, r19
    1030:	f1 1d       	adc	r31, r1
    1032:	20 83       	st	Z, r18
    1034:	ee cf       	rjmp	.-36     	; 0x1012 <_ZN9EtherCard9dnsLookupEPcb+0x86>
    }
    *p++ = n;
    1036:	fd 01       	movw	r30, r26
    1038:	31 93       	st	Z+, r19
    p += n;
    103a:	df 01       	movw	r26, r30
    103c:	a3 0f       	add	r26, r19
    103e:	b1 1d       	adc	r27, r1
                                                ether.dnsip, 53);
  memset(gPB + UDP_DATA_P, 0, 12);
  
  byte *p = gPB + UDP_DATA_P + 12;
  char c;
  do {
    1040:	22 23       	and	r18, r18
    1042:	31 f7       	brne	.-52     	; 0x1010 <_ZN9EtherCard9dnsLookupEPcb+0x84>
    }
    *p++ = n;
    p += n;
  } while (c != 0);
  
  *p++ = 0; // terminate with zero, means root domain.
    1044:	fd 01       	movw	r30, r26
    1046:	11 92       	st	Z+, r1
  *p++ = 0;
    1048:	11 96       	adiw	r26, 0x01	; 1
    104a:	1c 92       	st	X, r1
    104c:	df 01       	movw	r26, r30
    104e:	11 96       	adiw	r26, 0x01	; 1
  *p++ = 1; // type A
    1050:	41 e0       	ldi	r20, 0x01	; 1
    1052:	41 83       	std	Z+1, r20	; 0x01
    1054:	fd 01       	movw	r30, r26
    1056:	31 96       	adiw	r30, 0x01	; 1
  *p++ = 0; 
    1058:	11 96       	adiw	r26, 0x01	; 1
    105a:	1c 92       	st	X, r1
  *p++ = 1; // class IN
    105c:	41 83       	std	Z+1, r20	; 0x01
  byte i = p - gPB - UDP_DATA_P;
    105e:	86 ed       	ldi	r24, 0xD6	; 214
    1060:	27 e4       	ldi	r18, 0x47	; 71
    1062:	33 e0       	ldi	r19, 0x03	; 3
    1064:	82 1b       	sub	r24, r18
    1066:	32 96       	adiw	r30, 0x02	; 2
    1068:	8e 0f       	add	r24, r30
  gPB[UDP_DATA_P] = i;
    106a:	80 93 71 03 	sts	0x0371, r24
  gPB[UDP_DATA_P+1] = dnstid_l;
    106e:	90 91 af 02 	lds	r25, 0x02AF
    1072:	90 93 72 03 	sts	0x0372, r25
  gPB[UDP_DATA_P+2] = 1; // flags, standard recursive query
    1076:	40 93 73 03 	sts	0x0373, r20
  gPB[UDP_DATA_P+5] = 1; // 1 question
    107a:	40 93 76 03 	sts	0x0376, r20
  ether.udpTransmit(i);
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <_ZN9EtherCard11udpTransmitEj>
  }
    
  memset(hisip, 0, 4);
  dnsRequest(name, fromRam);

  start = millis();
    1084:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <millis>
    1088:	8b 01       	movw	r16, r22
    108a:	61 c0       	rjmp	.+194    	; 0x114e <_ZN9EtherCard9dnsLookupEPcb+0x1c2>
  while (hisip[0] == 0) {
    if ((word) (millis() - start) >= 30000)
    108c:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <millis>
    1090:	60 1b       	sub	r22, r16
    1092:	71 0b       	sbc	r23, r17
    1094:	60 53       	subi	r22, 0x30	; 48
    1096:	75 47       	sbci	r23, 0x75	; 117
    1098:	08 f0       	brcs	.+2      	; 0x109c <_ZN9EtherCard9dnsLookupEPcb+0x110>
    109a:	60 c0       	rjmp	.+192    	; 0x115c <_ZN9EtherCard9dnsLookupEPcb+0x1d0>
      return false;
    word len = packetReceive();
    109c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_ZN8ENC28J6013packetReceiveEv>
    10a0:	ec 01       	movw	r28, r24
    if (len > 0 && packetLoop(len) == 0)
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <_ZN9EtherCard9dnsLookupEPcb+0x11c>
    10a6:	53 c0       	rjmp	.+166    	; 0x114e <_ZN9EtherCard9dnsLookupEPcb+0x1c2>
    10a8:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_ZN9EtherCard10packetLoopEj>
    10ac:	89 2b       	or	r24, r25
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <_ZN9EtherCard9dnsLookupEPcb+0x126>
    10b0:	4e c0       	rjmp	.+156    	; 0x114e <_ZN9EtherCard9dnsLookupEPcb+0x1c2>
  ether.udpTransmit(i);
}

static void checkForDnsAnswer (uint16_t plen) {
  byte *p = gPB + UDP_DATA_P;
  if (plen < 70 || gPB[UDP_SRC_PORT_L_P] != 53 ||
    10b2:	c6 34       	cpi	r28, 0x46	; 70
    10b4:	d1 05       	cpc	r29, r1
    10b6:	08 f4       	brcc	.+2      	; 0x10ba <_ZN9EtherCard9dnsLookupEPcb+0x12e>
    10b8:	4a c0       	rjmp	.+148    	; 0x114e <_ZN9EtherCard9dnsLookupEPcb+0x1c2>
    10ba:	80 91 6a 03 	lds	r24, 0x036A
    10be:	85 33       	cpi	r24, 0x35	; 53
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <_ZN9EtherCard9dnsLookupEPcb+0x138>
    10c2:	45 c0       	rjmp	.+138    	; 0x114e <_ZN9EtherCard9dnsLookupEPcb+0x1c2>
    10c4:	80 91 6b 03 	lds	r24, 0x036B
    10c8:	80 3e       	cpi	r24, 0xE0	; 224
    10ca:	09 f0       	breq	.+2      	; 0x10ce <_ZN9EtherCard9dnsLookupEPcb+0x142>
    10cc:	40 c0       	rjmp	.+128    	; 0x114e <_ZN9EtherCard9dnsLookupEPcb+0x1c2>
    10ce:	90 91 6c 03 	lds	r25, 0x036C
    10d2:	80 91 af 02 	lds	r24, 0x02AF
    10d6:	98 17       	cp	r25, r24
    10d8:	d1 f5       	brne	.+116    	; 0x114e <_ZN9EtherCard9dnsLookupEPcb+0x1c2>
    10da:	80 91 72 03 	lds	r24, 0x0372
    10de:	89 17       	cp	r24, r25
    10e0:	b1 f5       	brne	.+108    	; 0x114e <_ZN9EtherCard9dnsLookupEPcb+0x1c2>
    10e2:	80 91 74 03 	lds	r24, 0x0374
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	8f 70       	andi	r24, 0x0F	; 15
    10ea:	90 70       	andi	r25, 0x00	; 0
    10ec:	89 2b       	or	r24, r25
    10ee:	79 f5       	brne	.+94     	; 0x114e <_ZN9EtherCard9dnsLookupEPcb+0x1c2>
                   gPB[UDP_DST_PORT_L_P] != dnstid_l ||
                   p[1] != dnstid_l ||
                   (p[3] & 0x0F) != 0) 
    return;

  p += *p; // we encoded the query len into tid
    10f0:	80 91 71 03 	lds	r24, 0x0371
    10f4:	e8 2f       	mov	r30, r24
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	ef 58       	subi	r30, 0x8F	; 143
    10fa:	fc 4f       	sbci	r31, 0xFC	; 252
  for (;;) {
    if (*p & 0xC0)
      p += 2;
    else
      while (++p < gPB + plen) {
    10fc:	9e 01       	movw	r18, r28
    10fe:	29 5b       	subi	r18, 0xB9	; 185
    1100:	3c 4f       	sbci	r19, 0xFC	; 252
                   (p[3] & 0x0F) != 0) 
    return;

  p += *p; // we encoded the query len into tid
  for (;;) {
    if (*p & 0xC0)
    1102:	80 81       	ld	r24, Z
    1104:	80 7c       	andi	r24, 0xC0	; 192
    1106:	39 f0       	breq	.+14     	; 0x1116 <_ZN9EtherCard9dnsLookupEPcb+0x18a>
      p += 2;
    1108:	32 96       	adiw	r30, 0x02	; 2
    110a:	09 c0       	rjmp	.+18     	; 0x111e <_ZN9EtherCard9dnsLookupEPcb+0x192>
    else
      while (++p < gPB + plen) {
        if (*p == 0) {
    110c:	80 81       	ld	r24, Z
    110e:	88 23       	and	r24, r24
    1110:	11 f4       	brne	.+4      	; 0x1116 <_ZN9EtherCard9dnsLookupEPcb+0x18a>
          ++p;
    1112:	31 96       	adiw	r30, 0x01	; 1
    1114:	04 c0       	rjmp	.+8      	; 0x111e <_ZN9EtherCard9dnsLookupEPcb+0x192>
  p += *p; // we encoded the query len into tid
  for (;;) {
    if (*p & 0xC0)
      p += 2;
    else
      while (++p < gPB + plen) {
    1116:	31 96       	adiw	r30, 0x01	; 1
    1118:	e2 17       	cp	r30, r18
    111a:	f3 07       	cpc	r31, r19
    111c:	b8 f3       	brcs	.-18     	; 0x110c <_ZN9EtherCard9dnsLookupEPcb+0x180>
        if (*p == 0) {
          ++p;
          break;
        }
      }
    if (p + 14 > gPB + plen)
    111e:	cf 01       	movw	r24, r30
    1120:	0e 96       	adiw	r24, 0x0e	; 14
    1122:	28 17       	cp	r18, r24
    1124:	39 07       	cpc	r19, r25
    1126:	98 f0       	brcs	.+38     	; 0x114e <_ZN9EtherCard9dnsLookupEPcb+0x1c2>
      break;
    if (p[1] == 1 && p[9] == 4) { // type "A" and IPv4
    1128:	81 81       	ldd	r24, Z+1	; 0x01
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	51 f4       	brne	.+20     	; 0x1142 <_ZN9EtherCard9dnsLookupEPcb+0x1b6>
    112e:	81 85       	ldd	r24, Z+9	; 0x09
    1130:	84 30       	cpi	r24, 0x04	; 4
    1132:	39 f4       	brne	.+14     	; 0x1142 <_ZN9EtherCard9dnsLookupEPcb+0x1b6>
      ether.copyIp(ether.hisip, p + 10);
    1134:	3a 96       	adiw	r30, 0x0a	; 10
    1136:	86 e9       	ldi	r24, 0x96	; 150
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	bf 01       	movw	r22, r30
    113c:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN9EtherCard6copyIpEPhPKh>
    1140:	06 c0       	rjmp	.+12     	; 0x114e <_ZN9EtherCard9dnsLookupEPcb+0x1c2>
      break;
    }
    p += p[9] + 10;
    1142:	81 85       	ldd	r24, Z+9	; 0x09
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0a 96       	adiw	r24, 0x0a	; 10
    1148:	e8 0f       	add	r30, r24
    114a:	f9 1f       	adc	r31, r25
    114c:	da cf       	rjmp	.-76     	; 0x1102 <_ZN9EtherCard9dnsLookupEPcb+0x176>
    
  memset(hisip, 0, 4);
  dnsRequest(name, fromRam);

  start = millis();
  while (hisip[0] == 0) {
    114e:	80 91 96 02 	lds	r24, 0x0296
    1152:	88 23       	and	r24, r24
    1154:	09 f4       	brne	.+2      	; 0x1158 <_ZN9EtherCard9dnsLookupEPcb+0x1cc>
    1156:	9a cf       	rjmp	.-204    	; 0x108c <_ZN9EtherCard9dnsLookupEPcb+0x100>
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	01 c0       	rjmp	.+2      	; 0x115e <_ZN9EtherCard9dnsLookupEPcb+0x1d2>
    115c:	80 e0       	ldi	r24, 0x00	; 0
    if (len > 0 && packetLoop(len) == 0)
      checkForDnsAnswer(len);
  }

  return true;
}
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	08 95       	ret
    packetLoop(packetReceive());
    if ((word) (millis() - start) >= 30000)
      return false;
  }
    
  memset(hisip, 0, 4);
    116a:	10 92 96 02 	sts	0x0296, r1
    116e:	10 92 97 02 	sts	0x0297, r1
    1172:	10 92 98 02 	sts	0x0298, r1
    1176:	10 92 99 02 	sts	0x0299, r1

static byte dnstid_l; // a counter for transaction ID
#define DNSCLIENT_SRC_PORT_H 0xE0 

static void dnsRequest (const prog_char *progmem_hostname, bool fromRam) {
  ++dnstid_l; // increment for next request, finally wrap
    117a:	80 91 af 02 	lds	r24, 0x02AF
    117e:	8f 5f       	subi	r24, 0xFF	; 255
    1180:	80 93 af 02 	sts	0x02AF, r24
  if (ether.dnsip[0] == 0)
    1184:	80 91 92 02 	lds	r24, 0x0292
    1188:	88 23       	and	r24, r24
    118a:	09 f0       	breq	.+2      	; 0x118e <_ZN9EtherCard9dnsLookupEPcb+0x202>
    118c:	2b cf       	rjmp	.-426    	; 0xfe4 <_ZN9EtherCard9dnsLookupEPcb+0x58>
    118e:	1e cf       	rjmp	.-452    	; 0xfcc <_ZN9EtherCard9dnsLookupEPcb+0x40>

00001190 <_ZL11disableChipv>:
    cli();
    digitalWrite(selectPin, LOW);
}

static void disableChip () {
    digitalWrite(selectPin, HIGH);
    1190:	80 91 b2 02 	lds	r24, 0x02B2
    1194:	61 e0       	ldi	r22, 0x01	; 1
    1196:	0e 94 65 1a 	call	0x34ca	; 0x34ca <digitalWrite>
    sei();
    119a:	78 94       	sei
}
    119c:	08 95       	ret

0000119e <_ZL7writeOphhh>:
    byte result = SPDR;
    disableChip();
    return result;
}

static void writeOp (byte op, byte address, byte data) {
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	08 2f       	mov	r16, r24
    11a6:	16 2f       	mov	r17, r22
    11a8:	f4 2e       	mov	r15, r20
    SPCR = bit(SPE) | bit(MSTR); // 8 MHz @ 16
    bitSet(SPSR, SPI2X);
}

static void enableChip () {
    cli();
    11aa:	f8 94       	cli
    digitalWrite(selectPin, LOW);
    11ac:	80 91 b2 02 	lds	r24, 0x02B2
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	0e 94 65 1a 	call	0x34ca	; 0x34ca <digitalWrite>
    return result;
}

static void writeOp (byte op, byte address, byte data) {
    enableChip();
    xferSPI(op | (address & ADDR_MASK));
    11b6:	1f 71       	andi	r17, 0x1F	; 31
    11b8:	10 2b       	or	r17, r16
    digitalWrite(selectPin, HIGH);
    sei();
}

static void xferSPI (byte data) {
    SPDR = data;
    11ba:	1e bd       	out	0x2e, r17	; 46
    while (!(SPSR&(1<<SPIF)))
    11bc:	0d b4       	in	r0, 0x2d	; 45
    11be:	07 fe       	sbrs	r0, 7
    11c0:	fd cf       	rjmp	.-6      	; 0x11bc <_ZL7writeOphhh+0x1e>
    digitalWrite(selectPin, HIGH);
    sei();
}

static void xferSPI (byte data) {
    SPDR = data;
    11c2:	fe bc       	out	0x2e, r15	; 46
    while (!(SPSR&(1<<SPIF)))
    11c4:	0d b4       	in	r0, 0x2d	; 45
    11c6:	07 fe       	sbrs	r0, 7
    11c8:	fd cf       	rjmp	.-6      	; 0x11c4 <_ZL7writeOphhh+0x26>

static void writeOp (byte op, byte address, byte data) {
    enableChip();
    xferSPI(op | (address & ADDR_MASK));
    xferSPI(data);
    disableChip();
    11ca:	0e 94 c8 08 	call	0x1190	; 0x1190 <_ZL11disableChipv>
}
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	ff 90       	pop	r15
    11d4:	08 95       	ret

000011d6 <_ZL7SetBankh>:
    while (len--)
        xferSPI(*data++);
    disableChip();
}

static void SetBank (byte address) {
    11d6:	1f 93       	push	r17
    11d8:	18 2f       	mov	r17, r24
    if ((address & BANK_MASK) != Enc28j60Bank) {
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	20 76       	andi	r18, 0x60	; 96
    11e0:	30 70       	andi	r19, 0x00	; 0
    11e2:	80 91 b3 02 	lds	r24, 0x02B3
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	28 17       	cp	r18, r24
    11ea:	39 07       	cpc	r19, r25
    11ec:	99 f0       	breq	.+38     	; 0x1214 <_ZL7SetBankh+0x3e>
        writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
    11ee:	80 ea       	ldi	r24, 0xA0	; 160
    11f0:	6f e1       	ldi	r22, 0x1F	; 31
    11f2:	43 e0       	ldi	r20, 0x03	; 3
    11f4:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZL7writeOphhh>
        Enc28j60Bank = address & BANK_MASK;
    11f8:	41 2f       	mov	r20, r17
    11fa:	40 76       	andi	r20, 0x60	; 96
    11fc:	40 93 b3 02 	sts	0x02B3, r20
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	85 e0       	ldi	r24, 0x05	; 5
    1204:	55 95       	asr	r21
    1206:	47 95       	ror	r20
    1208:	8a 95       	dec	r24
    120a:	e1 f7       	brne	.-8      	; 0x1204 <_ZL7SetBankh+0x2e>
    120c:	80 e8       	ldi	r24, 0x80	; 128
    120e:	6f e1       	ldi	r22, 0x1F	; 31
    1210:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZL7writeOphhh>
    }
}
    1214:	1f 91       	pop	r17
    1216:	08 95       	ret

00001218 <_ZL12writeRegBytehh>:

static word readReg(byte address) {
	return readRegByte(address) + (readRegByte(address+1) << 8);
}

static void writeRegByte (byte address, byte data) {
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	18 2f       	mov	r17, r24
    121e:	06 2f       	mov	r16, r22
    SetBank(address);
    1220:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <_ZL7SetBankh>
    writeOp(ENC28J60_WRITE_CTRL_REG, address, data);
    1224:	80 e4       	ldi	r24, 0x40	; 64
    1226:	61 2f       	mov	r22, r17
    1228:	40 2f       	mov	r20, r16
    122a:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZL7writeOphhh>
}
    122e:	1f 91       	pop	r17
    1230:	0f 91       	pop	r16
    1232:	08 95       	ret

00001234 <_ZL8writeReghj>:

static void writeReg(byte address, word data) {
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	18 2f       	mov	r17, r24
    123a:	07 2f       	mov	r16, r23
    writeRegByte(address, data);
    123c:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZL12writeRegBytehh>
    writeRegByte(address + 1, data >> 8);
    1240:	81 2f       	mov	r24, r17
    1242:	8f 5f       	subi	r24, 0xFF	; 255
    1244:	60 2f       	mov	r22, r16
    1246:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZL12writeRegBytehh>
}
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	08 95       	ret

00001250 <_ZN8ENC28J6016disableBroadcastEv>:
void ENC28J60::enableBroadcast () {
    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
}

void ENC28J60::disableBroadcast () {
    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
    1250:	88 e3       	ldi	r24, 0x38	; 56
    1252:	60 eb       	ldi	r22, 0xB0	; 176
    1254:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZL12writeRegBytehh>
}
    1258:	08 95       	ret

0000125a <_ZN8ENC28J6015enableBroadcastEv>:
}

// Functions to enable/disable broadcast filter bits
// With the bit set, broadcast packets are filtered.
void ENC28J60::enableBroadcast () {
    writeRegByte(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
    125a:	88 e3       	ldi	r24, 0x38	; 56
    125c:	61 eb       	ldi	r22, 0xB1	; 177
    125e:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZL12writeRegBytehh>
}
    1262:	08 95       	ret

00001264 <_ZL6readOphh>:
    SPDR = data;
    while (!(SPSR&(1<<SPIF)))
        ;
}

static byte readOp (byte op, byte address) {
    1264:	0f 93       	push	r16
    1266:	1f 93       	push	r17
    1268:	18 2f       	mov	r17, r24
    126a:	06 2f       	mov	r16, r22
    SPCR = bit(SPE) | bit(MSTR); // 8 MHz @ 16
    bitSet(SPSR, SPI2X);
}

static void enableChip () {
    cli();
    126c:	f8 94       	cli
    digitalWrite(selectPin, LOW);
    126e:	80 91 b2 02 	lds	r24, 0x02B2
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	0e 94 65 1a 	call	0x34ca	; 0x34ca <digitalWrite>
        ;
}

static byte readOp (byte op, byte address) {
    enableChip();
    xferSPI(op | (address & ADDR_MASK));
    1278:	80 2f       	mov	r24, r16
    127a:	8f 71       	andi	r24, 0x1F	; 31
    127c:	81 2b       	or	r24, r17
    digitalWrite(selectPin, HIGH);
    sei();
}

static void xferSPI (byte data) {
    SPDR = data;
    127e:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR&(1<<SPIF)))
    1280:	0d b4       	in	r0, 0x2d	; 45
    1282:	07 fe       	sbrs	r0, 7
    1284:	fd cf       	rjmp	.-6      	; 0x1280 <_ZL6readOphh+0x1c>
    digitalWrite(selectPin, HIGH);
    sei();
}

static void xferSPI (byte data) {
    SPDR = data;
    1286:	1e bc       	out	0x2e, r1	; 46
    while (!(SPSR&(1<<SPIF)))
    1288:	0d b4       	in	r0, 0x2d	; 45
    128a:	07 fe       	sbrs	r0, 7
    128c:	fd cf       	rjmp	.-6      	; 0x1288 <_ZL6readOphh+0x24>

static byte readOp (byte op, byte address) {
    enableChip();
    xferSPI(op | (address & ADDR_MASK));
    xferSPI(0x00);
    if (address & 0x80)
    128e:	07 ff       	sbrs	r16, 7
    1290:	04 c0       	rjmp	.+8      	; 0x129a <_ZL6readOphh+0x36>
    digitalWrite(selectPin, HIGH);
    sei();
}

static void xferSPI (byte data) {
    SPDR = data;
    1292:	1e bc       	out	0x2e, r1	; 46
    while (!(SPSR&(1<<SPIF)))
    1294:	0d b4       	in	r0, 0x2d	; 45
    1296:	07 fe       	sbrs	r0, 7
    1298:	fd cf       	rjmp	.-6      	; 0x1294 <_ZL6readOphh+0x30>
    enableChip();
    xferSPI(op | (address & ADDR_MASK));
    xferSPI(0x00);
    if (address & 0x80)
        xferSPI(0x00);
    byte result = SPDR;
    129a:	1e b5       	in	r17, 0x2e	; 46
    disableChip();
    129c:	0e 94 c8 08 	call	0x1190	; 0x1190 <_ZL11disableChipv>
    return result;
}
    12a0:	81 2f       	mov	r24, r17
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	08 95       	ret

000012a8 <_ZL11readRegByteh>:
        Enc28j60Bank = address & BANK_MASK;
        writeOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
    }
}

static byte readRegByte (byte address) {
    12a8:	1f 93       	push	r17
    12aa:	18 2f       	mov	r17, r24
    SetBank(address);
    12ac:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <_ZL7SetBankh>
    return readOp(ENC28J60_READ_CTRL_REG, address);
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	61 2f       	mov	r22, r17
    12b4:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZL6readOphh>
}
    12b8:	1f 91       	pop	r17
    12ba:	08 95       	ret

000012bc <_ZN8ENC28J608isLinkUpEv>:
    writeRegByte(address, data);
    writeRegByte(address + 1, data >> 8);
}

static word readPhyByte (byte address) {
    writeRegByte(MIREGADR, address);
    12bc:	84 ed       	ldi	r24, 0xD4	; 212
    12be:	61 e1       	ldi	r22, 0x11	; 17
    12c0:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZL12writeRegBytehh>
    writeRegByte(MICMD, MICMD_MIIRD);
    12c4:	82 ed       	ldi	r24, 0xD2	; 210
    12c6:	61 e0       	ldi	r22, 0x01	; 1
    12c8:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZL12writeRegBytehh>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
    12cc:	8a ee       	ldi	r24, 0xEA	; 234
    12ce:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZL11readRegByteh>
    12d2:	80 fd       	sbrc	r24, 0
    12d4:	fb cf       	rjmp	.-10     	; 0x12cc <_ZN8ENC28J608isLinkUpEv+0x10>
        ;
    writeRegByte(MICMD, 0x00);
    12d6:	82 ed       	ldi	r24, 0xD2	; 210
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZL12writeRegBytehh>
    return readRegByte(MIRD+1);
    12de:	89 ed       	ldi	r24, 0xD9	; 217
    12e0:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZL11readRegByteh>
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	96 95       	lsr	r25
    12e8:	87 95       	ror	r24
    12ea:	96 95       	lsr	r25
    12ec:	87 95       	ror	r24
    return rev;
}

bool ENC28J60::isLinkUp() {
    return (readPhyByte(PHSTAT2) >> 2) & 1;
}
    12ee:	81 70       	andi	r24, 0x01	; 1
    12f0:	08 95       	ret

000012f2 <_ZL7readBufjPh>:
    xferSPI(op | (address & ADDR_MASK));
    xferSPI(data);
    disableChip();
}

static void readBuf(word len, byte* data) {
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	ec 01       	movw	r28, r24
    12fc:	8b 01       	movw	r16, r22
    SPCR = bit(SPE) | bit(MSTR); // 8 MHz @ 16
    bitSet(SPSR, SPI2X);
}

static void enableChip () {
    cli();
    12fe:	f8 94       	cli
    digitalWrite(selectPin, LOW);
    1300:	80 91 b2 02 	lds	r24, 0x02B2
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	0e 94 65 1a 	call	0x34ca	; 0x34ca <digitalWrite>
    digitalWrite(selectPin, HIGH);
    sei();
}

static void xferSPI (byte data) {
    SPDR = data;
    130a:	8a e3       	ldi	r24, 0x3A	; 58
    130c:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR&(1<<SPIF)))
    130e:	0d b4       	in	r0, 0x2d	; 45
    1310:	07 fe       	sbrs	r0, 7
    1312:	fd cf       	rjmp	.-6      	; 0x130e <_ZL7readBufjPh+0x1c>
    1314:	09 c0       	rjmp	.+18     	; 0x1328 <_ZL7readBufjPh+0x36>
    digitalWrite(selectPin, HIGH);
    sei();
}

static void xferSPI (byte data) {
    SPDR = data;
    1316:	1e bc       	out	0x2e, r1	; 46
    while (!(SPSR&(1<<SPIF)))
    1318:	0d b4       	in	r0, 0x2d	; 45
    131a:	07 fe       	sbrs	r0, 7
    131c:	fd cf       	rjmp	.-6      	; 0x1318 <_ZL7readBufjPh+0x26>
static void readBuf(word len, byte* data) {
    enableChip();
    xferSPI(ENC28J60_READ_BUF_MEM);
    while (len--) {
        xferSPI(0x00);
        *data++ = SPDR;
    131e:	8e b5       	in	r24, 0x2e	; 46
    1320:	f8 01       	movw	r30, r16
    1322:	81 93       	st	Z+, r24
    1324:	8f 01       	movw	r16, r30
    1326:	21 97       	sbiw	r28, 0x01	; 1
}

static void readBuf(word len, byte* data) {
    enableChip();
    xferSPI(ENC28J60_READ_BUF_MEM);
    while (len--) {
    1328:	20 97       	sbiw	r28, 0x00	; 0
    132a:	a9 f7       	brne	.-22     	; 0x1316 <_ZL7readBufjPh+0x24>
        xferSPI(0x00);
        *data++ = SPDR;
    }
    disableChip();
    132c:	0e 94 c8 08 	call	0x1190	; 0x1190 <_ZL11disableChipv>
}
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	08 95       	ret

0000133a <_ZN8ENC28J606peekinEhh>:
        return;
    writeReg(ERDPT, destPos);
    readBuf(SCRATCH_PAGE_SIZE, data);
}

byte ENC28J60::peekin (byte page, byte off) {
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	0f 92       	push	r0
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    byte result = 0;
    1344:	19 82       	std	Y+1, r1	; 0x01
    word destPos = SCRATCH_START + (page << SCRATCH_PAGE_SHIFT) + off;
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	36 e0       	ldi	r19, 0x06	; 6
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	3a 95       	dec	r19
    1350:	e1 f7       	brne	.-8      	; 0x134a <_ZN8ENC28J606peekinEhh+0x10>
    1352:	86 0f       	add	r24, r22
    1354:	91 1d       	adc	r25, r1
    1356:	bc 01       	movw	r22, r24
    1358:	60 50       	subi	r22, 0x00	; 0
    135a:	7e 4e       	sbci	r23, 0xEE	; 238
    if (SCRATCH_START <= destPos && destPos < SCRATCH_LIMIT) {
    135c:	80 50       	subi	r24, 0x00	; 0
    135e:	9e 40       	sbci	r25, 0x0E	; 14
    1360:	50 f4       	brcc	.+20     	; 0x1376 <_ZN8ENC28J606peekinEhh+0x3c>
        writeReg(ERDPT, destPos);
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZL8writeReghj>
        readBuf(1, &result);
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	be 01       	movw	r22, r28
    136e:	6f 5f       	subi	r22, 0xFF	; 255
    1370:	7f 4f       	sbci	r23, 0xFF	; 255
    1372:	0e 94 79 09 	call	0x12f2	; 0x12f2 <_ZL7readBufjPh>
    }
    return result;
}
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	0f 90       	pop	r0
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <_ZN8ENC28J606copyinEhPh>:
        return;
    writeReg(EWRPT, destPos);
    writeBuf(SCRATCH_PAGE_SIZE, data);
}

void ENC28J60::copyin (byte page, byte* data) {
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	eb 01       	movw	r28, r22
    word destPos = SCRATCH_START + (page << SCRATCH_PAGE_SHIFT);
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	46 e0       	ldi	r20, 0x06	; 6
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	4a 95       	dec	r20
    1390:	e1 f7       	brne	.-8      	; 0x138a <_ZN8ENC28J606copyinEhPh+0xa>
    1392:	bc 01       	movw	r22, r24
    1394:	60 50       	subi	r22, 0x00	; 0
    1396:	7e 4e       	sbci	r23, 0xEE	; 238
    if (destPos < SCRATCH_START || destPos > SCRATCH_LIMIT - SCRATCH_PAGE_SIZE)
    1398:	81 5c       	subi	r24, 0xC1	; 193
    139a:	9d 40       	sbci	r25, 0x0D	; 13
    139c:	40 f4       	brcc	.+16     	; 0x13ae <_ZN8ENC28J606copyinEhPh+0x2e>
        return;
    writeReg(ERDPT, destPos);
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZL8writeReghj>
    readBuf(SCRATCH_PAGE_SIZE, data);
    13a4:	80 e4       	ldi	r24, 0x40	; 64
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	be 01       	movw	r22, r28
    13aa:	0e 94 79 09 	call	0x12f2	; 0x12f2 <_ZL7readBufjPh>
}
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	08 95       	ret

000013b4 <_ZN8ENC28J6013packetReceiveEv>:
    writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
    writeBuf(len, buffer);
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
}

word ENC28J60::packetReceive() {
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	00 d0       	rcall	.+0      	; 0x13be <_ZN8ENC28J6013packetReceiveEv+0xa>
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <_ZN8ENC28J6013packetReceiveEv+0xc>
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <_ZN8ENC28J6013packetReceiveEv+0xe>
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    word len = 0;
    if (readRegByte(EPKTCNT) > 0) {
    13c6:	89 e3       	ldi	r24, 0x39	; 57
    13c8:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZL11readRegByteh>
    13cc:	88 23       	and	r24, r24
    13ce:	19 f4       	brne	.+6      	; 0x13d6 <_ZN8ENC28J6013packetReceiveEv+0x22>
    13d0:	00 e0       	ldi	r16, 0x00	; 0
    13d2:	10 e0       	ldi	r17, 0x00	; 0
    13d4:	48 c0       	rjmp	.+144    	; 0x1466 <_ZN8ENC28J6013packetReceiveEv+0xb2>
        writeReg(ERDPT, gNextPacketPtr);
    13d6:	60 91 b4 02 	lds	r22, 0x02B4
    13da:	70 91 b5 02 	lds	r23, 0x02B5
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZL8writeReghj>
            word nextPacket;
            word byteCount;
            word status;
        } header;
        
        readBuf(sizeof header, (byte*) &header);
    13e4:	86 e0       	ldi	r24, 0x06	; 6
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	be 01       	movw	r22, r28
    13ea:	6f 5f       	subi	r22, 0xFF	; 255
    13ec:	7f 4f       	sbci	r23, 0xFF	; 255
    13ee:	0e 94 79 09 	call	0x12f2	; 0x12f2 <_ZL7readBufjPh>

        gNextPacketPtr  = header.nextPacket;
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	9a 81       	ldd	r25, Y+2	; 0x02
    13f6:	90 93 b5 02 	sts	0x02B5, r25
    13fa:	80 93 b4 02 	sts	0x02B4, r24
        len = header.byteCount - 4; //remove the CRC count
    13fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1400:	3c 81       	ldd	r19, Y+4	; 0x04
        if (len>bufferSize-1)
    1402:	e0 91 b0 02 	lds	r30, 0x02B0
    1406:	f0 91 b1 02 	lds	r31, 0x02B1
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
    140a:	8d 81       	ldd	r24, Y+5	; 0x05
    140c:	87 fd       	sbrc	r24, 7
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <_ZN8ENC28J6013packetReceiveEv+0x62>
    1410:	00 e0       	ldi	r16, 0x00	; 0
    1412:	10 e0       	ldi	r17, 0x00	; 0
    1414:	0e c0       	rjmp	.+28     	; 0x1432 <_ZN8ENC28J6013packetReceiveEv+0x7e>
        } header;
        
        readBuf(sizeof header, (byte*) &header);

        gNextPacketPtr  = header.nextPacket;
        len = header.byteCount - 4; //remove the CRC count
    1416:	24 50       	subi	r18, 0x04	; 4
    1418:	30 40       	sbci	r19, 0x00	; 0
    141a:	8f 01       	movw	r16, r30
    141c:	01 50       	subi	r16, 0x01	; 1
    141e:	10 40       	sbci	r17, 0x00	; 0
    1420:	20 17       	cp	r18, r16
    1422:	31 07       	cpc	r19, r17
    1424:	08 f4       	brcc	.+2      	; 0x1428 <_ZN8ENC28J6013packetReceiveEv+0x74>
    1426:	89 01       	movw	r16, r18
        if (len>bufferSize-1)
            len=bufferSize-1;
        if ((header.status & 0x80)==0)
            len = 0;
        else
            readBuf(len, buffer);
    1428:	c8 01       	movw	r24, r16
    142a:	67 e4       	ldi	r22, 0x47	; 71
    142c:	73 e0       	ldi	r23, 0x03	; 3
    142e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <_ZL7readBufjPh>
        buffer[len] = 0;
    1432:	f8 01       	movw	r30, r16
    1434:	e9 5b       	subi	r30, 0xB9	; 185
    1436:	fc 4f       	sbci	r31, 0xFC	; 252
    1438:	10 82       	st	Z, r1
        if (gNextPacketPtr - 1 > RXSTOP_INIT)
    143a:	60 91 b4 02 	lds	r22, 0x02B4
    143e:	70 91 b5 02 	lds	r23, 0x02B5
    1442:	8c e0       	ldi	r24, 0x0C	; 12
    1444:	61 30       	cpi	r22, 0x01	; 1
    1446:	78 07       	cpc	r23, r24
    1448:	24 f0       	brlt	.+8      	; 0x1452 <_ZN8ENC28J6013packetReceiveEv+0x9e>
            writeReg(ERXRDPT, RXSTOP_INIT);
    144a:	8c e0       	ldi	r24, 0x0C	; 12
    144c:	6f ef       	ldi	r22, 0xFF	; 255
    144e:	7b e0       	ldi	r23, 0x0B	; 11
    1450:	03 c0       	rjmp	.+6      	; 0x1458 <_ZN8ENC28J6013packetReceiveEv+0xa4>
        else
            writeReg(ERXRDPT, gNextPacketPtr - 1);
    1452:	61 50       	subi	r22, 0x01	; 1
    1454:	70 40       	sbci	r23, 0x00	; 0
    1456:	8c e0       	ldi	r24, 0x0C	; 12
    1458:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZL8writeReghj>
        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    145c:	80 e8       	ldi	r24, 0x80	; 128
    145e:	6e e1       	ldi	r22, 0x1E	; 30
    1460:	40 e4       	ldi	r20, 0x40	; 64
    1462:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZL7writeOphhh>
    }
    return len;
}
    1466:	c8 01       	movw	r24, r16
    1468:	26 96       	adiw	r28, 0x06	; 6
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	cd bf       	out	0x3d, r28	; 61
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	1f 91       	pop	r17
    147a:	0f 91       	pop	r16
    147c:	08 95       	ret

0000147e <_ZL8writeBufjPKh>:
        *data++ = SPDR;
    }
    disableChip();
}

static void writeBuf(word len, const byte* data) {
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	8c 01       	movw	r16, r24
    1488:	eb 01       	movw	r28, r22
    SPCR = bit(SPE) | bit(MSTR); // 8 MHz @ 16
    bitSet(SPSR, SPI2X);
}

static void enableChip () {
    cli();
    148a:	f8 94       	cli
    digitalWrite(selectPin, LOW);
    148c:	80 91 b2 02 	lds	r24, 0x02B2
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	0e 94 65 1a 	call	0x34ca	; 0x34ca <digitalWrite>
    digitalWrite(selectPin, HIGH);
    sei();
}

static void xferSPI (byte data) {
    SPDR = data;
    1496:	8a e7       	ldi	r24, 0x7A	; 122
    1498:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR&(1<<SPIF)))
    149a:	0d b4       	in	r0, 0x2d	; 45
    149c:	07 fe       	sbrs	r0, 7
    149e:	fd cf       	rjmp	.-6      	; 0x149a <_ZL8writeBufjPKh+0x1c>
    14a0:	08 c0       	rjmp	.+16     	; 0x14b2 <_ZL8writeBufjPKh+0x34>

static void writeBuf(word len, const byte* data) {
    enableChip();
    xferSPI(ENC28J60_WRITE_BUF_MEM);
    while (len--)
        xferSPI(*data++);
    14a2:	88 81       	ld	r24, Y
    digitalWrite(selectPin, HIGH);
    sei();
}

static void xferSPI (byte data) {
    SPDR = data;
    14a4:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR&(1<<SPIF)))
    14a6:	0d b4       	in	r0, 0x2d	; 45
    14a8:	07 fe       	sbrs	r0, 7
    14aa:	fd cf       	rjmp	.-6      	; 0x14a6 <_ZL8writeBufjPKh+0x28>

static void writeBuf(word len, const byte* data) {
    enableChip();
    xferSPI(ENC28J60_WRITE_BUF_MEM);
    while (len--)
        xferSPI(*data++);
    14ac:	21 96       	adiw	r28, 0x01	; 1
    14ae:	01 50       	subi	r16, 0x01	; 1
    14b0:	10 40       	sbci	r17, 0x00	; 0
}

static void writeBuf(word len, const byte* data) {
    enableChip();
    xferSPI(ENC28J60_WRITE_BUF_MEM);
    while (len--)
    14b2:	01 15       	cp	r16, r1
    14b4:	11 05       	cpc	r17, r1
    14b6:	a9 f7       	brne	.-22     	; 0x14a2 <_ZL8writeBufjPKh+0x24>
        xferSPI(*data++);
    disableChip();
    14b8:	0e 94 c8 08 	call	0x1190	; 0x1190 <_ZL11disableChipv>
}
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	0f 91       	pop	r16
    14c4:	08 95       	ret

000014c6 <_ZN8ENC28J607copyoutEhPKh>:
        writeOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    }
    return len;
}

void ENC28J60::copyout (byte page, const byte* data) {
    14c6:	cf 93       	push	r28
    14c8:	df 93       	push	r29
    14ca:	eb 01       	movw	r28, r22
    word destPos = SCRATCH_START + (page << SCRATCH_PAGE_SHIFT);
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	56 e0       	ldi	r21, 0x06	; 6
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	5a 95       	dec	r21
    14d6:	e1 f7       	brne	.-8      	; 0x14d0 <_ZN8ENC28J607copyoutEhPKh+0xa>
    14d8:	bc 01       	movw	r22, r24
    14da:	60 50       	subi	r22, 0x00	; 0
    14dc:	7e 4e       	sbci	r23, 0xEE	; 238
    if (destPos < SCRATCH_START || destPos > SCRATCH_LIMIT - SCRATCH_PAGE_SIZE)
    14de:	81 5c       	subi	r24, 0xC1	; 193
    14e0:	9d 40       	sbci	r25, 0x0D	; 13
    14e2:	40 f4       	brcc	.+16     	; 0x14f4 <_ZN8ENC28J607copyoutEhPKh+0x2e>
        return;
    writeReg(EWRPT, destPos);
    14e4:	82 e0       	ldi	r24, 0x02	; 2
    14e6:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZL8writeReghj>
    writeBuf(SCRATCH_PAGE_SIZE, data);
    14ea:	80 e4       	ldi	r24, 0x40	; 64
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	be 01       	movw	r22, r28
    14f0:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZL8writeBufjPKh>
}
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	08 95       	ret

000014fa <_ZN8ENC28J6010packetSendEj>:

bool ENC28J60::isLinkUp() {
    return (readPhyByte(PHSTAT2) >> 2) & 1;
}

void ENC28J60::packetSend(word len) {
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	ec 01       	movw	r28, r24
    1500:	0f c0       	rjmp	.+30     	; 0x1520 <_ZN8ENC28J6010packetSendEj+0x26>
    while (readOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
        if (readRegByte(EIR) & EIR_TXERIF) {
    1502:	8c e1       	ldi	r24, 0x1C	; 28
    1504:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZL11readRegByteh>
    1508:	81 ff       	sbrs	r24, 1
    150a:	0a c0       	rjmp	.+20     	; 0x1520 <_ZN8ENC28J6010packetSendEj+0x26>
            writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
    150c:	80 e8       	ldi	r24, 0x80	; 128
    150e:	6f e1       	ldi	r22, 0x1F	; 31
    1510:	40 e8       	ldi	r20, 0x80	; 128
    1512:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZL7writeOphhh>
            writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
    1516:	80 ea       	ldi	r24, 0xA0	; 160
    1518:	6f e1       	ldi	r22, 0x1F	; 31
    151a:	40 e8       	ldi	r20, 0x80	; 128
    151c:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZL7writeOphhh>
bool ENC28J60::isLinkUp() {
    return (readPhyByte(PHSTAT2) >> 2) & 1;
}

void ENC28J60::packetSend(word len) {
    while (readOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	6f e1       	ldi	r22, 0x1F	; 31
    1524:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZL6readOphh>
    1528:	83 fd       	sbrc	r24, 3
    152a:	eb cf       	rjmp	.-42     	; 0x1502 <_ZN8ENC28J6010packetSendEj+0x8>
        if (readRegByte(EIR) & EIR_TXERIF) {
            writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
            writeOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
        }
    writeReg(EWRPT, TXSTART_INIT);
    152c:	82 e0       	ldi	r24, 0x02	; 2
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	7c e0       	ldi	r23, 0x0C	; 12
    1532:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZL8writeReghj>
    writeReg(ETXND, TXSTART_INIT+len);
    1536:	be 01       	movw	r22, r28
    1538:	60 50       	subi	r22, 0x00	; 0
    153a:	74 4f       	sbci	r23, 0xF4	; 244
    153c:	86 e0       	ldi	r24, 0x06	; 6
    153e:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZL8writeReghj>
    writeOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
    1542:	8a e7       	ldi	r24, 0x7A	; 122
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	40 e0       	ldi	r20, 0x00	; 0
    1548:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZL7writeOphhh>
    writeBuf(len, buffer);
    154c:	ce 01       	movw	r24, r28
    154e:	67 e4       	ldi	r22, 0x47	; 71
    1550:	73 e0       	ldi	r23, 0x03	; 3
    1552:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZL8writeBufjPKh>
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
    1556:	80 e8       	ldi	r24, 0x80	; 128
    1558:	6f e1       	ldi	r22, 0x1F	; 31
    155a:	48 e0       	ldi	r20, 0x08	; 8
    155c:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZL7writeOphhh>
}
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	08 95       	ret

00001566 <_ZN8ENC28J607initSPIEv>:
static byte Enc28j60Bank;
static int gNextPacketPtr;
static byte selectPin;

void ENC28J60::initSPI () {
    pinMode(SS, OUTPUT);
    1566:	8a e0       	ldi	r24, 0x0A	; 10
    1568:	61 e0       	ldi	r22, 0x01	; 1
    156a:	0e 94 26 1a 	call	0x344c	; 0x344c <pinMode>
    digitalWrite(SS, HIGH);
    156e:	8a e0       	ldi	r24, 0x0A	; 10
    1570:	61 e0       	ldi	r22, 0x01	; 1
    1572:	0e 94 65 1a 	call	0x34ca	; 0x34ca <digitalWrite>
    pinMode(MOSI, OUTPUT);
    1576:	8b e0       	ldi	r24, 0x0B	; 11
    1578:	61 e0       	ldi	r22, 0x01	; 1
    157a:	0e 94 26 1a 	call	0x344c	; 0x344c <pinMode>
    pinMode(SCK, OUTPUT);   
    157e:	8d e0       	ldi	r24, 0x0D	; 13
    1580:	61 e0       	ldi	r22, 0x01	; 1
    1582:	0e 94 26 1a 	call	0x344c	; 0x344c <pinMode>
    pinMode(MISO, INPUT);
    1586:	8c e0       	ldi	r24, 0x0C	; 12
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	0e 94 26 1a 	call	0x344c	; 0x344c <pinMode>
    
    digitalWrite(MOSI, HIGH);
    158e:	8b e0       	ldi	r24, 0x0B	; 11
    1590:	61 e0       	ldi	r22, 0x01	; 1
    1592:	0e 94 65 1a 	call	0x34ca	; 0x34ca <digitalWrite>
    digitalWrite(MOSI, LOW);
    1596:	8b e0       	ldi	r24, 0x0B	; 11
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	0e 94 65 1a 	call	0x34ca	; 0x34ca <digitalWrite>
    digitalWrite(SCK, LOW);
    159e:	8d e0       	ldi	r24, 0x0D	; 13
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	0e 94 65 1a 	call	0x34ca	; 0x34ca <digitalWrite>

    SPCR = bit(SPE) | bit(MSTR); // 8 MHz @ 16
    15a6:	80 e5       	ldi	r24, 0x50	; 80
    15a8:	8c bd       	out	0x2c, r24	; 44
    bitSet(SPSR, SPI2X);
    15aa:	8d b5       	in	r24, 0x2d	; 45
    15ac:	81 60       	ori	r24, 0x01	; 1
    15ae:	8d bd       	out	0x2d, r24	; 45
}
    15b0:	08 95       	ret

000015b2 <_ZN8ENC28J6010initializeEjPKhh>:
    writeReg(MIWR, data);
    while (readRegByte(MISTAT) & MISTAT_BUSY)
        ;
}

byte ENC28J60::initialize (word size, const byte* macaddr, byte csPin) {
    15b2:	1f 93       	push	r17
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	eb 01       	movw	r28, r22
    15ba:	14 2f       	mov	r17, r20
    bufferSize = size;
    15bc:	90 93 b1 02 	sts	0x02B1, r25
    15c0:	80 93 b0 02 	sts	0x02B0, r24
    if (bitRead(SPCR, SPE) == 0)
    15c4:	0c b4       	in	r0, 0x2c	; 44
    15c6:	06 fc       	sbrc	r0, 6
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <_ZN8ENC28J6010initializeEjPKhh+0x1c>
      initSPI();
    15ca:	0e 94 b3 0a 	call	0x1566	; 0x1566 <_ZN8ENC28J607initSPIEv>
    selectPin = csPin;  
    15ce:	10 93 b2 02 	sts	0x02B2, r17
    pinMode(selectPin, OUTPUT);
    15d2:	81 2f       	mov	r24, r17
    15d4:	61 e0       	ldi	r22, 0x01	; 1
    15d6:	0e 94 26 1a 	call	0x344c	; 0x344c <pinMode>
    disableChip();
    15da:	0e 94 c8 08 	call	0x1190	; 0x1190 <_ZL11disableChipv>
    
    writeOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
    15de:	8f ef       	ldi	r24, 0xFF	; 255
    15e0:	60 e0       	ldi	r22, 0x00	; 0
    15e2:	4f ef       	ldi	r20, 0xFF	; 255
    15e4:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZL7writeOphhh>
    delay(2); // errata B7/2
    15e8:	62 e0       	ldi	r22, 0x02	; 2
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0e 94 88 19 	call	0x3310	; 0x3310 <delay>
    while (!readOp(ENC28J60_READ_CTRL_REG, ESTAT) & ESTAT_CLKRDY)
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	6d e1       	ldi	r22, 0x1D	; 29
    15f8:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZL6readOphh>
    15fc:	88 23       	and	r24, r24
    15fe:	d1 f3       	breq	.-12     	; 0x15f4 <_ZN8ENC28J6010initializeEjPKhh+0x42>
        ;
        
    gNextPacketPtr = RXSTART_INIT;
    1600:	10 92 b5 02 	sts	0x02B5, r1
    1604:	10 92 b4 02 	sts	0x02B4, r1
    writeReg(ERXST, RXSTART_INIT);
    1608:	88 e0       	ldi	r24, 0x08	; 8
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZL8writeReghj>
    writeReg(ERXRDPT, RXSTART_INIT);
    1612:	8c e0       	ldi	r24, 0x0C	; 12
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZL8writeReghj>
    writeReg(ERXND, RXSTOP_INIT);
    161c:	8a e0       	ldi	r24, 0x0A	; 10
    161e:	6f ef       	ldi	r22, 0xFF	; 255
    1620:	7b e0       	ldi	r23, 0x0B	; 11
    1622:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZL8writeReghj>
    writeReg(ETXST, TXSTART_INIT);
    1626:	84 e0       	ldi	r24, 0x04	; 4
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	7c e0       	ldi	r23, 0x0C	; 12
    162c:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZL8writeReghj>
    writeReg(ETXND, TXSTOP_INIT);
    1630:	86 e0       	ldi	r24, 0x06	; 6
    1632:	6f ef       	ldi	r22, 0xFF	; 255
    1634:	71 e1       	ldi	r23, 0x11	; 17
    1636:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZL8writeReghj>
    enableBroadcast(); // change to add ERXFCON_BCEN recommended by epam
    163a:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN8ENC28J6015enableBroadcastEv>
    writeReg(EPMM0, 0x303f);
    163e:	88 e2       	ldi	r24, 0x28	; 40
    1640:	6f e3       	ldi	r22, 0x3F	; 63
    1642:	70 e3       	ldi	r23, 0x30	; 48
    1644:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZL8writeReghj>
    writeReg(EPMCS, 0xf7f9);
    1648:	80 e3       	ldi	r24, 0x30	; 48
    164a:	69 ef       	ldi	r22, 0xF9	; 249
    164c:	77 ef       	ldi	r23, 0xF7	; 247
    164e:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZL8writeReghj>
    writeRegByte(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
    1652:	80 ec       	ldi	r24, 0xC0	; 192
    1654:	6d e0       	ldi	r22, 0x0D	; 13
    1656:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZL12writeRegBytehh>
    writeRegByte(MACON2, 0x00);
    165a:	81 ec       	ldi	r24, 0xC1	; 193
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZL12writeRegBytehh>
    writeOp(ENC28J60_BIT_FIELD_SET, MACON3,
                        MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
    1662:	80 e8       	ldi	r24, 0x80	; 128
    1664:	62 ec       	ldi	r22, 0xC2	; 194
    1666:	42 e3       	ldi	r20, 0x32	; 50
    1668:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZL7writeOphhh>
    writeReg(MAIPG, 0x0C12);
    166c:	86 ec       	ldi	r24, 0xC6	; 198
    166e:	62 e1       	ldi	r22, 0x12	; 18
    1670:	7c e0       	ldi	r23, 0x0C	; 12
    1672:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZL8writeReghj>
    writeRegByte(MABBIPG, 0x12);
    1676:	84 ec       	ldi	r24, 0xC4	; 196
    1678:	62 e1       	ldi	r22, 0x12	; 18
    167a:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZL12writeRegBytehh>
    writeReg(MAMXFL, MAX_FRAMELEN);  
    167e:	8a ec       	ldi	r24, 0xCA	; 202
    1680:	6c ed       	ldi	r22, 0xDC	; 220
    1682:	75 e0       	ldi	r23, 0x05	; 5
    1684:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZL8writeReghj>
    writeRegByte(MAADR5, macaddr[0]);
    1688:	84 ee       	ldi	r24, 0xE4	; 228
    168a:	68 81       	ld	r22, Y
    168c:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZL12writeRegBytehh>
    writeRegByte(MAADR4, macaddr[1]);
    1690:	85 ee       	ldi	r24, 0xE5	; 229
    1692:	69 81       	ldd	r22, Y+1	; 0x01
    1694:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZL12writeRegBytehh>
    writeRegByte(MAADR3, macaddr[2]);
    1698:	82 ee       	ldi	r24, 0xE2	; 226
    169a:	6a 81       	ldd	r22, Y+2	; 0x02
    169c:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZL12writeRegBytehh>
    writeRegByte(MAADR2, macaddr[3]);
    16a0:	83 ee       	ldi	r24, 0xE3	; 227
    16a2:	6b 81       	ldd	r22, Y+3	; 0x03
    16a4:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZL12writeRegBytehh>
    writeRegByte(MAADR1, macaddr[4]);
    16a8:	80 ee       	ldi	r24, 0xE0	; 224
    16aa:	6c 81       	ldd	r22, Y+4	; 0x04
    16ac:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZL12writeRegBytehh>
    writeRegByte(MAADR0, macaddr[5]);
    16b0:	81 ee       	ldi	r24, 0xE1	; 225
    16b2:	6d 81       	ldd	r22, Y+5	; 0x05
    16b4:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZL12writeRegBytehh>
    writeRegByte(MICMD, 0x00);
    return readRegByte(MIRD+1);
}

static void writePhy (byte address, word data) {
    writeRegByte(MIREGADR, address);
    16b8:	84 ed       	ldi	r24, 0xD4	; 212
    16ba:	60 e1       	ldi	r22, 0x10	; 16
    16bc:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZL12writeRegBytehh>
    writeReg(MIWR, data);
    16c0:	86 ed       	ldi	r24, 0xD6	; 214
    16c2:	60 e0       	ldi	r22, 0x00	; 0
    16c4:	71 e0       	ldi	r23, 0x01	; 1
    16c6:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZL8writeReghj>
    while (readRegByte(MISTAT) & MISTAT_BUSY)
    16ca:	8a ee       	ldi	r24, 0xEA	; 234
    16cc:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZL11readRegByteh>
    16d0:	80 fd       	sbrc	r24, 0
    16d2:	fb cf       	rjmp	.-10     	; 0x16ca <_ZN8ENC28J6010initializeEjPKhh+0x118>
    writeRegByte(MAADR3, macaddr[2]);
    writeRegByte(MAADR2, macaddr[3]);
    writeRegByte(MAADR1, macaddr[4]);
    writeRegByte(MAADR0, macaddr[5]);
    writePhy(PHCON2, PHCON2_HDLDIS);
    SetBank(ECON1);
    16d4:	8f e1       	ldi	r24, 0x1F	; 31
    16d6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <_ZL7SetBankh>
    writeOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
    16da:	80 e8       	ldi	r24, 0x80	; 128
    16dc:	6b e1       	ldi	r22, 0x1B	; 27
    16de:	40 ec       	ldi	r20, 0xC0	; 192
    16e0:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZL7writeOphhh>
    writeOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
    16e4:	80 e8       	ldi	r24, 0x80	; 128
    16e6:	6f e1       	ldi	r22, 0x1F	; 31
    16e8:	44 e0       	ldi	r20, 0x04	; 4
    16ea:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZL7writeOphhh>

    byte rev = readRegByte(EREVID);
    16ee:	82 e7       	ldi	r24, 0x72	; 114
    16f0:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZL11readRegByteh>
    // microchip forgot to step the number on the silcon when they
    // released the revision B7. 6 is now rev B7. We still have
    // to see what they do when they release B8. At the moment
    // there is no B8 out yet
    if (rev > 5) ++rev;
    16f4:	86 30       	cpi	r24, 0x06	; 6
    16f6:	08 f0       	brcs	.+2      	; 0x16fa <_ZN8ENC28J6010initializeEjPKhh+0x148>
    16f8:	8f 5f       	subi	r24, 0xFF	; 255
    return rev;
}
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	1f 91       	pop	r17
    1700:	08 95       	ret

00001702 <_ZL13fill_checksumhhjh>:
const char iphdr[] PROGMEM = { 0x45,0,0,0x82,0,0,0x40,0,0x20 };
const char ntpreqhdr[] PROGMEM = { 0xE3,0,4,0xFA,0,1,0,0,0,1 };
const byte allOnes[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
const byte ipBroadcast[] = {255, 255, 255, 255};

static void fill_checksum(byte dest, byte off, word len,byte type) {
    1702:	df 92       	push	r13
    1704:	ef 92       	push	r14
    1706:	ff 92       	push	r15
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	d8 2e       	mov	r13, r24
    1712:	86 2f       	mov	r24, r22
    1714:	ba 01       	movw	r22, r20
  const byte* ptr = gPB + off;
  uint32_t sum = type==1 ? IP_PROTO_UDP_V+len-8 :
                  type==2 ? IP_PROTO_TCP_V+len-8 : 0;
    1716:	21 30       	cpi	r18, 0x01	; 1
    1718:	41 f4       	brne	.+16     	; 0x172a <_ZL13fill_checksumhhjh+0x28>
    171a:	67 5f       	subi	r22, 0xF7	; 247
    171c:	7f 4f       	sbci	r23, 0xFF	; 255
    171e:	9b 01       	movw	r18, r22
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	69 50       	subi	r22, 0x09	; 9
    1726:	70 40       	sbci	r23, 0x00	; 0
    1728:	0e c0       	rjmp	.+28     	; 0x1746 <_ZL13fill_checksumhhjh+0x44>
    172a:	22 30       	cpi	r18, 0x02	; 2
    172c:	29 f0       	breq	.+10     	; 0x1738 <_ZL13fill_checksumhhjh+0x36>
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e0       	ldi	r20, 0x00	; 0
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	07 c0       	rjmp	.+14     	; 0x1746 <_ZL13fill_checksumhhjh+0x44>
    1738:	62 50       	subi	r22, 0x02	; 2
    173a:	70 40       	sbci	r23, 0x00	; 0
    173c:	9b 01       	movw	r18, r22
    173e:	40 e0       	ldi	r20, 0x00	; 0
    1740:	50 e0       	ldi	r21, 0x00	; 0
    1742:	6e 5f       	subi	r22, 0xFE	; 254
    1744:	7f 4f       	sbci	r23, 0xFF	; 255
const char ntpreqhdr[] PROGMEM = { 0xE3,0,4,0xFA,0,1,0,0,0,1 };
const byte allOnes[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
const byte ipBroadcast[] = {255, 255, 255, 255};

static void fill_checksum(byte dest, byte off, word len,byte type) {
  const byte* ptr = gPB + off;
    1746:	e8 2e       	mov	r14, r24
    1748:	ff 24       	eor	r15, r15
    174a:	87 e4       	ldi	r24, 0x47	; 71
    174c:	93 e0       	ldi	r25, 0x03	; 3
    174e:	e8 0e       	add	r14, r24
    1750:	f9 1e       	adc	r15, r25
    1752:	8b 01       	movw	r16, r22
    1754:	e7 01       	movw	r28, r14
    1756:	0f c0       	rjmp	.+30     	; 0x1776 <_ZL13fill_checksumhhjh+0x74>
  uint32_t sum = type==1 ? IP_PROTO_UDP_V+len-8 :
                  type==2 ? IP_PROTO_TCP_V+len-8 : 0;
  while(len >1) {
    sum += (word) (((uint32_t)*ptr<<8)|*(ptr+1));
    1758:	f8 81       	ld	r31, Y
    175a:	e0 e0       	ldi	r30, 0x00	; 0
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	8e 2b       	or	r24, r30
    1762:	9f 2b       	or	r25, r31
    1764:	a0 e0       	ldi	r26, 0x00	; 0
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	28 0f       	add	r18, r24
    176a:	39 1f       	adc	r19, r25
    176c:	4a 1f       	adc	r20, r26
    176e:	5b 1f       	adc	r21, r27
    ptr+=2;
    1770:	22 96       	adiw	r28, 0x02	; 2
    len-=2;
    1772:	02 50       	subi	r16, 0x02	; 2
    1774:	10 40       	sbci	r17, 0x00	; 0

static void fill_checksum(byte dest, byte off, word len,byte type) {
  const byte* ptr = gPB + off;
  uint32_t sum = type==1 ? IP_PROTO_UDP_V+len-8 :
                  type==2 ? IP_PROTO_TCP_V+len-8 : 0;
  while(len >1) {
    1776:	02 30       	cpi	r16, 0x02	; 2
    1778:	11 05       	cpc	r17, r1
    177a:	70 f7       	brcc	.-36     	; 0x1758 <_ZL13fill_checksumhhjh+0x56>
const char iphdr[] PROGMEM = { 0x45,0,0,0x82,0,0,0x40,0,0x20 };
const char ntpreqhdr[] PROGMEM = { 0xE3,0,4,0xFA,0,1,0,0,0,1 };
const byte allOnes[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
const byte ipBroadcast[] = {255, 255, 255, 255};

static void fill_checksum(byte dest, byte off, word len,byte type) {
    177c:	cb 01       	movw	r24, r22
    177e:	8e 7f       	andi	r24, 0xFE	; 254
    1780:	d7 01       	movw	r26, r14
    1782:	a8 0f       	add	r26, r24
    1784:	b9 1f       	adc	r27, r25
  while(len >1) {
    sum += (word) (((uint32_t)*ptr<<8)|*(ptr+1));
    ptr+=2;
    len-=2;
  }
  if (len)
    1786:	68 17       	cp	r22, r24
    1788:	79 07       	cpc	r23, r25
    178a:	79 f0       	breq	.+30     	; 0x17aa <_ZL13fill_checksumhhjh+0xa8>
    sum += ((uint32_t)*ptr)<<8;
    178c:	8c 91       	ld	r24, X
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	a0 e0       	ldi	r26, 0x00	; 0
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	ba 2f       	mov	r27, r26
    1796:	a9 2f       	mov	r26, r25
    1798:	98 2f       	mov	r25, r24
    179a:	88 27       	eor	r24, r24
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <_ZL13fill_checksumhhjh+0xa0>
  while (sum>>16)
    sum = (word) sum + (sum >> 16);
    179e:	40 e0       	ldi	r20, 0x00	; 0
    17a0:	50 e0       	ldi	r21, 0x00	; 0
    17a2:	28 0f       	add	r18, r24
    17a4:	39 1f       	adc	r19, r25
    17a6:	4a 1f       	adc	r20, r26
    17a8:	5b 1f       	adc	r21, r27
    ptr+=2;
    len-=2;
  }
  if (len)
    sum += ((uint32_t)*ptr)<<8;
  while (sum>>16)
    17aa:	ca 01       	movw	r24, r20
    17ac:	aa 27       	eor	r26, r26
    17ae:	bb 27       	eor	r27, r27
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	a1 05       	cpc	r26, r1
    17b4:	b1 05       	cpc	r27, r1
    17b6:	99 f7       	brne	.-26     	; 0x179e <_ZL13fill_checksumhhjh+0x9c>
    sum = (word) sum + (sum >> 16);
  word ck = ~ (word) sum;
    17b8:	c9 01       	movw	r24, r18
    17ba:	80 95       	com	r24
    17bc:	90 95       	com	r25
  gPB[dest] = ck>>8;
    17be:	ed 2d       	mov	r30, r13
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	e9 5b       	subi	r30, 0xB9	; 185
    17c4:	fc 4f       	sbci	r31, 0xFC	; 252
    17c6:	90 83       	st	Z, r25
  gPB[dest+1] = ck;
    17c8:	81 83       	std	Z+1, r24	; 0x01
}
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	1f 91       	pop	r17
    17d0:	0f 91       	pop	r16
    17d2:	ff 90       	pop	r15
    17d4:	ef 90       	pop	r14
    17d6:	df 90       	pop	r13
    17d8:	08 95       	ret

000017da <_ZL20fill_ip_hdr_checksumv>:
                      gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
                      memcmp(gPB + IP_DST_P, EtherCard::myip, 4) == 0;
}

static void fill_ip_hdr_checksum() {
  gPB[IP_CHECKSUM_P] = 0;
    17da:	10 92 5f 03 	sts	0x035F, r1
  gPB[IP_CHECKSUM_P+1] = 0;
    17de:	10 92 60 03 	sts	0x0360, r1
  gPB[IP_FLAGS_P] = 0x40; // don't fragment
    17e2:	80 e4       	ldi	r24, 0x40	; 64
    17e4:	80 93 5b 03 	sts	0x035B, r24
  gPB[IP_FLAGS_P+1] = 0;  // fragement offset
    17e8:	10 92 5c 03 	sts	0x035C, r1
  gPB[IP_TTL_P] = 64; // ttl
    17ec:	80 93 5d 03 	sts	0x035D, r24
  fill_checksum(IP_CHECKSUM_P, IP_P, IP_HEADER_LEN,0);
    17f0:	88 e1       	ldi	r24, 0x18	; 24
    17f2:	6e e0       	ldi	r22, 0x0E	; 14
    17f4:	44 e1       	ldi	r20, 0x14	; 20
    17f6:	50 e0       	ldi	r21, 0x00	; 0
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	0e 94 81 0b 	call	0x1702	; 0x1702 <_ZL13fill_checksumhhjh>
}
    17fe:	08 95       	ret

00001800 <_ZN9EtherCard15clientWaitingGwEv>:
  EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
  waitgwmac |= WGW_ACCEPT_ARP_REPLY;
  EtherCard::packetSend(42);
}

byte EtherCard::clientWaitingGw () {
    1800:	80 91 b6 02 	lds	r24, 0x02B6
    1804:	86 95       	lsr	r24
    1806:	80 95       	com	r24
  return !(waitgwmac & WGW_HAVE_GW_MAC);
}
    1808:	81 70       	andi	r24, 0x01	; 1
    180a:	08 95       	ret

0000180c <_ZL13tcp_result_cbhhjj>:
  result_fd = 123; // bogus value
  return len;
}

static byte tcp_result_cb(byte fd, byte status, word datapos, word datalen) {
  if (status == 0) {
    180c:	66 23       	and	r22, r22
    180e:	41 f4       	brne	.+16     	; 0x1820 <_ZL13tcp_result_cbhhjj+0x14>
    result_fd = fd; // a valid result has been received, remember its session id
    1810:	80 93 af 01 	sts	0x01AF, r24
    result_ptr = (char*) ether.buffer + datapos;
    1814:	49 5b       	subi	r20, 0xB9	; 185
    1816:	5c 4f       	sbci	r21, 0xFC	; 252
    1818:	50 93 ca 02 	sts	0x02CA, r21
    181c:	40 93 c9 02 	sts	0x02C9, r20
    // result_ptr[datalen] = 0;
  }
  return 1;
}
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	08 95       	ret

00001824 <_ZN9EtherCard7tcpSendEv>:

byte EtherCard::tcpSend () {
  www_fd = clientTcpReq(&tcp_result_cb, &tcp_datafill_cb, hisport);
    1824:	30 91 92 01 	lds	r19, 0x0192
    1828:	20 91 93 01 	lds	r18, 0x0193
  EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4);
}

byte EtherCard::clientTcpReq (byte (*result_cb)(byte,byte,word,word),
                              word (*datafill_cb)(byte),word port) {
  client_tcp_result_cb = result_cb;
    182c:	86 e0       	ldi	r24, 0x06	; 6
    182e:	9c e0       	ldi	r25, 0x0C	; 12
    1830:	90 93 be 02 	sts	0x02BE, r25
    1834:	80 93 bd 02 	sts	0x02BD, r24
  client_tcp_datafill_cb = datafill_cb;
    1838:	83 e6       	ldi	r24, 0x63	; 99
    183a:	90 e1       	ldi	r25, 0x10	; 16
    183c:	90 93 c0 02 	sts	0x02C0, r25
    1840:	80 93 bf 02 	sts	0x02BF, r24
  tcp_client_port_h = port>>8;
    1844:	20 93 b9 02 	sts	0x02B9, r18
  tcp_client_port_l = port;
    1848:	30 93 ba 02 	sts	0x02BA, r19
  tcp_client_state = 1; // send a syn
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	80 93 b7 02 	sts	0x02B7, r24
  tcp_fd = (tcp_fd + 1) & 7;
    1852:	80 91 b8 02 	lds	r24, 0x02B8
    1856:	8f 5f       	subi	r24, 0xFF	; 255
    1858:	87 70       	andi	r24, 0x07	; 7
    185a:	80 93 b8 02 	sts	0x02B8, r24
  }
  return 1;
}

byte EtherCard::tcpSend () {
  www_fd = clientTcpReq(&tcp_result_cb, &tcp_datafill_cb, hisport);
    185e:	80 93 cb 02 	sts	0x02CB, r24
  return www_fd;
}
    1862:	08 95       	ret

00001864 <_ZL7setMACsPKh>:
  word ck = ~ (word) sum;
  gPB[dest] = ck>>8;
  gPB[dest+1] = ck;
}

static void setMACs (const byte *mac) {
    1864:	0f 93       	push	r16
    1866:	1f 93       	push	r17
    1868:	bc 01       	movw	r22, r24
  EtherCard::copyMac(gPB + ETH_DST_MAC, mac);
    186a:	07 e4       	ldi	r16, 0x47	; 71
    186c:	13 e0       	ldi	r17, 0x03	; 3
    186e:	c8 01       	movw	r24, r16
    1870:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN9EtherCard7copyMacEPhPKh>
  EtherCard::copyMac(gPB + ETH_SRC_MAC, EtherCard::mymac);
    1874:	c8 01       	movw	r24, r16
    1876:	06 96       	adiw	r24, 0x06	; 6
    1878:	6c e7       	ldi	r22, 0x7C	; 124
    187a:	72 e0       	ldi	r23, 0x02	; 2
    187c:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN9EtherCard7copyMacEPhPKh>
}
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	08 95       	ret

00001886 <_ZL12setMACandIPsPKhS0_>:

static void setMACandIPs (const byte *mac, const byte *dst) {
    1886:	ef 92       	push	r14
    1888:	ff 92       	push	r15
    188a:	0f 93       	push	r16
    188c:	1f 93       	push	r17
    188e:	7b 01       	movw	r14, r22
  setMACs(mac);
    1890:	0e 94 32 0c 	call	0x1864	; 0x1864 <_ZL7setMACsPKh>
  EtherCard::copyIp(gPB + IP_DST_P, dst);
    1894:	05 e6       	ldi	r16, 0x65	; 101
    1896:	13 e0       	ldi	r17, 0x03	; 3
    1898:	c8 01       	movw	r24, r16
    189a:	b7 01       	movw	r22, r14
    189c:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN9EtherCard6copyIpEPhPKh>
  EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
    18a0:	c8 01       	movw	r24, r16
    18a2:	04 97       	sbiw	r24, 0x04	; 4
    18a4:	62 e8       	ldi	r22, 0x82	; 130
    18a6:	72 e0       	ldi	r23, 0x02	; 2
    18a8:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN9EtherCard6copyIpEPhPKh>
}
    18ac:	1f 91       	pop	r17
    18ae:	0f 91       	pop	r16
    18b0:	ff 90       	pop	r15
    18b2:	ef 90       	pop	r14
    18b4:	08 95       	ret

000018b6 <_ZN9EtherCard10udpPrepareEjPhj>:
  ((byte*) time)[1] = gPB[0x54];
  ((byte*) time)[0] = gPB[0x55];
  return 1;
}

void EtherCard::udpPrepare (word sport, byte *dip, word dport) {
    18b6:	ef 92       	push	r14
    18b8:	ff 92       	push	r15
    18ba:	0f 93       	push	r16
    18bc:	1f 93       	push	r17
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	7c 01       	movw	r14, r24
    18c4:	eb 01       	movw	r28, r22
    18c6:	8a 01       	movw	r16, r20
  setMACandIPs(gwmacaddr, dip);
    18c8:	81 ec       	ldi	r24, 0xC1	; 193
    18ca:	92 e0       	ldi	r25, 0x02	; 2
    18cc:	0e 94 43 0c 	call	0x1886	; 0x1886 <_ZL12setMACandIPsPKhS0_>
  // see http://tldp.org/HOWTO/Multicast-HOWTO-2.html
  // multicast or broadcast address, https://github.com/jcw/ethercard/issues/59
  if ((dip[0] & 0xF0) == 0xE0 || *((long*) dip) == 0xFFFFFFFF)
    18d0:	88 81       	ld	r24, Y
    18d2:	80 7f       	andi	r24, 0xF0	; 240
    18d4:	80 3e       	cpi	r24, 0xE0	; 224
    18d6:	49 f0       	breq	.+18     	; 0x18ea <_ZN9EtherCard10udpPrepareEjPhj+0x34>
    18d8:	88 81       	ld	r24, Y
    18da:	99 81       	ldd	r25, Y+1	; 0x01
    18dc:	aa 81       	ldd	r26, Y+2	; 0x02
    18de:	bb 81       	ldd	r27, Y+3	; 0x03
    18e0:	8f 5f       	subi	r24, 0xFF	; 255
    18e2:	9f 4f       	sbci	r25, 0xFF	; 255
    18e4:	af 4f       	sbci	r26, 0xFF	; 255
    18e6:	bf 4f       	sbci	r27, 0xFF	; 255
    18e8:	31 f4       	brne	.+12     	; 0x18f6 <_ZN9EtherCard10udpPrepareEjPhj+0x40>
    EtherCard::copyMac(gPB + ETH_DST_MAC, allOnes);
    18ea:	87 e4       	ldi	r24, 0x47	; 71
    18ec:	93 e0       	ldi	r25, 0x03	; 3
    18ee:	64 ec       	ldi	r22, 0xC4	; 196
    18f0:	71 e0       	ldi	r23, 0x01	; 1
    18f2:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN9EtherCard7copyMacEPhPKh>
  gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
    18f6:	88 e0       	ldi	r24, 0x08	; 8
    18f8:	80 93 53 03 	sts	0x0353, r24
  gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
    18fc:	10 92 54 03 	sts	0x0354, r1
  memcpy_P(gPB + IP_P,iphdr,9);
    1900:	85 e5       	ldi	r24, 0x55	; 85
    1902:	93 e0       	ldi	r25, 0x03	; 3
    1904:	60 e7       	ldi	r22, 0x70	; 112
    1906:	70 e0       	ldi	r23, 0x00	; 0
    1908:	49 e0       	ldi	r20, 0x09	; 9
    190a:	50 e0       	ldi	r21, 0x00	; 0
    190c:	0e 94 40 01 	call	0x280	; 0x280 <memcpy_P>
  gPB[IP_TOTLEN_H_P] = 0;
    1910:	10 92 57 03 	sts	0x0357, r1
  gPB[IP_PROTO_P] = IP_PROTO_UDP_V;
    1914:	81 e1       	ldi	r24, 0x11	; 17
    1916:	80 93 5e 03 	sts	0x035E, r24
  gPB[UDP_DST_PORT_H_P] = (dport>>8);
    191a:	10 93 6b 03 	sts	0x036B, r17
  gPB[UDP_DST_PORT_L_P] = dport; 
    191e:	00 93 6c 03 	sts	0x036C, r16
  gPB[UDP_SRC_PORT_H_P] = (sport>>8);
    1922:	f0 92 69 03 	sts	0x0369, r15
  gPB[UDP_SRC_PORT_L_P] = sport; 
    1926:	e0 92 6a 03 	sts	0x036A, r14
  gPB[UDP_LEN_H_P] = 0;
    192a:	10 92 6d 03 	sts	0x036D, r1
  gPB[UDP_CHECKSUM_H_P] = 0;
    192e:	10 92 6f 03 	sts	0x036F, r1
  gPB[UDP_CHECKSUM_L_P] = 0;
    1932:	10 92 70 03 	sts	0x0370, r1
}
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	1f 91       	pop	r17
    193c:	0f 91       	pop	r16
    193e:	ff 90       	pop	r15
    1940:	ef 90       	pop	r14
    1942:	08 95       	ret

00001944 <_ZL11make_eth_ipv>:
  gPB[IP_FLAGS_P+1] = 0;  // fragement offset
  gPB[IP_TTL_P] = 64; // ttl
  fill_checksum(IP_CHECKSUM_P, IP_P, IP_HEADER_LEN,0);
}

static void make_eth_ip() {
    1944:	ef 92       	push	r14
    1946:	ff 92       	push	r15
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
  setMACs(gPB + ETH_SRC_MAC);
    194c:	0d e4       	ldi	r16, 0x4D	; 77
    194e:	13 e0       	ldi	r17, 0x03	; 3
    1950:	c8 01       	movw	r24, r16
    1952:	0e 94 32 0c 	call	0x1864	; 0x1864 <_ZL7setMACsPKh>
  EtherCard::copyIp(gPB + IP_DST_P, gPB + IP_SRC_P);
    1956:	74 e1       	ldi	r23, 0x14	; 20
    1958:	e7 2e       	mov	r14, r23
    195a:	f1 2c       	mov	r15, r1
    195c:	e0 0e       	add	r14, r16
    195e:	f1 1e       	adc	r15, r17
    1960:	c8 01       	movw	r24, r16
    1962:	48 96       	adiw	r24, 0x18	; 24
    1964:	b7 01       	movw	r22, r14
    1966:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN9EtherCard6copyIpEPhPKh>
  EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
    196a:	c7 01       	movw	r24, r14
    196c:	62 e8       	ldi	r22, 0x82	; 130
    196e:	72 e0       	ldi	r23, 0x02	; 2
    1970:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN9EtherCard6copyIpEPhPKh>
  fill_ip_hdr_checksum();
    1974:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZL20fill_ip_hdr_checksumv>
}
    1978:	1f 91       	pop	r17
    197a:	0f 91       	pop	r16
    197c:	ff 90       	pop	r15
    197e:	ef 90       	pop	r14
    1980:	08 95       	ret

00001982 <_ZN9EtherCard7setGwIpEPKh>:
// static void client_gw_arp_refresh() {
//   if (waitgwmac & WGW_HAVE_GW_MAC)
//     waitgwmac |= WGW_REFRESHING;
// }

void EtherCard::setGwIp (const byte *gwipaddr) {
    1982:	bc 01       	movw	r22, r24
  waitgwmac = WGW_INITIAL_ARP; // causes an arp request in the packet loop
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	80 93 b6 02 	sts	0x02B6, r24
  copyIp(gwip, gwipaddr);
    198a:	8a e8       	ldi	r24, 0x8A	; 138
    198c:	92 e0       	ldi	r25, 0x02	; 2
    198e:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN9EtherCard6copyIpEPhPKh>
}
    1992:	08 95       	ret

00001994 <_ZL30make_tcp_ack_with_data_noflagsj>:
  gPB[TCP_WIN_SIZE+1] = 0;
  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN,2);
  EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN);
}

static void make_tcp_ack_with_data_noflags(word dlen) {
    1994:	0f 93       	push	r16
    1996:	1f 93       	push	r17
    1998:	8c 01       	movw	r16, r24
  word j = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
    199a:	88 96       	adiw	r24, 0x28	; 40
  gPB[IP_TOTLEN_H_P] = j>>8;
    199c:	90 93 57 03 	sts	0x0357, r25
  gPB[IP_TOTLEN_L_P] = j;
    19a0:	80 93 58 03 	sts	0x0358, r24
  fill_ip_hdr_checksum();
    19a4:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZL20fill_ip_hdr_checksumv>
  gPB[TCP_CHECKSUM_H_P] = 0;
    19a8:	10 92 79 03 	sts	0x0379, r1
  gPB[TCP_CHECKSUM_L_P] = 0;
    19ac:	10 92 7a 03 	sts	0x037A, r1
  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+dlen,2);
    19b0:	04 5e       	subi	r16, 0xE4	; 228
    19b2:	1f 4f       	sbci	r17, 0xFF	; 255
    19b4:	82 e3       	ldi	r24, 0x32	; 50
    19b6:	6a e1       	ldi	r22, 0x1A	; 26
    19b8:	a8 01       	movw	r20, r16
    19ba:	22 e0       	ldi	r18, 0x02	; 2
    19bc:	0e 94 81 0b 	call	0x1702	; 0x1702 <_ZL13fill_checksumhhjh>
  EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN);
    19c0:	c8 01       	movw	r24, r16
    19c2:	4a 96       	adiw	r24, 0x1a	; 26
    19c4:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <_ZN8ENC28J6010packetSendEj>
}
    19c8:	1f 91       	pop	r17
    19ca:	0f 91       	pop	r16
    19cc:	08 95       	ret

000019ce <_ZL21make_tcp_ack_from_anyih>:
  if (i<=0)
    i = 0;
  return (word)i;
}

static void make_tcp_ack_from_any(int16_t datlentoack,byte addflags) {
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	9c 01       	movw	r18, r24
  gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|addflags;
    19d4:	86 2f       	mov	r24, r22
    19d6:	80 61       	ori	r24, 0x10	; 16
    19d8:	80 93 76 03 	sts	0x0376, r24
  if (addflags!=TCP_FLAGS_RST_V && datlentoack==0)
    19dc:	64 30       	cpi	r22, 0x04	; 4
    19de:	29 f0       	breq	.+10     	; 0x19ea <_ZL21make_tcp_ack_from_anyih+0x1c>
    19e0:	21 15       	cp	r18, r1
    19e2:	31 05       	cpc	r19, r1
    19e4:	11 f4       	brne	.+4      	; 0x19ea <_ZL21make_tcp_ack_from_anyih+0x1c>
    19e6:	21 e0       	ldi	r18, 0x01	; 1
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    i--;
  }
}

static void make_tcphead(word rel_ack_num,byte cp_seq) {
  byte i = gPB[TCP_DST_PORT_H_P];
    19ea:	90 91 6b 03 	lds	r25, 0x036B
  gPB[TCP_DST_PORT_H_P] = gPB[TCP_SRC_PORT_H_P];
    19ee:	80 91 69 03 	lds	r24, 0x0369
    19f2:	80 93 6b 03 	sts	0x036B, r24
  gPB[TCP_SRC_PORT_H_P] = i;
    19f6:	90 93 69 03 	sts	0x0369, r25
  byte j = gPB[TCP_DST_PORT_L_P];
    19fa:	90 91 6c 03 	lds	r25, 0x036C
  gPB[TCP_DST_PORT_L_P] = gPB[TCP_SRC_PORT_L_P];
    19fe:	80 91 6a 03 	lds	r24, 0x036A
    1a02:	80 93 6c 03 	sts	0x036C, r24
  gPB[TCP_SRC_PORT_L_P] = j;
    1a06:	90 93 6a 03 	sts	0x036A, r25
    1a0a:	c0 e7       	ldi	r28, 0x70	; 112
    1a0c:	d3 e0       	ldi	r29, 0x03	; 3
static void step_seq(word rel_ack_num,byte cp_seq) {
  byte i;
  byte tseq;
  i = 4;
  while(i>0) {
    rel_ack_num = gPB[TCP_SEQ_H_P+i-1]+rel_ack_num;
    1a0e:	88 81       	ld	r24, Y
    1a10:	a9 01       	movw	r20, r18
    1a12:	48 0f       	add	r20, r24
    1a14:	51 1d       	adc	r21, r1
    tseq = gPB[TCP_SEQACK_H_P+i-1];
    1a16:	2c 81       	ldd	r18, Y+4	; 0x04
    gPB[TCP_SEQACK_H_P+i-1] = rel_ack_num;
    1a18:	4c 83       	std	Y+4, r20	; 0x04
    if (cp_seq)
      gPB[TCP_SEQ_H_P+i-1] = tseq;
    1a1a:	28 83       	st	Y, r18
    else
      gPB[TCP_SEQ_H_P+i-1] = 0; // some preset value
    rel_ack_num = rel_ack_num>>8;
    1a1c:	25 2f       	mov	r18, r21
    1a1e:	33 27       	eor	r19, r19
    1a20:	21 97       	sbiw	r28, 0x01	; 1

static void step_seq(word rel_ack_num,byte cp_seq) {
  byte i;
  byte tseq;
  i = 4;
  while(i>0) {
    1a22:	53 e0       	ldi	r21, 0x03	; 3
    1a24:	cc 36       	cpi	r28, 0x6C	; 108
    1a26:	d5 07       	cpc	r29, r21
    1a28:	91 f7       	brne	.-28     	; 0x1a0e <_ZL21make_tcp_ack_from_anyih+0x40>
  gPB[TCP_SRC_PORT_H_P] = i;
  byte j = gPB[TCP_DST_PORT_L_P];
  gPB[TCP_DST_PORT_L_P] = gPB[TCP_SRC_PORT_L_P];
  gPB[TCP_SRC_PORT_L_P] = j;
  step_seq(rel_ack_num,cp_seq);
  gPB[TCP_CHECKSUM_H_P] = 0;
    1a2a:	1d 86       	std	Y+13, r1	; 0x0d
  gPB[TCP_CHECKSUM_L_P] = 0;
    1a2c:	1e 86       	std	Y+14, r1	; 0x0e
  gPB[TCP_HEADER_LEN_P] = 0x50;
    1a2e:	80 e5       	ldi	r24, 0x50	; 80
    1a30:	89 87       	std	Y+9, r24	; 0x09
  gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|addflags;
  if (addflags!=TCP_FLAGS_RST_V && datlentoack==0)
    datlentoack = 1;
  make_tcphead(datlentoack,1); // no options
  word j = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
  gPB[IP_TOTLEN_H_P] = j>>8;
    1a32:	10 92 57 03 	sts	0x0357, r1
  gPB[IP_TOTLEN_L_P] = j;
    1a36:	88 e2       	ldi	r24, 0x28	; 40
    1a38:	80 93 58 03 	sts	0x0358, r24
  make_eth_ip();
    1a3c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZL11make_eth_ipv>
  gPB[TCP_WIN_SIZE] = 0x4; // 1024=0x400, 1280=0x500 2048=0x800 768=0x300
    1a40:	84 e0       	ldi	r24, 0x04	; 4
    1a42:	8b 87       	std	Y+11, r24	; 0x0b
  gPB[TCP_WIN_SIZE+1] = 0;
    1a44:	1c 86       	std	Y+12, r1	; 0x0c
  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN,2);
    1a46:	82 e3       	ldi	r24, 0x32	; 50
    1a48:	6a e1       	ldi	r22, 0x1A	; 26
    1a4a:	4c e1       	ldi	r20, 0x1C	; 28
    1a4c:	50 e0       	ldi	r21, 0x00	; 0
    1a4e:	22 e0       	ldi	r18, 0x02	; 2
    1a50:	0e 94 81 0b 	call	0x1702	; 0x1702 <_ZL13fill_checksumhhjh>
  EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN);
    1a54:	86 e3       	ldi	r24, 0x36	; 54
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <_ZN8ENC28J6010packetSendEj>
}
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	08 95       	ret

00001a62 <_ZN9EtherCard6acceptEjj>:
          gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREPLY_V &&
           gPB[ICMP_DATA_P]== PINGPATTERN &&
            check_ip_message_is_from(ip_monitoredhost);
}

word EtherCard::accept(const word port, word plen) {
    1a62:	e8 2f       	mov	r30, r24
  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+4,2);
  EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN);
}

static word get_tcp_data_len() {
  int16_t i = (((int16_t)gPB[IP_TOTLEN_H_P])<<8)|gPB[IP_TOTLEN_L_P];
    1a64:	a0 91 57 03 	lds	r26, 0x0357
    1a68:	b0 91 58 03 	lds	r27, 0x0358
  i -= IP_HEADER_LEN;
  i -= (gPB[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
    1a6c:	f0 91 75 03 	lds	r31, 0x0375

word EtherCard::accept(const word port, word plen) {
  word len;
  len = get_tcp_data_len();
  
  if (gPB[TCP_DST_PORT_H_P] == (port >> 8) &&
    1a70:	40 91 6b 03 	lds	r20, 0x036B
    1a74:	50 e0       	ldi	r21, 0x00	; 0
    1a76:	29 2f       	mov	r18, r25
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	42 17       	cp	r20, r18
    1a7c:	53 07       	cpc	r21, r19
    1a7e:	09 f0       	breq	.+2      	; 0x1a82 <_ZN9EtherCard6acceptEjj+0x20>
    1a80:	8e c0       	rjmp	.+284    	; 0x1b9e <_ZN9EtherCard6acceptEjj+0x13c>
    1a82:	80 91 6c 03 	lds	r24, 0x036C
    1a86:	8e 17       	cp	r24, r30
    1a88:	09 f0       	breq	.+2      	; 0x1a8c <_ZN9EtherCard6acceptEjj+0x2a>
    1a8a:	89 c0       	rjmp	.+274    	; 0x1b9e <_ZN9EtherCard6acceptEjj+0x13c>
      gPB[TCP_DST_PORT_L_P] == ((byte) port)) {
    if (gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V)
    1a8c:	80 91 76 03 	lds	r24, 0x0376
    1a90:	e8 2f       	mov	r30, r24
    1a92:	81 ff       	sbrs	r24, 1
    1a94:	4e c0       	rjmp	.+156    	; 0x1b32 <_ZN9EtherCard6acceptEjj+0xd0>
  fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + datalen,1);
  packetSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen);
}

static void make_tcp_synack_from_syn() {
  gPB[IP_TOTLEN_H_P] = 0;
    1a96:	10 92 57 03 	sts	0x0357, r1
  gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
    1a9a:	8c e2       	ldi	r24, 0x2C	; 44
    1a9c:	80 93 58 03 	sts	0x0358, r24
  make_eth_ip();
    1aa0:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZL11make_eth_ipv>
  gPB[TCP_FLAGS_P] = TCP_FLAGS_SYNACK_V;
    1aa4:	82 e1       	ldi	r24, 0x12	; 18
    1aa6:	80 93 76 03 	sts	0x0376, r24
    i--;
  }
}

static void make_tcphead(word rel_ack_num,byte cp_seq) {
  byte i = gPB[TCP_DST_PORT_H_P];
    1aaa:	90 91 6b 03 	lds	r25, 0x036B
  gPB[TCP_DST_PORT_H_P] = gPB[TCP_SRC_PORT_H_P];
    1aae:	80 91 69 03 	lds	r24, 0x0369
    1ab2:	80 93 6b 03 	sts	0x036B, r24
  gPB[TCP_SRC_PORT_H_P] = i;
    1ab6:	90 93 69 03 	sts	0x0369, r25
  byte j = gPB[TCP_DST_PORT_L_P];
    1aba:	90 91 6c 03 	lds	r25, 0x036C
  gPB[TCP_DST_PORT_L_P] = gPB[TCP_SRC_PORT_L_P];
    1abe:	80 91 6a 03 	lds	r24, 0x036A
    1ac2:	80 93 6c 03 	sts	0x036C, r24
  gPB[TCP_SRC_PORT_L_P] = j;
    1ac6:	90 93 6a 03 	sts	0x036A, r25
    1aca:	e0 e7       	ldi	r30, 0x70	; 112
    1acc:	f3 e0       	ldi	r31, 0x03	; 3
    1ace:	21 e0       	ldi	r18, 0x01	; 1
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
static void step_seq(word rel_ack_num,byte cp_seq) {
  byte i;
  byte tseq;
  i = 4;
  while(i>0) {
    rel_ack_num = gPB[TCP_SEQ_H_P+i-1]+rel_ack_num;
    1ad2:	80 81       	ld	r24, Z
    1ad4:	a9 01       	movw	r20, r18
    1ad6:	48 0f       	add	r20, r24
    1ad8:	51 1d       	adc	r21, r1
    tseq = gPB[TCP_SEQACK_H_P+i-1];
    gPB[TCP_SEQACK_H_P+i-1] = rel_ack_num;
    1ada:	44 83       	std	Z+4, r20	; 0x04
    if (cp_seq)
      gPB[TCP_SEQ_H_P+i-1] = tseq;
    else
      gPB[TCP_SEQ_H_P+i-1] = 0; // some preset value
    1adc:	10 82       	st	Z, r1
    rel_ack_num = rel_ack_num>>8;
    1ade:	25 2f       	mov	r18, r21
    1ae0:	33 27       	eor	r19, r19
    1ae2:	31 97       	sbiw	r30, 0x01	; 1

static void step_seq(word rel_ack_num,byte cp_seq) {
  byte i;
  byte tseq;
  i = 4;
  while(i>0) {
    1ae4:	53 e0       	ldi	r21, 0x03	; 3
    1ae6:	ec 36       	cpi	r30, 0x6C	; 108
    1ae8:	f5 07       	cpc	r31, r21
    1aea:	99 f7       	brne	.-26     	; 0x1ad2 <_ZN9EtherCard6acceptEjj+0x70>
  gPB[TCP_SRC_PORT_H_P] = i;
  byte j = gPB[TCP_DST_PORT_L_P];
  gPB[TCP_DST_PORT_L_P] = gPB[TCP_SRC_PORT_L_P];
  gPB[TCP_SRC_PORT_L_P] = j;
  step_seq(rel_ack_num,cp_seq);
  gPB[TCP_CHECKSUM_H_P] = 0;
    1aec:	15 86       	std	Z+13, r1	; 0x0d
  gPB[TCP_CHECKSUM_L_P] = 0;
    1aee:	16 86       	std	Z+14, r1	; 0x0e
  gPB[IP_TOTLEN_H_P] = 0;
  gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
  make_eth_ip();
  gPB[TCP_FLAGS_P] = TCP_FLAGS_SYNACK_V;
  make_tcphead(1,0);
  gPB[TCP_SEQ_H_P+0] = 0;
    1af0:	11 82       	std	Z+1, r1	; 0x01
  gPB[TCP_SEQ_H_P+1] = 0;
    1af2:	12 82       	std	Z+2, r1	; 0x02
  gPB[TCP_SEQ_H_P+2] = seqnum; 
    1af4:	80 91 ae 01 	lds	r24, 0x01AE
    1af8:	83 83       	std	Z+3, r24	; 0x03
  gPB[TCP_SEQ_H_P+3] = 0;
    1afa:	14 82       	std	Z+4, r1	; 0x04
  seqnum += 3;
    1afc:	8d 5f       	subi	r24, 0xFD	; 253
    1afe:	80 93 ae 01 	sts	0x01AE, r24
  gPB[TCP_OPTIONS_P] = 2;
    1b02:	82 e0       	ldi	r24, 0x02	; 2
    1b04:	81 8b       	std	Z+17, r24	; 0x11
  gPB[TCP_OPTIONS_P+1] = 4;
    1b06:	84 e0       	ldi	r24, 0x04	; 4
    1b08:	82 8b       	std	Z+18, r24	; 0x12
  gPB[TCP_OPTIONS_P+2] = 0x05;
    1b0a:	95 e0       	ldi	r25, 0x05	; 5
    1b0c:	93 8b       	std	Z+19, r25	; 0x13
  gPB[TCP_OPTIONS_P+3] = 0x0;
    1b0e:	14 8a       	std	Z+20, r1	; 0x14
  gPB[TCP_HEADER_LEN_P] = 0x60;
    1b10:	80 e6       	ldi	r24, 0x60	; 96
    1b12:	81 87       	std	Z+9, r24	; 0x09
  gPB[TCP_WIN_SIZE] = 0x5; // 1400=0x578
    1b14:	93 87       	std	Z+11, r25	; 0x0b
  gPB[TCP_WIN_SIZE+1] = 0x78;
    1b16:	88 e7       	ldi	r24, 0x78	; 120
    1b18:	84 87       	std	Z+12, r24	; 0x0c
  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+4,2);
    1b1a:	82 e3       	ldi	r24, 0x32	; 50
    1b1c:	6a e1       	ldi	r22, 0x1A	; 26
    1b1e:	40 e2       	ldi	r20, 0x20	; 32
    1b20:	50 e0       	ldi	r21, 0x00	; 0
    1b22:	22 e0       	ldi	r18, 0x02	; 2
    1b24:	0e 94 81 0b 	call	0x1702	; 0x1702 <_ZL13fill_checksumhhjh>
  EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN);
    1b28:	8a e3       	ldi	r24, 0x3A	; 58
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <_ZN8ENC28J6010packetSendEj>
    1b30:	36 c0       	rjmp	.+108    	; 0x1b9e <_ZN9EtherCard6acceptEjj+0x13c>
  
  if (gPB[TCP_DST_PORT_H_P] == (port >> 8) &&
      gPB[TCP_DST_PORT_L_P] == ((byte) port)) {
    if (gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V)
      make_tcp_synack_from_syn();
    else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V) {
    1b32:	84 ff       	sbrs	r24, 4
    1b34:	34 c0       	rjmp	.+104    	; 0x1b9e <_ZN9EtherCard6acceptEjj+0x13c>
}

static word get_tcp_data_len() {
  int16_t i = (((int16_t)gPB[IP_TOTLEN_H_P])<<8)|gPB[IP_TOTLEN_L_P];
  i -= IP_HEADER_LEN;
  i -= (gPB[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
    1b36:	4f 2f       	mov	r20, r31
    1b38:	50 e0       	ldi	r21, 0x00	; 0
    1b3a:	84 e0       	ldi	r24, 0x04	; 4
    1b3c:	55 95       	asr	r21
    1b3e:	47 95       	ror	r20
    1b40:	8a 95       	dec	r24
    1b42:	e1 f7       	brne	.-8      	; 0x1b3c <_ZN9EtherCard6acceptEjj+0xda>
  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+4,2);
  EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN);
}

static word get_tcp_data_len() {
  int16_t i = (((int16_t)gPB[IP_TOTLEN_H_P])<<8)|gPB[IP_TOTLEN_L_P];
    1b44:	9a 2f       	mov	r25, r26
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	2b 2f       	mov	r18, r27
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	28 2b       	or	r18, r24
    1b4e:	39 2b       	or	r19, r25
  i -= IP_HEADER_LEN;
  i -= (gPB[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
    1b50:	ca 01       	movw	r24, r20
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	88 0f       	add	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	28 1b       	sub	r18, r24
    1b5c:	39 0b       	sbc	r19, r25
    1b5e:	24 51       	subi	r18, 0x14	; 20
    1b60:	30 40       	sbci	r19, 0x00	; 0
  if (i<=0)
    i = 0;
  return (word)i;
    1b62:	37 ff       	sbrs	r19, 7
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <_ZN9EtherCard6acceptEjj+0x108>
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
  if (gPB[TCP_DST_PORT_H_P] == (port >> 8) &&
      gPB[TCP_DST_PORT_L_P] == ((byte) port)) {
    if (gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V)
      make_tcp_synack_from_syn();
    else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V) {
      info_data_len = get_tcp_data_len();
    1b6a:	30 93 c8 02 	sts	0x02C8, r19
    1b6e:	20 93 c7 02 	sts	0x02C7, r18
      if (info_data_len > 0) {
    1b72:	23 2b       	or	r18, r19
    1b74:	69 f0       	breq	.+26     	; 0x1b90 <_ZN9EtherCard6acceptEjj+0x12e>
        len = TCP_DATA_START; // TCP_DATA_START is a formula
    1b76:	9a 01       	movw	r18, r20
    1b78:	22 0f       	add	r18, r18
    1b7a:	33 1f       	adc	r19, r19
    1b7c:	22 0f       	add	r18, r18
    1b7e:	33 1f       	adc	r19, r19
    1b80:	2e 5d       	subi	r18, 0xDE	; 222
    1b82:	3f 4f       	sbci	r19, 0xFF	; 255
        if (len <= plen - 8)
    1b84:	68 50       	subi	r22, 0x08	; 8
    1b86:	70 40       	sbci	r23, 0x00	; 0
    1b88:	62 17       	cp	r22, r18
    1b8a:	73 07       	cpc	r23, r19
    1b8c:	40 f0       	brcs	.+16     	; 0x1b9e <_ZN9EtherCard6acceptEjj+0x13c>
    1b8e:	09 c0       	rjmp	.+18     	; 0x1ba2 <_ZN9EtherCard6acceptEjj+0x140>
          return len;
      } else if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V)
    1b90:	e0 ff       	sbrs	r30, 0
    1b92:	05 c0       	rjmp	.+10     	; 0x1b9e <_ZN9EtherCard6acceptEjj+0x13c>
        make_tcp_ack_from_any(0,0);
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	60 e0       	ldi	r22, 0x00	; 0
    1b9a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_ZL21make_tcp_ack_from_anyih>
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    }
  }
  return 0;
}
    1ba2:	c9 01       	movw	r24, r18
    1ba4:	08 95       	ret

00001ba6 <_ZN9EtherCard11udpTransmitEj>:
  gPB[UDP_LEN_H_P] = 0;
  gPB[UDP_CHECKSUM_H_P] = 0;
  gPB[UDP_CHECKSUM_L_P] = 0;
}

void EtherCard::udpTransmit (word datalen) {
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	0f 92       	push	r0
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	8c 01       	movw	r16, r24
  gPB[IP_TOTLEN_H_P] = (IP_HEADER_LEN+UDP_HEADER_LEN+datalen) >> 8;
    1bb6:	04 5e       	subi	r16, 0xE4	; 228
    1bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bba:	10 93 57 03 	sts	0x0357, r17
    1bbe:	0c 51       	subi	r16, 0x1C	; 28
    1bc0:	10 40       	sbci	r17, 0x00	; 0
  gPB[IP_TOTLEN_L_P] = IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
    1bc2:	80 2f       	mov	r24, r16
    1bc4:	84 5e       	subi	r24, 0xE4	; 228
    1bc6:	80 93 58 03 	sts	0x0358, r24
  fill_ip_hdr_checksum();
    1bca:	89 83       	std	Y+1, r24	; 0x01
    1bcc:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZL20fill_ip_hdr_checksumv>
  gPB[UDP_LEN_H_P] = (UDP_HEADER_LEN+datalen) >>8;
    1bd0:	08 5f       	subi	r16, 0xF8	; 248
    1bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd4:	10 93 6d 03 	sts	0x036D, r17
  gPB[UDP_LEN_L_P] = UDP_HEADER_LEN+datalen;
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	84 51       	subi	r24, 0x14	; 20
    1bdc:	80 93 6e 03 	sts	0x036E, r24
  fill_checksum(UDP_CHECKSUM_H_P, IP_SRC_P, 16 + datalen,1);
    1be0:	08 5f       	subi	r16, 0xF8	; 248
    1be2:	1f 4f       	sbci	r17, 0xFF	; 255
    1be4:	88 e2       	ldi	r24, 0x28	; 40
    1be6:	6a e1       	ldi	r22, 0x1A	; 26
    1be8:	a8 01       	movw	r20, r16
    1bea:	21 e0       	ldi	r18, 0x01	; 1
    1bec:	0e 94 81 0b 	call	0x1702	; 0x1702 <_ZL13fill_checksumhhjh>
  packetSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen);
    1bf0:	c8 01       	movw	r24, r16
    1bf2:	4a 96       	adiw	r24, 0x1a	; 26
    1bf4:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <_ZN8ENC28J6010packetSendEj>
}
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	1f 91       	pop	r17
    1c00:	0f 91       	pop	r16
    1c02:	08 95       	ret

00001c04 <_ZN9EtherCard10packetLoopEj>:
    }
  }
  return 0;
}

word EtherCard::packetLoop (word plen) {
    1c04:	df 92       	push	r13
    1c06:	ef 92       	push	r14
    1c08:	ff 92       	push	r15
    1c0a:	0f 93       	push	r16
    1c0c:	1f 93       	push	r17
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	ec 01       	movw	r28, r24
  word len;

  if(using_dhcp){
    1c14:	80 91 9a 02 	lds	r24, 0x029A
    1c18:	88 23       	and	r24, r24
    1c1a:	19 f0       	breq	.+6      	; 0x1c22 <_ZN9EtherCard10packetLoopEj+0x1e>
    ether.DhcpStateMachine(plen);
    1c1c:	ce 01       	movw	r24, r28
    1c1e:	0e 94 3a 06 	call	0xc74	; 0xc74 <_ZN9EtherCard16DhcpStateMachineEj>
  }

  if (plen==0) {
    1c22:	20 97       	sbiw	r28, 0x00	; 0
    1c24:	09 f0       	breq	.+2      	; 0x1c28 <_ZN9EtherCard10packetLoopEj+0x24>
    1c26:	bf c0       	rjmp	.+382    	; 0x1da6 <_ZN9EtherCard10packetLoopEj+0x1a2>
    if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
    1c28:	80 91 b6 02 	lds	r24, 0x02B6
    1c2c:	85 70       	andi	r24, 0x05	; 5
    1c2e:	f1 f1       	breq	.+124    	; 0x1cac <_ZN9EtherCard10packetLoopEj+0xa8>
    1c30:	80 91 ab 01 	lds	r24, 0x01AB
    1c34:	90 91 ac 01 	lds	r25, 0x01AC
    1c38:	89 2b       	or	r24, r25
    1c3a:	c1 f5       	brne	.+112    	; 0x1cac <_ZN9EtherCard10packetLoopEj+0xa8>
    1c3c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_ZN8ENC28J608isLinkUpEv>
    1c40:	88 23       	and	r24, r24
    1c42:	a1 f1       	breq	.+104    	; 0x1cac <_ZN9EtherCard10packetLoopEj+0xa8>
  packetSend(pos + 6);
}

// make a arp request
static void client_arp_whohas(byte *ip_we_search) {
  setMACs(allOnes);
    1c44:	84 ec       	ldi	r24, 0xC4	; 196
    1c46:	91 e0       	ldi	r25, 0x01	; 1
    1c48:	0e 94 32 0c 	call	0x1864	; 0x1864 <_ZL7setMACsPKh>
  gPB[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
    1c4c:	88 e0       	ldi	r24, 0x08	; 8
    1c4e:	80 93 53 03 	sts	0x0353, r24
  gPB[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
    1c52:	a6 e0       	ldi	r26, 0x06	; 6
    1c54:	fa 2e       	mov	r15, r26
    1c56:	f0 92 54 03 	sts	0x0354, r15
  memcpy_P(gPB + ETH_ARP_P,arpreqhdr,8);
    1c5a:	85 e5       	ldi	r24, 0x55	; 85
    1c5c:	93 e0       	ldi	r25, 0x03	; 3
    1c5e:	68 e6       	ldi	r22, 0x68	; 104
    1c60:	70 e0       	ldi	r23, 0x00	; 0
    1c62:	48 e0       	ldi	r20, 0x08	; 8
    1c64:	50 e0       	ldi	r21, 0x00	; 0
    1c66:	0e 94 40 01 	call	0x280	; 0x280 <memcpy_P>
  memset(gPB + ETH_ARP_DST_MAC_P, 0, 6);
    1c6a:	07 e6       	ldi	r16, 0x67	; 103
    1c6c:	13 e0       	ldi	r17, 0x03	; 3
    1c6e:	d8 01       	movw	r26, r16
    1c70:	1d 92       	st	X+, r1
    1c72:	fa 94       	dec	r15
    1c74:	e9 f7       	brne	.-6      	; 0x1c70 <_ZN9EtherCard10packetLoopEj+0x6c>
  EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
    1c76:	c8 01       	movw	r24, r16
    1c78:	0a 97       	sbiw	r24, 0x0a	; 10
    1c7a:	6c e7       	ldi	r22, 0x7C	; 124
    1c7c:	72 e0       	ldi	r23, 0x02	; 2
    1c7e:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN9EtherCard7copyMacEPhPKh>
  EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, ip_we_search);
    1c82:	c8 01       	movw	r24, r16
    1c84:	06 96       	adiw	r24, 0x06	; 6
    1c86:	6a e8       	ldi	r22, 0x8A	; 138
    1c88:	72 e0       	ldi	r23, 0x02	; 2
    1c8a:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN9EtherCard6copyIpEPhPKh>
  EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    1c8e:	c8 01       	movw	r24, r16
    1c90:	04 97       	sbiw	r24, 0x04	; 4
    1c92:	62 e8       	ldi	r22, 0x82	; 130
    1c94:	72 e0       	ldi	r23, 0x02	; 2
    1c96:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN9EtherCard6copyIpEPhPKh>
  waitgwmac |= WGW_ACCEPT_ARP_REPLY;
    1c9a:	80 91 b6 02 	lds	r24, 0x02B6
    1c9e:	88 60       	ori	r24, 0x08	; 8
    1ca0:	80 93 b6 02 	sts	0x02B6, r24
  EtherCard::packetSend(42);
    1ca4:	8a e2       	ldi	r24, 0x2A	; 42
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <_ZN8ENC28J6010packetSendEj>

  if (plen==0) {
    if ((waitgwmac & WGW_INITIAL_ARP || waitgwmac & WGW_REFRESHING) &&
                                          delaycnt==0 && isLinkUp())
      client_arp_whohas(gwip);
    delaycnt++;
    1cac:	80 91 ab 01 	lds	r24, 0x01AB
    1cb0:	90 91 ac 01 	lds	r25, 0x01AC
    1cb4:	01 96       	adiw	r24, 0x01	; 1
    1cb6:	90 93 ac 01 	sts	0x01AC, r25
    1cba:	80 93 ab 01 	sts	0x01AB, r24
    if (tcp_client_state==1 && (waitgwmac & WGW_HAVE_GW_MAC)) { // send a syn
    1cbe:	80 91 b7 02 	lds	r24, 0x02B7
    1cc2:	81 30       	cpi	r24, 0x01	; 1
    1cc4:	09 f0       	breq	.+2      	; 0x1cc8 <_ZN9EtherCard10packetLoopEj+0xc4>
    1cc6:	ef c1       	rjmp	.+990    	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>
    1cc8:	80 91 b6 02 	lds	r24, 0x02B6
    1ccc:	81 ff       	sbrs	r24, 1
    1cce:	eb c1       	rjmp	.+982    	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>
      tcp_client_state = 2;
    1cd0:	02 e0       	ldi	r16, 0x02	; 2
    1cd2:	00 93 b7 02 	sts	0x02B7, r16
      tcpclient_src_port_l++; // allocate a new port
    1cd6:	80 91 ad 01 	lds	r24, 0x01AD
    1cda:	8f 5f       	subi	r24, 0xFF	; 255
    1cdc:	80 93 ad 01 	sts	0x01AD, r24
      client_syn(((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
    1ce0:	8f 71       	andi	r24, 0x1F	; 31
    1ce2:	10 91 b8 02 	lds	r17, 0x02B8
    1ce6:	12 95       	swap	r17
    1ce8:	11 0f       	add	r17, r17
    1cea:	10 7e       	andi	r17, 0xE0	; 224
    1cec:	18 2b       	or	r17, r24
    1cee:	e0 90 b9 02 	lds	r14, 0x02B9
    1cf2:	d0 90 ba 02 	lds	r13, 0x02BA
  waitgwmac = WGW_INITIAL_ARP; // causes an arp request in the packet loop
  copyIp(gwip, gwipaddr);
}

static void client_syn(byte srcport,byte dstport_h,byte dstport_l) {
  setMACandIPs(gwmacaddr, EtherCard::hisip);
    1cf6:	81 ec       	ldi	r24, 0xC1	; 193
    1cf8:	92 e0       	ldi	r25, 0x02	; 2
    1cfa:	66 e9       	ldi	r22, 0x96	; 150
    1cfc:	72 e0       	ldi	r23, 0x02	; 2
    1cfe:	0e 94 43 0c 	call	0x1886	; 0x1886 <_ZL12setMACandIPsPKhS0_>
  gPB[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
    1d02:	f8 e0       	ldi	r31, 0x08	; 8
    1d04:	ff 2e       	mov	r15, r31
    1d06:	f0 92 53 03 	sts	0x0353, r15
  gPB[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
    1d0a:	10 92 54 03 	sts	0x0354, r1
  memcpy_P(gPB + IP_P,iphdr,9);
    1d0e:	85 e5       	ldi	r24, 0x55	; 85
    1d10:	93 e0       	ldi	r25, 0x03	; 3
    1d12:	60 e7       	ldi	r22, 0x70	; 112
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	49 e0       	ldi	r20, 0x09	; 9
    1d18:	50 e0       	ldi	r21, 0x00	; 0
    1d1a:	0e 94 40 01 	call	0x280	; 0x280 <memcpy_P>
  gPB[IP_TOTLEN_L_P] = 44; // good for syn
    1d1e:	8c e2       	ldi	r24, 0x2C	; 44
    1d20:	80 93 58 03 	sts	0x0358, r24
  gPB[IP_PROTO_P] = IP_PROTO_TCP_V;
    1d24:	86 e0       	ldi	r24, 0x06	; 6
    1d26:	80 93 5e 03 	sts	0x035E, r24
  fill_ip_hdr_checksum();
    1d2a:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZL20fill_ip_hdr_checksumv>
  gPB[TCP_DST_PORT_H_P] = dstport_h;
    1d2e:	e0 92 6b 03 	sts	0x036B, r14
  gPB[TCP_DST_PORT_L_P] = dstport_l;
    1d32:	d0 92 6c 03 	sts	0x036C, r13
  gPB[TCP_SRC_PORT_H_P] = TCPCLIENT_SRC_PORT_H;
    1d36:	8b e0       	ldi	r24, 0x0B	; 11
    1d38:	80 93 69 03 	sts	0x0369, r24
  gPB[TCP_SRC_PORT_L_P] = srcport; // lower 8 bit of src port
    1d3c:	10 93 6a 03 	sts	0x036A, r17
  memset(gPB + TCP_SEQ_H_P, 0, 8);
    1d40:	ed e6       	ldi	r30, 0x6D	; 109
    1d42:	f3 e0       	ldi	r31, 0x03	; 3
    1d44:	df 01       	movw	r26, r30
    1d46:	1d 92       	st	X+, r1
    1d48:	fa 94       	dec	r15
    1d4a:	e9 f7       	brne	.-6      	; 0x1d46 <_ZN9EtherCard10packetLoopEj+0x142>
  gPB[TCP_SEQ_H_P+2] = seqnum; 
    1d4c:	80 91 ae 01 	lds	r24, 0x01AE
    1d50:	80 93 6f 03 	sts	0x036F, r24
  seqnum += 3;
    1d54:	8d 5f       	subi	r24, 0xFD	; 253
    1d56:	80 93 ae 01 	sts	0x01AE, r24
  gPB[TCP_HEADER_LEN_P] = 0x60; // 0x60=24 len: (0x60>>4) * 4
    1d5a:	80 e6       	ldi	r24, 0x60	; 96
    1d5c:	80 93 75 03 	sts	0x0375, r24
  gPB[TCP_FLAGS_P] = TCP_FLAGS_SYN_V;
    1d60:	00 93 76 03 	sts	0x0376, r16
  gPB[TCP_WIN_SIZE] = 0x3; // 1024 = 0x400 768 = 0x300, initial window
    1d64:	83 e0       	ldi	r24, 0x03	; 3
    1d66:	80 93 77 03 	sts	0x0377, r24
  gPB[TCP_WIN_SIZE+1] = 0x0;
    1d6a:	10 92 78 03 	sts	0x0378, r1
  gPB[TCP_CHECKSUM_H_P] = 0;
    1d6e:	10 92 79 03 	sts	0x0379, r1
  gPB[TCP_CHECKSUM_L_P] = 0;
    1d72:	10 92 7a 03 	sts	0x037A, r1
  gPB[TCP_CHECKSUM_L_P+1] = 0;
    1d76:	10 92 7b 03 	sts	0x037B, r1
  gPB[TCP_CHECKSUM_L_P+2] = 0;
    1d7a:	10 92 7c 03 	sts	0x037C, r1
  gPB[TCP_OPTIONS_P] = 2;
    1d7e:	00 93 7d 03 	sts	0x037D, r16
  gPB[TCP_OPTIONS_P+1] = 4;
    1d82:	84 e0       	ldi	r24, 0x04	; 4
    1d84:	80 93 7e 03 	sts	0x037E, r24
  gPB[TCP_OPTIONS_P+2] = (CLIENTMSS>>8);
    1d88:	00 93 7f 03 	sts	0x037F, r16
  gPB[TCP_OPTIONS_P+3] = (byte) CLIENTMSS;
    1d8c:	86 e2       	ldi	r24, 0x26	; 38
    1d8e:	80 93 80 03 	sts	0x0380, r24
  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8 +TCP_HEADER_LEN_PLAIN+4,2);
    1d92:	82 e3       	ldi	r24, 0x32	; 50
    1d94:	6a e1       	ldi	r22, 0x1A	; 26
    1d96:	40 e2       	ldi	r20, 0x20	; 32
    1d98:	50 e0       	ldi	r21, 0x00	; 0
    1d9a:	22 e0       	ldi	r18, 0x02	; 2
    1d9c:	0e 94 81 0b 	call	0x1702	; 0x1702 <_ZL13fill_checksumhhjh>
  // 4 is the tcp mss option:
  EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4);
    1da0:	8a e3       	ldi	r24, 0x3A	; 58
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	9b c0       	rjmp	.+310    	; 0x1edc <_ZN9EtherCard10packetLoopEj+0x2d8>
}

static byte eth_type_is_arp_and_my_ip(word len) {
  return len >= 41 && gPB[ETH_TYPE_H_P] == ETHTYPE_ARP_H_V &&
                      gPB[ETH_TYPE_L_P] == ETHTYPE_ARP_L_V &&
                      memcmp(gPB + ETH_ARP_DST_IP_P, EtherCard::myip, 4) == 0;
    1da6:	c9 32       	cpi	r28, 0x29	; 41
    1da8:	d1 05       	cpc	r29, r1
    1daa:	08 f4       	brcc	.+2      	; 0x1dae <_ZN9EtherCard10packetLoopEj+0x1aa>
    1dac:	7c c1       	rjmp	.+760    	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>
    1dae:	10 91 53 03 	lds	r17, 0x0353
    1db2:	18 30       	cpi	r17, 0x08	; 8
    1db4:	09 f0       	breq	.+2      	; 0x1db8 <_ZN9EtherCard10packetLoopEj+0x1b4>
    1db6:	82 c1       	rjmp	.+772    	; 0x20bc <_ZN9EtherCard10packetLoopEj+0x4b8>
    1db8:	80 91 54 03 	lds	r24, 0x0354
    1dbc:	86 30       	cpi	r24, 0x06	; 6
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <_ZN9EtherCard10packetLoopEj+0x1be>
    1dc0:	7d c1       	rjmp	.+762    	; 0x20bc <_ZN9EtherCard10packetLoopEj+0x4b8>
    1dc2:	8d e6       	ldi	r24, 0x6D	; 109
    1dc4:	93 e0       	ldi	r25, 0x03	; 3
    1dc6:	62 e8       	ldi	r22, 0x82	; 130
    1dc8:	72 e0       	ldi	r23, 0x02	; 2
    1dca:	44 e0       	ldi	r20, 0x04	; 4
    1dcc:	50 e0       	ldi	r21, 0x00	; 0
    1dce:	0e 94 52 01 	call	0x2a4	; 0x2a4 <memcmp>
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	09 f0       	breq	.+2      	; 0x1dd8 <_ZN9EtherCard10packetLoopEj+0x1d4>
    1dd6:	72 c1       	rjmp	.+740    	; 0x20bc <_ZN9EtherCard10packetLoopEj+0x4b8>
      client_syn(((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
    }
    return 0;
  }
  if (eth_type_is_arp_and_my_ip(plen)) {
    if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
    1dd8:	80 91 5c 03 	lds	r24, 0x035C
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	29 f5       	brne	.+74     	; 0x1e2a <_ZN9EtherCard10packetLoopEj+0x226>
  gPB[TCP_CHECKSUM_L_P] = 0;
  gPB[TCP_HEADER_LEN_P] = 0x50;
}

static void make_arp_answer_from_request() {
  setMACs(gPB + ETH_SRC_MAC);
    1de0:	8d e4       	ldi	r24, 0x4D	; 77
    1de2:	93 e0       	ldi	r25, 0x03	; 3
    1de4:	0e 94 32 0c 	call	0x1864	; 0x1864 <_ZL7setMACsPKh>
  gPB[ETH_ARP_OPCODE_H_P] = ETH_ARP_OPCODE_REPLY_H_V;
    1de8:	10 92 5b 03 	sts	0x035B, r1
  gPB[ETH_ARP_OPCODE_L_P] = ETH_ARP_OPCODE_REPLY_L_V;
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	80 93 5c 03 	sts	0x035C, r24
  EtherCard::copyMac(gPB + ETH_ARP_DST_MAC_P, gPB + ETH_ARP_SRC_MAC_P);
    1df2:	87 e6       	ldi	r24, 0x67	; 103
    1df4:	93 e0       	ldi	r25, 0x03	; 3
    1df6:	6d e5       	ldi	r22, 0x5D	; 93
    1df8:	73 e0       	ldi	r23, 0x03	; 3
    1dfa:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN9EtherCard7copyMacEPhPKh>
  EtherCard::copyMac(gPB + ETH_ARP_SRC_MAC_P, EtherCard::mymac);
    1dfe:	8d e5       	ldi	r24, 0x5D	; 93
    1e00:	93 e0       	ldi	r25, 0x03	; 3
    1e02:	6c e7       	ldi	r22, 0x7C	; 124
    1e04:	72 e0       	ldi	r23, 0x02	; 2
    1e06:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN9EtherCard7copyMacEPhPKh>
  EtherCard::copyIp(gPB + ETH_ARP_DST_IP_P, gPB + ETH_ARP_SRC_IP_P);
    1e0a:	8d e6       	ldi	r24, 0x6D	; 109
    1e0c:	93 e0       	ldi	r25, 0x03	; 3
    1e0e:	63 e6       	ldi	r22, 0x63	; 99
    1e10:	73 e0       	ldi	r23, 0x03	; 3
    1e12:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN9EtherCard6copyIpEPhPKh>
  EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
    1e16:	83 e6       	ldi	r24, 0x63	; 99
    1e18:	93 e0       	ldi	r25, 0x03	; 3
    1e1a:	62 e8       	ldi	r22, 0x82	; 130
    1e1c:	72 e0       	ldi	r23, 0x02	; 2
    1e1e:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN9EtherCard6copyIpEPhPKh>
  EtherCard::packetSend(42); 
    1e22:	8a e2       	ldi	r24, 0x2A	; 42
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <_ZN8ENC28J6010packetSendEj>
    return 0;
  }
  if (eth_type_is_arp_and_my_ip(plen)) {
    if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
        make_arp_answer_from_request();
    if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_gw_mac())
    1e2a:	80 91 b6 02 	lds	r24, 0x02B6
    1e2e:	83 ff       	sbrs	r24, 3
    1e30:	3a c1       	rjmp	.+628    	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>
    1e32:	10 91 5c 03 	lds	r17, 0x035C
    1e36:	12 30       	cpi	r17, 0x02	; 2
    1e38:	09 f0       	breq	.+2      	; 0x1e3c <_ZN9EtherCard10packetLoopEj+0x238>
    1e3a:	35 c1       	rjmp	.+618    	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>
byte EtherCard::clientWaitingGw () {
  return !(waitgwmac & WGW_HAVE_GW_MAC);
}

static byte client_store_gw_mac() {
  if (memcmp(gPB + ETH_ARP_SRC_IP_P, EtherCard::gwip, 4) != 0)
    1e3c:	83 e6       	ldi	r24, 0x63	; 99
    1e3e:	93 e0       	ldi	r25, 0x03	; 3
    1e40:	6a e8       	ldi	r22, 0x8A	; 138
    1e42:	72 e0       	ldi	r23, 0x02	; 2
    1e44:	44 e0       	ldi	r20, 0x04	; 4
    1e46:	50 e0       	ldi	r21, 0x00	; 0
    1e48:	0e 94 52 01 	call	0x2a4	; 0x2a4 <memcmp>
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <_ZN9EtherCard10packetLoopEj+0x24e>
    1e50:	2a c1       	rjmp	.+596    	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>
    return 0;
  EtherCard::copyMac(gwmacaddr, gPB + ETH_ARP_SRC_MAC_P);
    1e52:	81 ec       	ldi	r24, 0xC1	; 193
    1e54:	92 e0       	ldi	r25, 0x02	; 2
    1e56:	6d e5       	ldi	r22, 0x5D	; 93
    1e58:	73 e0       	ldi	r23, 0x03	; 3
    1e5a:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN9EtherCard7copyMacEPhPKh>
  }
  if (eth_type_is_arp_and_my_ip(plen)) {
    if (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V)
        make_arp_answer_from_request();
    if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (gPB[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V) && client_store_gw_mac())
      waitgwmac = WGW_HAVE_GW_MAC;
    1e5e:	10 93 b6 02 	sts	0x02B6, r17
    1e62:	21 c1       	rjmp	.+578    	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>

static byte eth_type_is_ip_and_my_ip(word len) {
  return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
                      gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
                      gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
                      memcmp(gPB + IP_DST_P, EtherCard::myip, 4) == 0;
    1e64:	18 30       	cpi	r17, 0x08	; 8
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <_ZN9EtherCard10packetLoopEj+0x266>
    1e68:	1e c1       	rjmp	.+572    	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>
    1e6a:	80 91 54 03 	lds	r24, 0x0354
    1e6e:	88 23       	and	r24, r24
    1e70:	09 f0       	breq	.+2      	; 0x1e74 <_ZN9EtherCard10packetLoopEj+0x270>
    1e72:	19 c1       	rjmp	.+562    	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>
    1e74:	80 91 55 03 	lds	r24, 0x0355
    1e78:	85 34       	cpi	r24, 0x45	; 69
    1e7a:	09 f0       	breq	.+2      	; 0x1e7e <_ZN9EtherCard10packetLoopEj+0x27a>
    1e7c:	14 c1       	rjmp	.+552    	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>
    1e7e:	85 e6       	ldi	r24, 0x65	; 101
    1e80:	93 e0       	ldi	r25, 0x03	; 3
    1e82:	62 e8       	ldi	r22, 0x82	; 130
    1e84:	72 e0       	ldi	r23, 0x02	; 2
    1e86:	44 e0       	ldi	r20, 0x04	; 4
    1e88:	50 e0       	ldi	r21, 0x00	; 0
    1e8a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <memcmp>
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	09 f0       	breq	.+2      	; 0x1e94 <_ZN9EtherCard10packetLoopEj+0x290>
    1e92:	09 c1       	rjmp	.+530    	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>
    return 0;
  }
  if (eth_type_is_ip_and_my_ip(plen)==0) {
    return 0;
  }
  if (gPB[IP_PROTO_P]==IP_PROTO_ICMP_V && gPB[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V) {
    1e94:	80 91 5e 03 	lds	r24, 0x035E
    1e98:	81 30       	cpi	r24, 0x01	; 1
    1e9a:	19 f5       	brne	.+70     	; 0x1ee2 <_ZN9EtherCard10packetLoopEj+0x2de>
    1e9c:	80 91 69 03 	lds	r24, 0x0369
    1ea0:	88 30       	cpi	r24, 0x08	; 8
    1ea2:	f9 f4       	brne	.+62     	; 0x1ee2 <_ZN9EtherCard10packetLoopEj+0x2de>
    if (icmp_cb)
    1ea4:	e0 91 bb 02 	lds	r30, 0x02BB
    1ea8:	f0 91 bc 02 	lds	r31, 0x02BC
    1eac:	30 97       	sbiw	r30, 0x00	; 0
    1eae:	19 f0       	breq	.+6      	; 0x1eb6 <_ZN9EtherCard10packetLoopEj+0x2b2>
      (*icmp_cb)(&(gPB[IP_SRC_P]));
    1eb0:	81 e6       	ldi	r24, 0x61	; 97
    1eb2:	93 e0       	ldi	r25, 0x03	; 3
    1eb4:	09 95       	icall
  EtherCard::copyIp(gPB + ETH_ARP_SRC_IP_P, EtherCard::myip);
  EtherCard::packetSend(42); 
}

static void make_echo_reply_from_request(word len) {
  make_eth_ip();
    1eb6:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZL11make_eth_ipv>
  gPB[ICMP_TYPE_P] = ICMP_TYPE_ECHOREPLY_V;
    1eba:	10 92 69 03 	sts	0x0369, r1
  if (gPB[ICMP_CHECKSUM_P] > (0xFF-0x08))
    1ebe:	80 91 6b 03 	lds	r24, 0x036B
    1ec2:	88 3f       	cpi	r24, 0xF8	; 248
    1ec4:	28 f0       	brcs	.+10     	; 0x1ed0 <_ZN9EtherCard10packetLoopEj+0x2cc>
      gPB[ICMP_CHECKSUM_P+1]++;
    1ec6:	80 91 6c 03 	lds	r24, 0x036C
    1eca:	8f 5f       	subi	r24, 0xFF	; 255
    1ecc:	80 93 6c 03 	sts	0x036C, r24
  gPB[ICMP_CHECKSUM_P] += 0x08;
    1ed0:	80 91 6b 03 	lds	r24, 0x036B
    1ed4:	88 5f       	subi	r24, 0xF8	; 248
    1ed6:	80 93 6b 03 	sts	0x036B, r24
  EtherCard::packetSend(len);
    1eda:	ce 01       	movw	r24, r28
    1edc:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <_ZN8ENC28J6010packetSendEj>
    1ee0:	e2 c0       	rjmp	.+452    	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>
    if (icmp_cb)
      (*icmp_cb)(&(gPB[IP_SRC_P]));
    make_echo_reply_from_request(plen);
    return 0;
  }
  if (ether.udpServerListening() && gPB[IP_PROTO_P]==IP_PROTO_UDP_V) {
    1ee2:	0e 94 83 10 	call	0x2106	; 0x2106 <_ZN9EtherCard18udpServerListeningEv>
    1ee6:	88 23       	and	r24, r24
    1ee8:	51 f0       	breq	.+20     	; 0x1efe <_ZN9EtherCard10packetLoopEj+0x2fa>
    1eea:	80 91 5e 03 	lds	r24, 0x035E
    1eee:	81 31       	cpi	r24, 0x11	; 17
    1ef0:	31 f4       	brne	.+12     	; 0x1efe <_ZN9EtherCard10packetLoopEj+0x2fa>
  	if(ether.udpServerHasProcessedPacket(plen))
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZN9EtherCard27udpServerHasProcessedPacketEj>
    1ef8:	88 23       	and	r24, r24
    1efa:	09 f0       	breq	.+2      	; 0x1efe <_ZN9EtherCard10packetLoopEj+0x2fa>
    1efc:	d4 c0       	rjmp	.+424    	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>
	  	return 0;
  }
  if (plen<54 && gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
    1efe:	c6 33       	cpi	r28, 0x36	; 54
    1f00:	d1 05       	cpc	r29, r1
    1f02:	28 f4       	brcc	.+10     	; 0x1f0e <_ZN9EtherCard10packetLoopEj+0x30a>
    1f04:	80 91 5e 03 	lds	r24, 0x035E
    1f08:	86 30       	cpi	r24, 0x06	; 6
    1f0a:	09 f0       	breq	.+2      	; 0x1f0e <_ZN9EtherCard10packetLoopEj+0x30a>
    1f0c:	cc c0       	rjmp	.+408    	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>
    return 0;
  if ( gPB[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H) {
    1f0e:	80 91 6b 03 	lds	r24, 0x036B
    1f12:	8b 30       	cpi	r24, 0x0B	; 11
    1f14:	09 f0       	breq	.+2      	; 0x1f18 <_ZN9EtherCard10packetLoopEj+0x314>
    1f16:	be c0       	rjmp	.+380    	; 0x2094 <_ZN9EtherCard10packetLoopEj+0x490>
  EtherCard::copyIp(gPB + IP_DST_P, dst);
  EtherCard::copyIp(gPB + IP_SRC_P, EtherCard::myip);
}

static byte check_ip_message_is_from(const byte *ip) {
  return memcmp(gPB + IP_SRC_P, ip, 4) == 0;
    1f18:	81 e6       	ldi	r24, 0x61	; 97
    1f1a:	93 e0       	ldi	r25, 0x03	; 3
    1f1c:	66 e9       	ldi	r22, 0x96	; 150
    1f1e:	72 e0       	ldi	r23, 0x02	; 2
    1f20:	44 e0       	ldi	r20, 0x04	; 4
    1f22:	50 e0       	ldi	r21, 0x00	; 0
    1f24:	0e 94 52 01 	call	0x2a4	; 0x2a4 <memcmp>
	  	return 0;
  }
  if (plen<54 && gPB[IP_PROTO_P]!=IP_PROTO_TCP_V )
    return 0;
  if ( gPB[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H) {
    if (check_ip_message_is_from(hisip)==0)
    1f28:	00 97       	sbiw	r24, 0x00	; 0
    1f2a:	09 f0       	breq	.+2      	; 0x1f2e <_ZN9EtherCard10packetLoopEj+0x32a>
    1f2c:	bc c0       	rjmp	.+376    	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>
      return 0;
    if (gPB[TCP_FLAGS_P] & TCP_FLAGS_RST_V) {
    1f2e:	80 91 76 03 	lds	r24, 0x0376
    1f32:	38 2f       	mov	r19, r24
    1f34:	82 ff       	sbrs	r24, 2
    1f36:	13 c0       	rjmp	.+38     	; 0x1f5e <_ZN9EtherCard10packetLoopEj+0x35a>
      if (client_tcp_result_cb)
    1f38:	e0 91 bd 02 	lds	r30, 0x02BD
    1f3c:	f0 91 be 02 	lds	r31, 0x02BE
    1f40:	30 97       	sbiw	r30, 0x00	; 0
    1f42:	59 f0       	breq	.+22     	; 0x1f5a <_ZN9EtherCard10packetLoopEj+0x356>
        (*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
    1f44:	80 91 6c 03 	lds	r24, 0x036C
    1f48:	82 95       	swap	r24
    1f4a:	86 95       	lsr	r24
    1f4c:	87 70       	andi	r24, 0x07	; 7
    1f4e:	63 e0       	ldi	r22, 0x03	; 3
    1f50:	40 e0       	ldi	r20, 0x00	; 0
    1f52:	50 e0       	ldi	r21, 0x00	; 0
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	09 95       	icall
	  tcp_client_state = 5;
    1f5a:	85 e0       	ldi	r24, 0x05	; 5
    1f5c:	90 c0       	rjmp	.+288    	; 0x207e <_ZN9EtherCard10packetLoopEj+0x47a>
  fill_checksum(TCP_CHECKSUM_H_P, IP_SRC_P, 8+TCP_HEADER_LEN_PLAIN+4,2);
  EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN);
}

static word get_tcp_data_len() {
  int16_t i = (((int16_t)gPB[IP_TOTLEN_H_P])<<8)|gPB[IP_TOTLEN_L_P];
    1f5e:	90 91 57 03 	lds	r25, 0x0357
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	20 91 58 03 	lds	r18, 0x0358
    1f68:	02 2f       	mov	r16, r18
    1f6a:	10 e0       	ldi	r17, 0x00	; 0
    1f6c:	08 2b       	or	r16, r24
    1f6e:	19 2b       	or	r17, r25
  i -= IP_HEADER_LEN;
  i -= (gPB[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
    1f70:	80 91 75 03 	lds	r24, 0x0375
    1f74:	48 2f       	mov	r20, r24
    1f76:	50 e0       	ldi	r21, 0x00	; 0
    1f78:	e4 e0       	ldi	r30, 0x04	; 4
    1f7a:	55 95       	asr	r21
    1f7c:	47 95       	ror	r20
    1f7e:	ea 95       	dec	r30
    1f80:	e1 f7       	brne	.-8      	; 0x1f7a <_ZN9EtherCard10packetLoopEj+0x376>
  EtherCard::packetSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN);
}

static word get_tcp_data_len() {
  int16_t i = (((int16_t)gPB[IP_TOTLEN_H_P])<<8)|gPB[IP_TOTLEN_L_P];
  i -= IP_HEADER_LEN;
    1f82:	ca 01       	movw	r24, r20
    1f84:	88 0f       	add	r24, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	88 0f       	add	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	08 1b       	sub	r16, r24
    1f8e:	19 0b       	sbc	r17, r25
  i -= (gPB[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
    1f90:	04 51       	subi	r16, 0x14	; 20
    1f92:	10 40       	sbci	r17, 0x00	; 0
    1f94:	17 ff       	sbrs	r17, 7
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <_ZN9EtherCard10packetLoopEj+0x398>
    1f98:	00 e0       	ldi	r16, 0x00	; 0
    1f9a:	10 e0       	ldi	r17, 0x00	; 0
        (*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
	  tcp_client_state = 5;
      return 0;
    }
    len = get_tcp_data_len();
    if (tcp_client_state==2) {
    1f9c:	80 91 b7 02 	lds	r24, 0x02B7
    1fa0:	82 30       	cpi	r24, 0x02	; 2
    1fa2:	79 f5       	brne	.+94     	; 0x2002 <_ZN9EtherCard10packetLoopEj+0x3fe>
      if ((gPB[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (gPB[TCP_FLAGS_P] &TCP_FLAGS_ACK_V)) {
    1fa4:	31 ff       	sbrs	r19, 1
    1fa6:	21 c0       	rjmp	.+66     	; 0x1fea <_ZN9EtherCard10packetLoopEj+0x3e6>
    1fa8:	34 ff       	sbrs	r19, 4
    1faa:	1f c0       	rjmp	.+62     	; 0x1fea <_ZN9EtherCard10packetLoopEj+0x3e6>
        make_tcp_ack_from_any(0,0);
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	60 e0       	ldi	r22, 0x00	; 0
    1fb2:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_ZL21make_tcp_ack_from_anyih>
        gPB[TCP_FLAGS_P] = TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
    1fb6:	88 e1       	ldi	r24, 0x18	; 24
    1fb8:	80 93 76 03 	sts	0x0376, r24
        if (client_tcp_datafill_cb)
    1fbc:	e0 91 bf 02 	lds	r30, 0x02BF
    1fc0:	f0 91 c0 02 	lds	r31, 0x02C0
    1fc4:	30 97       	sbiw	r30, 0x00	; 0
    1fc6:	19 f4       	brne	.+6      	; 0x1fce <_ZN9EtherCard10packetLoopEj+0x3ca>
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	07 c0       	rjmp	.+14     	; 0x1fdc <_ZN9EtherCard10packetLoopEj+0x3d8>
          len = (*client_tcp_datafill_cb)((gPB[TCP_SRC_PORT_L_P]>>5)&0x7);
    1fce:	80 91 6a 03 	lds	r24, 0x036A
    1fd2:	82 95       	swap	r24
    1fd4:	86 95       	lsr	r24
    1fd6:	87 70       	andi	r24, 0x07	; 7
    1fd8:	09 95       	icall
    1fda:	9c 01       	movw	r18, r24
        else
          len = 0;
        tcp_client_state = 3;
    1fdc:	83 e0       	ldi	r24, 0x03	; 3
    1fde:	80 93 b7 02 	sts	0x02B7, r24
        make_tcp_ack_with_data_noflags(len);
    1fe2:	c9 01       	movw	r24, r18
    1fe4:	0e 94 ca 0c 	call	0x1994	; 0x1994 <_ZL30make_tcp_ack_with_data_noflagsj>
    1fe8:	5e c0       	rjmp	.+188    	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>
      }else{
        tcp_client_state = 1; // retry
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	80 93 b7 02 	sts	0x02B7, r24
        len++;
        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
    1ff0:	34 ff       	sbrs	r19, 4
    1ff2:	03 c0       	rjmp	.+6      	; 0x1ffa <_ZN9EtherCard10packetLoopEj+0x3f6>
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <_ZN9EtherCard10packetLoopEj+0x3fa>
          len = 0;
        tcp_client_state = 3;
        make_tcp_ack_with_data_noflags(len);
      }else{
        tcp_client_state = 1; // retry
        len++;
    1ffa:	c8 01       	movw	r24, r16
    1ffc:	01 96       	adiw	r24, 0x01	; 1
        if (gPB[TCP_FLAGS_P] & TCP_FLAGS_ACK_V)
          len = 0;
        make_tcp_ack_from_any(len,TCP_FLAGS_RST_V);
    1ffe:	64 e0       	ldi	r22, 0x04	; 4
    2000:	46 c0       	rjmp	.+140    	; 0x208e <_ZN9EtherCard10packetLoopEj+0x48a>
      }
      return 0;
    }
    if (tcp_client_state==3 && len>0) { 
    2002:	83 30       	cpi	r24, 0x03	; 3
    2004:	81 f5       	brne	.+96     	; 0x2066 <_ZN9EtherCard10packetLoopEj+0x462>
    2006:	01 15       	cp	r16, r1
    2008:	11 05       	cpc	r17, r1
    200a:	79 f1       	breq	.+94     	; 0x206a <_ZN9EtherCard10packetLoopEj+0x466>
	  if (client_tcp_result_cb) {
    200c:	e0 91 bd 02 	lds	r30, 0x02BD
    2010:	f0 91 be 02 	lds	r31, 0x02BE
    2014:	30 97       	sbiw	r30, 0x00	; 0
    2016:	49 f1       	breq	.+82     	; 0x206a <_ZN9EtherCard10packetLoopEj+0x466>
        word tcpstart = TCP_DATA_START; // TCP_DATA_START is a formula
    2018:	44 0f       	add	r20, r20
    201a:	55 1f       	adc	r21, r21
    201c:	44 0f       	add	r20, r20
    201e:	55 1f       	adc	r21, r21
    2020:	ce 01       	movw	r24, r28
    2022:	08 97       	sbiw	r24, 0x08	; 8
    2024:	4e 5d       	subi	r20, 0xDE	; 222
    2026:	5f 4f       	sbci	r21, 0xFF	; 255
    2028:	84 17       	cp	r24, r20
    202a:	95 07       	cpc	r25, r21
    202c:	08 f4       	brcc	.+2      	; 0x2030 <_ZN9EtherCard10packetLoopEj+0x42c>
    202e:	ac 01       	movw	r20, r24
        if (tcpstart>plen-8)
          tcpstart = plen-8; // dummy but save
        word save_len = len;
        if (tcpstart+len>plen)
    2030:	c8 01       	movw	r24, r16
    2032:	84 0f       	add	r24, r20
    2034:	95 1f       	adc	r25, r21
    2036:	c8 17       	cp	r28, r24
    2038:	d9 07       	cpc	r29, r25
    203a:	10 f0       	brcs	.+4      	; 0x2040 <_ZN9EtherCard10packetLoopEj+0x43c>
    203c:	98 01       	movw	r18, r16
    203e:	03 c0       	rjmp	.+6      	; 0x2046 <_ZN9EtherCard10packetLoopEj+0x442>
          save_len = plen-tcpstart;
    2040:	9e 01       	movw	r18, r28
    2042:	24 1b       	sub	r18, r20
    2044:	35 0b       	sbc	r19, r21
        (*client_tcp_result_cb)((gPB[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
    2046:	80 91 6c 03 	lds	r24, 0x036C
    204a:	82 95       	swap	r24
    204c:	86 95       	lsr	r24
    204e:	87 70       	andi	r24, 0x07	; 7
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	09 95       	icall

        if(persist_tcp_connection){
    2054:	80 91 9b 02 	lds	r24, 0x029B
    2058:	88 23       	and	r24, r24
    205a:	19 f0       	breq	.+6      	; 0x2062 <_ZN9EtherCard10packetLoopEj+0x45e>
            make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V);
    205c:	c8 01       	movw	r24, r16
    205e:	68 e0       	ldi	r22, 0x08	; 8
    2060:	16 c0       	rjmp	.+44     	; 0x208e <_ZN9EtherCard10packetLoopEj+0x48a>
        }
        else{
		    make_tcp_ack_from_any(len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    2062:	c8 01       	movw	r24, r16
    2064:	08 c0       	rjmp	.+16     	; 0x2076 <_ZN9EtherCard10packetLoopEj+0x472>
            tcp_client_state = 6;
        }
        return 0;
      }
    }
    if (tcp_client_state != 5) {
    2066:	85 30       	cpi	r24, 0x05	; 5
    2068:	f1 f0       	breq	.+60     	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>
      if (gPB[TCP_FLAGS_P] & TCP_FLAGS_FIN_V) {
    206a:	30 ff       	sbrs	r19, 0
    206c:	0b c0       	rjmp	.+22     	; 0x2084 <_ZN9EtherCard10packetLoopEj+0x480>
	    if(tcp_client_state == 3) {
    206e:	83 30       	cpi	r24, 0x03	; 3
    2070:	d1 f0       	breq	.+52     	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>
			return 0; // In some instances FIN is received *before* DATA.  If that is the case, we just return here and keep looking for the data packet
		}
        make_tcp_ack_from_any(len+1,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    2072:	c8 01       	movw	r24, r16
    2074:	01 96       	adiw	r24, 0x01	; 1
    2076:	69 e0       	ldi	r22, 0x09	; 9
    2078:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_ZL21make_tcp_ack_from_anyih>
        tcp_client_state = 6; // connection terminated
    207c:	86 e0       	ldi	r24, 0x06	; 6
    207e:	80 93 b7 02 	sts	0x02B7, r24
    2082:	11 c0       	rjmp	.+34     	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>
      } else if (len>0) {
    2084:	01 15       	cp	r16, r1
    2086:	11 05       	cpc	r17, r1
    2088:	71 f0       	breq	.+28     	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>
        make_tcp_ack_from_any(len,0);
    208a:	c8 01       	movw	r24, r16
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_ZL21make_tcp_ack_from_anyih>
    2092:	09 c0       	rjmp	.+18     	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>
	  }
    }
    return 0;
  }

  return accept(hisport, plen);
    2094:	80 91 92 01 	lds	r24, 0x0192
    2098:	90 91 93 01 	lds	r25, 0x0193
    209c:	be 01       	movw	r22, r28
    209e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <_ZN9EtherCard6acceptEjj>
    20a2:	9c 01       	movw	r18, r24
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <_ZN9EtherCard10packetLoopEj+0x4a6>
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
}
    20aa:	c9 01       	movw	r24, r18
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	1f 91       	pop	r17
    20b2:	0f 91       	pop	r16
    20b4:	ff 90       	pop	r15
    20b6:	ef 90       	pop	r14
    20b8:	df 90       	pop	r13
    20ba:	08 95       	ret

static byte eth_type_is_ip_and_my_ip(word len) {
  return len >= 42 && gPB[ETH_TYPE_H_P] == ETHTYPE_IP_H_V &&
                      gPB[ETH_TYPE_L_P] == ETHTYPE_IP_L_V &&
                      gPB[IP_HEADER_LEN_VER_P] == 0x45 &&
                      memcmp(gPB + IP_DST_P, EtherCard::myip, 4) == 0;
    20bc:	ca 32       	cpi	r28, 0x2A	; 42
    20be:	d1 05       	cpc	r29, r1
    20c0:	08 f0       	brcs	.+2      	; 0x20c4 <_ZN9EtherCard10packetLoopEj+0x4c0>
    20c2:	d0 ce       	rjmp	.-608    	; 0x1e64 <_ZN9EtherCard10packetLoopEj+0x260>
    20c4:	f0 cf       	rjmp	.-32     	; 0x20a6 <_ZN9EtherCard10packetLoopEj+0x4a2>

000020c6 <_ZL15tcp_datafill_cbh>:
  client_postval = postval;
  client_browser_cb = callback;
  www_fd = clientTcpReq(&www_client_internal_result_cb,&www_client_internal_datafill_cb,hisport);
}

static word tcp_datafill_cb(byte fd) {
    20c6:	ef 92       	push	r14
    20c8:	ff 92       	push	r15
    20ca:	0f 93       	push	r16
    20cc:	1f 93       	push	r17
  word len = Stash::length();
    20ce:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN5Stash6lengthEv>
    20d2:	8c 01       	movw	r16, r24
  Stash::extract(0, len, EtherCard::tcpOffset());
    20d4:	bd e7       	ldi	r27, 0x7D	; 125
    20d6:	eb 2e       	mov	r14, r27
    20d8:	b3 e0       	ldi	r27, 0x03	; 3
    20da:	fb 2e       	mov	r15, r27
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	b8 01       	movw	r22, r16
    20e2:	a7 01       	movw	r20, r14
    20e4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN5Stash7extractEjjPv>
  Stash::cleanup();
    20e8:	0e 94 3a 03 	call	0x674	; 0x674 <_ZN5Stash7cleanupEv>
  EtherCard::tcpOffset()[len] = 0;
    20ec:	e0 0e       	add	r14, r16
    20ee:	f1 1e       	adc	r15, r17
    20f0:	f7 01       	movw	r30, r14
    20f2:	10 82       	st	Z, r1
#if SERIAL
  Serial.print("REQUEST: ");
  Serial.println(len);
  Serial.println((char*) EtherCard::tcpOffset());
#endif
  result_fd = 123; // bogus value
    20f4:	8b e7       	ldi	r24, 0x7B	; 123
    20f6:	80 93 af 01 	sts	0x01AF, r24
  return len;
}
    20fa:	c8 01       	movw	r24, r16
    20fc:	1f 91       	pop	r17
    20fe:	0f 91       	pop	r16
    2100:	ff 90       	pop	r15
    2102:	ef 90       	pop	r14
    2104:	08 95       	ret

00002106 <_ZN9EtherCard18udpServerListeningEv>:

bool EtherCard::udpServerListening() {
    2106:	80 91 f4 02 	lds	r24, 0x02F4
    210a:	81 11       	cpse	r24, r1
    210c:	81 e0       	ldi	r24, 0x01	; 1
	return numListeners > 0;
}
    210e:	08 95       	ret

00002110 <_ZN9EtherCard27udpServerHasProcessedPacketEj>:

bool EtherCard::udpServerHasProcessedPacket(word plen) {
    2110:	cf 92       	push	r12
    2112:	df 92       	push	r13
    2114:	ef 92       	push	r14
    2116:	ff 92       	push	r15
    2118:	0f 93       	push	r16
    211a:	1f 93       	push	r17
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
    2120:	cc ec       	ldi	r28, 0xCC	; 204
    2122:	d2 e0       	ldi	r29, 0x02	; 2
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	cc 24       	eor	r12, r12
    2128:	dd 24       	eor	r13, r13
    212a:	29 c0       	rjmp	.+82     	; 0x217e <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x6e>
	bool packetProcessed = false;
	for(int i = 0; i < numListeners; i++)
	{
		if(gPB[UDP_DST_PORT_H_P] == (listeners[i].port >> 8) && gPB[UDP_DST_PORT_L_P] == ((byte) listeners[i].port) && listeners[i].listening)
    212c:	2a 81       	ldd	r18, Y+2	; 0x02
    212e:	4b 81       	ldd	r20, Y+3	; 0x03
    2130:	80 91 6b 03 	lds	r24, 0x036B
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	04 2f       	mov	r16, r20
    2138:	10 e0       	ldi	r17, 0x00	; 0
    213a:	80 17       	cp	r24, r16
    213c:	91 07       	cpc	r25, r17
    213e:	d9 f4       	brne	.+54     	; 0x2176 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x66>
    2140:	90 91 6c 03 	lds	r25, 0x036C
    2144:	92 17       	cp	r25, r18
    2146:	b9 f4       	brne	.+46     	; 0x2176 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x66>
    2148:	8c 81       	ldd	r24, Y+4	; 0x04
    214a:	88 23       	and	r24, r24
    214c:	a1 f0       	breq	.+40     	; 0x2176 <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x66>
			uint16_t datalen = (uint16_t) (gPB[UDP_LEN_H_P] << 8)  + gPB[UDP_LEN_L_P] - UDP_HEADER_LEN;
			listeners[i].callback(
				listeners[i].port,
				gPB + IP_SRC_P,
				(const char *) (gPB + UDP_DATA_P),
				datalen);
    214e:	20 91 6e 03 	lds	r18, 0x036E
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	28 50       	subi	r18, 0x08	; 8
    2156:	30 40       	sbci	r19, 0x00	; 0
    2158:	f0 90 6d 03 	lds	r15, 0x036D
    215c:	ee 24       	eor	r14, r14
    215e:	2e 0d       	add	r18, r14
    2160:	3f 1d       	adc	r19, r15
    2162:	e8 81       	ld	r30, Y
    2164:	f9 81       	ldd	r31, Y+1	; 0x01
    2166:	89 2f       	mov	r24, r25
    2168:	94 2f       	mov	r25, r20
    216a:	61 e6       	ldi	r22, 0x61	; 97
    216c:	73 e0       	ldi	r23, 0x03	; 3
    216e:	41 e7       	ldi	r20, 0x71	; 113
    2170:	53 e0       	ldi	r21, 0x03	; 3
    2172:	09 95       	icall
    2174:	31 e0       	ldi	r19, 0x01	; 1
	return numListeners > 0;
}

bool EtherCard::udpServerHasProcessedPacket(word plen) {
	bool packetProcessed = false;
	for(int i = 0; i < numListeners; i++)
    2176:	08 94       	sec
    2178:	c1 1c       	adc	r12, r1
    217a:	d1 1c       	adc	r13, r1
    217c:	25 96       	adiw	r28, 0x05	; 5
    217e:	80 91 f4 02 	lds	r24, 0x02F4
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	c8 16       	cp	r12, r24
    2186:	d9 06       	cpc	r13, r25
    2188:	8c f2       	brlt	.-94     	; 0x212c <_ZN9EtherCard27udpServerHasProcessedPacketEj+0x1c>
				datalen);
			packetProcessed = true;
		}
	}
	return packetProcessed;
}
    218a:	83 2f       	mov	r24, r19
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	1f 91       	pop	r17
    2192:	0f 91       	pop	r16
    2194:	ff 90       	pop	r15
    2196:	ef 90       	pop	r14
    2198:	df 90       	pop	r13
    219a:	cf 90       	pop	r12
    219c:	08 95       	ret

0000219e <_ZN9EtherCard7printIpEPKh>:
	Serial.print(ifsh);
	EtherCard::printIp(buf);
	Serial.println();
}

void EtherCard::printIp (const byte *buf) {
    219e:	0f 93       	push	r16
    21a0:	1f 93       	push	r17
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29
    21a6:	8c 01       	movw	r16, r24
    21a8:	c0 e0       	ldi	r28, 0x00	; 0
    21aa:	d0 e0       	ldi	r29, 0x00	; 0
	for (byte i = 0; i < 4; ++i) {
		Serial.print( buf[i], DEC );
    21ac:	f8 01       	movw	r30, r16
    21ae:	ec 0f       	add	r30, r28
    21b0:	fd 1f       	adc	r31, r29
    21b2:	88 e9       	ldi	r24, 0x98	; 152
    21b4:	96 e0       	ldi	r25, 0x06	; 6
    21b6:	60 81       	ld	r22, Z
    21b8:	4a e0       	ldi	r20, 0x0A	; 10
    21ba:	50 e0       	ldi	r21, 0x00	; 0
    21bc:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <_ZN5Print5printEhi>
		if (i < 3)
    21c0:	c3 30       	cpi	r28, 0x03	; 3
    21c2:	29 f0       	breq	.+10     	; 0x21ce <_ZN9EtherCard7printIpEPKh+0x30>
			Serial.print('.');
    21c4:	88 e9       	ldi	r24, 0x98	; 152
    21c6:	96 e0       	ldi	r25, 0x06	; 6
    21c8:	6e e2       	ldi	r22, 0x2E	; 46
    21ca:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <_ZN5Print5printEc>
    21ce:	21 96       	adiw	r28, 0x01	; 1
	EtherCard::printIp(buf);
	Serial.println();
}

void EtherCard::printIp (const byte *buf) {
	for (byte i = 0; i < 4; ++i) {
    21d0:	c4 30       	cpi	r28, 0x04	; 4
    21d2:	d1 05       	cpc	r29, r1
    21d4:	59 f7       	brne	.-42     	; 0x21ac <_ZN9EtherCard7printIpEPKh+0xe>
		Serial.print( buf[i], DEC );
		if (i < 3)
			Serial.print('.');
	}
}
    21d6:	df 91       	pop	r29
    21d8:	cf 91       	pop	r28
    21da:	1f 91       	pop	r17
    21dc:	0f 91       	pop	r16
    21de:	08 95       	ret

000021e0 <_ZN9EtherCard7printIpEPKcPKh>:

void EtherCard::copyMac (byte *dst, const byte *src) {
    memcpy(dst, src, 6);
}

void EtherCard::printIp (const char* msg, const byte *buf) {
    21e0:	ef 92       	push	r14
    21e2:	ff 92       	push	r15
    21e4:	0f 93       	push	r16
    21e6:	1f 93       	push	r17
    21e8:	9c 01       	movw	r18, r24
    21ea:	7b 01       	movw	r14, r22
    Serial.print(msg);
    21ec:	08 e9       	ldi	r16, 0x98	; 152
    21ee:	16 e0       	ldi	r17, 0x06	; 6
    21f0:	c8 01       	movw	r24, r16
    21f2:	b9 01       	movw	r22, r18
    21f4:	0e 94 16 18 	call	0x302c	; 0x302c <_ZN5Print5printEPKc>
    EtherCard::printIp(buf);
    21f8:	c7 01       	movw	r24, r14
    21fa:	0e 94 cf 10 	call	0x219e	; 0x219e <_ZN9EtherCard7printIpEPKh>
    Serial.println();
    21fe:	c8 01       	movw	r24, r16
    2200:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <_ZN5Print7printlnEv>
}
    2204:	1f 91       	pop	r17
    2206:	0f 91       	pop	r16
    2208:	ff 90       	pop	r15
    220a:	ef 90       	pop	r14
    220c:	08 95       	ret

0000220e <_ZN9EtherCard7copyMacEPhPKh>:
void EtherCard::copyIp (byte *dst, const byte *src) {
    memcpy(dst, src, 4);
}

void EtherCard::copyMac (byte *dst, const byte *src) {
    memcpy(dst, src, 6);
    220e:	dc 01       	movw	r26, r24
    2210:	fb 01       	movw	r30, r22
    2212:	86 e0       	ldi	r24, 0x06	; 6
    2214:	01 90       	ld	r0, Z+
    2216:	0d 92       	st	X+, r0
    2218:	81 50       	subi	r24, 0x01	; 1
    221a:	e1 f7       	brne	.-8      	; 0x2214 <_ZN9EtherCard7copyMacEPhPKh+0x6>
}
    221c:	08 95       	ret

0000221e <_ZN9EtherCard6copyIpEPhPKh>:
//
// 2010-05-20 <jc@wippler.nl>

#include "EtherCard.h"

void EtherCard::copyIp (byte *dst, const byte *src) {
    221e:	9c 01       	movw	r18, r24
    2220:	fb 01       	movw	r30, r22
    memcpy(dst, src, 4);
    2222:	80 81       	ld	r24, Z
    2224:	91 81       	ldd	r25, Z+1	; 0x01
    2226:	a2 81       	ldd	r26, Z+2	; 0x02
    2228:	b3 81       	ldd	r27, Z+3	; 0x03
    222a:	f9 01       	movw	r30, r18
    222c:	80 83       	st	Z, r24
    222e:	91 83       	std	Z+1, r25	; 0x01
    2230:	a2 83       	std	Z+2, r26	; 0x02
    2232:	b3 83       	std	Z+3, r27	; 0x03
}
    2234:	08 95       	ret

00002236 <_ZN14SoftwareSerial4recvEv>:

//
// The receive routine called by the interrupt handler
//
void SoftwareSerial::recv()
    2236:	0f 93       	push	r16
    2238:	1f 93       	push	r17
    223a:	cf 93       	push	r28
    223c:	df 93       	push	r29
    223e:	fc 01       	movw	r30, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2240:	73 8d       	ldd	r23, Z+27	; 0x1b
    2242:	76 95       	lsr	r23
    2244:	71 70       	andi	r23, 0x01	; 1
    2246:	a6 85       	ldd	r26, Z+14	; 0x0e
    2248:	b7 85       	ldd	r27, Z+15	; 0x0f
    224a:	95 85       	ldd	r25, Z+13	; 0x0d
    224c:	77 23       	and	r23, r23
    224e:	29 f0       	breq	.+10     	; 0x225a <_ZN14SoftwareSerial4recvEv+0x24>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2250:	8c 91       	ld	r24, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2252:	89 23       	and	r24, r25
    2254:	09 f4       	brne	.+2      	; 0x2258 <_ZN14SoftwareSerial4recvEv+0x22>
    2256:	54 c0       	rjmp	.+168    	; 0x2300 <_ZN14SoftwareSerial4recvEv+0xca>
    2258:	04 c0       	rjmp	.+8      	; 0x2262 <_ZN14SoftwareSerial4recvEv+0x2c>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    225a:	8c 91       	ld	r24, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    225c:	89 23       	and	r24, r25
    225e:	09 f0       	breq	.+2      	; 0x2262 <_ZN14SoftwareSerial4recvEv+0x2c>
    2260:	4f c0       	rjmp	.+158    	; 0x2300 <_ZN14SoftwareSerial4recvEv+0xca>
  {
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    2262:	83 89       	ldd	r24, Z+19	; 0x13
    2264:	94 89       	ldd	r25, Z+20	; 0x14
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	2f ef       	ldi	r18, 0xFF	; 255
    226c:	8f 3f       	cpi	r24, 0xFF	; 255
    226e:	92 07       	cpc	r25, r18
    2270:	d9 f7       	brne	.-10     	; 0x2268 <_ZN14SoftwareSerial4recvEv+0x32>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
    2272:	c5 89       	ldd	r28, Z+21	; 0x15
    2274:	d6 89       	ldd	r29, Z+22	; 0x16
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2276:	a6 85       	ldd	r26, Z+14	; 0x0e
    2278:	b7 85       	ldd	r27, Z+15	; 0x0f
    227a:	15 85       	ldd	r17, Z+13	; 0x0d
    227c:	60 e0       	ldi	r22, 0x00	; 0
    227e:	31 e0       	ldi	r19, 0x01	; 1
    2280:	40 e0       	ldi	r20, 0x00	; 0
    2282:	50 e0       	ldi	r21, 0x00	; 0
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
    2284:	00 e0       	ldi	r16, 0x00	; 0
    2286:	ce 01       	movw	r24, r28
    2288:	20 2f       	mov	r18, r16
    228a:	01 97       	sbiw	r24, 0x01	; 1
    228c:	2f ef       	ldi	r18, 0xFF	; 255
    228e:	8f 3f       	cpi	r24, 0xFF	; 255
    2290:	92 07       	cpc	r25, r18
    2292:	d9 f7       	brne	.-10     	; 0x228a <_ZN14SoftwareSerial4recvEv+0x54>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2294:	8c 91       	ld	r24, X
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
      DebugPulse(_DEBUG_PIN2, 1);
      uint8_t noti = ~i;
      if (rx_pin_read())
    2296:	81 23       	and	r24, r17
    2298:	11 f0       	breq	.+4      	; 0x229e <_ZN14SoftwareSerial4recvEv+0x68>
        d |= i;
    229a:	63 2b       	or	r22, r19
    229c:	03 c0       	rjmp	.+6      	; 0x22a4 <_ZN14SoftwareSerial4recvEv+0x6e>
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
    229e:	83 2f       	mov	r24, r19
    22a0:	80 95       	com	r24
    22a2:	68 23       	and	r22, r24
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
    22a4:	33 0f       	add	r19, r19
    22a6:	4f 5f       	subi	r20, 0xFF	; 255
    22a8:	5f 4f       	sbci	r21, 0xFF	; 255
    22aa:	48 30       	cpi	r20, 0x08	; 8
    22ac:	51 05       	cpc	r21, r1
    22ae:	59 f7       	brne	.-42     	; 0x2286 <_ZN14SoftwareSerial4recvEv+0x50>
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
    22b0:	87 89       	ldd	r24, Z+23	; 0x17
    22b2:	90 8d       	ldd	r25, Z+24	; 0x18
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	2f ef       	ldi	r18, 0xFF	; 255
    22ba:	8f 3f       	cpi	r24, 0xFF	; 255
    22bc:	92 07       	cpc	r25, r18
    22be:	d9 f7       	brne	.-10     	; 0x22b6 <_ZN14SoftwareSerial4recvEv+0x80>

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
    DebugPulse(_DEBUG_PIN2, 1);

    if (_inverse_logic)
    22c0:	71 11       	cpse	r23, r1
      d = ~d;
    22c2:	60 95       	com	r22

    // if buffer full, set the overflow flag and return
    if ((_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF != _receive_buffer_head) 
    22c4:	80 91 37 03 	lds	r24, 0x0337
    22c8:	20 91 38 03 	lds	r18, 0x0338
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	01 96       	adiw	r24, 0x01	; 1
    22d0:	8f 73       	andi	r24, 0x3F	; 63
    22d2:	90 70       	andi	r25, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	82 17       	cp	r24, r18
    22d8:	93 07       	cpc	r25, r19
    22da:	79 f0       	breq	.+30     	; 0x22fa <_ZN14SoftwareSerial4recvEv+0xc4>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    22dc:	e0 91 37 03 	lds	r30, 0x0337
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	e9 50       	subi	r30, 0x09	; 9
    22e4:	fd 4f       	sbci	r31, 0xFD	; 253
    22e6:	60 83       	st	Z, r22
      _receive_buffer_tail = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    22e8:	80 91 37 03 	lds	r24, 0x0337
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	01 96       	adiw	r24, 0x01	; 1
    22f0:	8f 73       	andi	r24, 0x3F	; 63
    22f2:	90 70       	andi	r25, 0x00	; 0
    22f4:	80 93 37 03 	sts	0x0337, r24
    22f8:	03 c0       	rjmp	.+6      	; 0x2300 <_ZN14SoftwareSerial4recvEv+0xca>
    else 
    {
#if _DEBUG // for scope: pulse pin as overflow indictator
      DebugPulse(_DEBUG_PIN1, 1);
#endif
      _buffer_overflow = true;
    22fa:	83 8d       	ldd	r24, Z+27	; 0x1b
    22fc:	81 60       	ori	r24, 0x01	; 1
    22fe:	83 8f       	std	Z+27, r24	; 0x1b
    "pop r20 \n\t"
    "pop r19 \n\t"
    "pop r18 \n\t"
    ::);
#endif
}
    2300:	df 91       	pop	r29
    2302:	cf 91       	pop	r28
    2304:	1f 91       	pop	r17
    2306:	0f 91       	pop	r16
    2308:	08 95       	ret

0000230a <__vector_3>:
    active_object->recv();
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
    230a:	1f 92       	push	r1
    230c:	0f 92       	push	r0
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	0f 92       	push	r0
    2312:	11 24       	eor	r1, r1
    2314:	2f 93       	push	r18
    2316:	3f 93       	push	r19
    2318:	4f 93       	push	r20
    231a:	5f 93       	push	r21
    231c:	6f 93       	push	r22
    231e:	7f 93       	push	r23
    2320:	8f 93       	push	r24
    2322:	9f 93       	push	r25
    2324:	af 93       	push	r26
    2326:	bf 93       	push	r27
    2328:	ef 93       	push	r30
    232a:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    232c:	80 91 f5 02 	lds	r24, 0x02F5
    2330:	90 91 f6 02 	lds	r25, 0x02F6
    2334:	00 97       	sbiw	r24, 0x00	; 0
    2336:	11 f0       	breq	.+4      	; 0x233c <__vector_3+0x32>
  {
    active_object->recv();
    2338:	0e 94 1b 11 	call	0x2236	; 0x2236 <_ZN14SoftwareSerial4recvEv>

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    233c:	ff 91       	pop	r31
    233e:	ef 91       	pop	r30
    2340:	bf 91       	pop	r27
    2342:	af 91       	pop	r26
    2344:	9f 91       	pop	r25
    2346:	8f 91       	pop	r24
    2348:	7f 91       	pop	r23
    234a:	6f 91       	pop	r22
    234c:	5f 91       	pop	r21
    234e:	4f 91       	pop	r20
    2350:	3f 91       	pop	r19
    2352:	2f 91       	pop	r18
    2354:	0f 90       	pop	r0
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	0f 90       	pop	r0
    235a:	1f 90       	pop	r1
    235c:	18 95       	reti

0000235e <__vector_4>:
#endif

#if defined(PCINT1_vect)
ISR(PCINT1_vect)
    235e:	1f 92       	push	r1
    2360:	0f 92       	push	r0
    2362:	0f b6       	in	r0, 0x3f	; 63
    2364:	0f 92       	push	r0
    2366:	11 24       	eor	r1, r1
    2368:	2f 93       	push	r18
    236a:	3f 93       	push	r19
    236c:	4f 93       	push	r20
    236e:	5f 93       	push	r21
    2370:	6f 93       	push	r22
    2372:	7f 93       	push	r23
    2374:	8f 93       	push	r24
    2376:	9f 93       	push	r25
    2378:	af 93       	push	r26
    237a:	bf 93       	push	r27
    237c:	ef 93       	push	r30
    237e:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    2380:	80 91 f5 02 	lds	r24, 0x02F5
    2384:	90 91 f6 02 	lds	r25, 0x02F6
    2388:	00 97       	sbiw	r24, 0x00	; 0
    238a:	11 f0       	breq	.+4      	; 0x2390 <__vector_4+0x32>
  {
    active_object->recv();
    238c:	0e 94 1b 11 	call	0x2236	; 0x2236 <_ZN14SoftwareSerial4recvEv>

#if defined(PCINT1_vect)
ISR(PCINT1_vect)
{
  SoftwareSerial::handle_interrupt();
}
    2390:	ff 91       	pop	r31
    2392:	ef 91       	pop	r30
    2394:	bf 91       	pop	r27
    2396:	af 91       	pop	r26
    2398:	9f 91       	pop	r25
    239a:	8f 91       	pop	r24
    239c:	7f 91       	pop	r23
    239e:	6f 91       	pop	r22
    23a0:	5f 91       	pop	r21
    23a2:	4f 91       	pop	r20
    23a4:	3f 91       	pop	r19
    23a6:	2f 91       	pop	r18
    23a8:	0f 90       	pop	r0
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	0f 90       	pop	r0
    23ae:	1f 90       	pop	r1
    23b0:	18 95       	reti

000023b2 <__vector_5>:
#endif

#if defined(PCINT2_vect)
ISR(PCINT2_vect)
    23b2:	1f 92       	push	r1
    23b4:	0f 92       	push	r0
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	0f 92       	push	r0
    23ba:	11 24       	eor	r1, r1
    23bc:	2f 93       	push	r18
    23be:	3f 93       	push	r19
    23c0:	4f 93       	push	r20
    23c2:	5f 93       	push	r21
    23c4:	6f 93       	push	r22
    23c6:	7f 93       	push	r23
    23c8:	8f 93       	push	r24
    23ca:	9f 93       	push	r25
    23cc:	af 93       	push	r26
    23ce:	bf 93       	push	r27
    23d0:	ef 93       	push	r30
    23d2:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    23d4:	80 91 f5 02 	lds	r24, 0x02F5
    23d8:	90 91 f6 02 	lds	r25, 0x02F6
    23dc:	00 97       	sbiw	r24, 0x00	; 0
    23de:	11 f0       	breq	.+4      	; 0x23e4 <__vector_5+0x32>
  {
    active_object->recv();
    23e0:	0e 94 1b 11 	call	0x2236	; 0x2236 <_ZN14SoftwareSerial4recvEv>

#if defined(PCINT2_vect)
ISR(PCINT2_vect)
{
  SoftwareSerial::handle_interrupt();
}
    23e4:	ff 91       	pop	r31
    23e6:	ef 91       	pop	r30
    23e8:	bf 91       	pop	r27
    23ea:	af 91       	pop	r26
    23ec:	9f 91       	pop	r25
    23ee:	8f 91       	pop	r24
    23f0:	7f 91       	pop	r23
    23f2:	6f 91       	pop	r22
    23f4:	5f 91       	pop	r21
    23f6:	4f 91       	pop	r20
    23f8:	3f 91       	pop	r19
    23fa:	2f 91       	pop	r18
    23fc:	0f 90       	pop	r0
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	0f 90       	pop	r0
    2402:	1f 90       	pop	r1
    2404:	18 95       	reti

00002406 <_ZN3DHTC1Ehhh>:
written by Adafruit Industries
*/

#include "DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
    2406:	fc 01       	movw	r30, r24
  _pin = pin;
    2408:	66 83       	std	Z+6, r22	; 0x06
  _type = type;
    240a:	47 83       	std	Z+7, r20	; 0x07
  _count = count;
    240c:	20 87       	std	Z+8, r18	; 0x08
  firstreading = true;
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	85 87       	std	Z+13, r24	; 0x0d
}
    2412:	08 95       	ret

00002414 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
    2414:	0f 93       	push	r16
    2416:	1f 93       	push	r17
    2418:	8c 01       	movw	r16, r24
  // set up the pins!
  pinMode(_pin, INPUT);
    241a:	fc 01       	movw	r30, r24
    241c:	86 81       	ldd	r24, Z+6	; 0x06
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	0e 94 26 1a 	call	0x344c	; 0x344c <pinMode>
  digitalWrite(_pin, HIGH);
    2424:	f8 01       	movw	r30, r16
    2426:	86 81       	ldd	r24, Z+6	; 0x06
    2428:	61 e0       	ldi	r22, 0x01	; 1
    242a:	0e 94 65 1a 	call	0x34ca	; 0x34ca <digitalWrite>
  _lastreadtime = 0;
    242e:	f8 01       	movw	r30, r16
    2430:	11 86       	std	Z+9, r1	; 0x09
    2432:	12 86       	std	Z+10, r1	; 0x0a
    2434:	13 86       	std	Z+11, r1	; 0x0b
    2436:	14 86       	std	Z+12, r1	; 0x0c
}
    2438:	1f 91       	pop	r17
    243a:	0f 91       	pop	r16
    243c:	08 95       	ret

0000243e <_ZN3DHT4readEv>:
  Serial.print("Read fail");
  return NAN;
}


boolean DHT::read(void) {
    243e:	cf 92       	push	r12
    2440:	df 92       	push	r13
    2442:	ef 92       	push	r14
    2444:	ff 92       	push	r15
    2446:	0f 93       	push	r16
    2448:	1f 93       	push	r17
    244a:	cf 93       	push	r28
    244c:	df 93       	push	r29
    244e:	ec 01       	movw	r28, r24
  uint8_t counter = 0;
  uint8_t j = 0, i;
  unsigned long currenttime;

  // pull the pin high and wait 250 milliseconds
  digitalWrite(_pin, HIGH);
    2450:	8e 81       	ldd	r24, Y+6	; 0x06
    2452:	61 e0       	ldi	r22, 0x01	; 1
    2454:	0e 94 65 1a 	call	0x34ca	; 0x34ca <digitalWrite>
  delay(250);
    2458:	6a ef       	ldi	r22, 0xFA	; 250
    245a:	70 e0       	ldi	r23, 0x00	; 0
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	0e 94 88 19 	call	0x3310	; 0x3310 <delay>

  currenttime = millis();
    2464:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <millis>
    2468:	9b 01       	movw	r18, r22
    246a:	ac 01       	movw	r20, r24
  if (currenttime < _lastreadtime) {
    246c:	89 85       	ldd	r24, Y+9	; 0x09
    246e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2470:	ab 85       	ldd	r26, Y+11	; 0x0b
    2472:	bc 85       	ldd	r27, Y+12	; 0x0c
    2474:	28 17       	cp	r18, r24
    2476:	39 07       	cpc	r19, r25
    2478:	4a 07       	cpc	r20, r26
    247a:	5b 07       	cpc	r21, r27
    247c:	20 f4       	brcc	.+8      	; 0x2486 <_ZN3DHT4readEv+0x48>
    // ie there was a rollover
    _lastreadtime = 0;
    247e:	19 86       	std	Y+9, r1	; 0x09
    2480:	1a 86       	std	Y+10, r1	; 0x0a
    2482:	1b 86       	std	Y+11, r1	; 0x0b
    2484:	1c 86       	std	Y+12, r1	; 0x0c
  }
  if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
    2486:	8d 85       	ldd	r24, Y+13	; 0x0d
    2488:	88 23       	and	r24, r24
    248a:	71 f4       	brne	.+28     	; 0x24a8 <_ZN3DHT4readEv+0x6a>
    248c:	89 85       	ldd	r24, Y+9	; 0x09
    248e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2490:	ab 85       	ldd	r26, Y+11	; 0x0b
    2492:	bc 85       	ldd	r27, Y+12	; 0x0c
    2494:	28 1b       	sub	r18, r24
    2496:	39 0b       	sbc	r19, r25
    2498:	4a 0b       	sbc	r20, r26
    249a:	5b 0b       	sbc	r21, r27
    249c:	20 5d       	subi	r18, 0xD0	; 208
    249e:	37 40       	sbci	r19, 0x07	; 7
    24a0:	40 40       	sbci	r20, 0x00	; 0
    24a2:	50 40       	sbci	r21, 0x00	; 0
    24a4:	08 f4       	brcc	.+2      	; 0x24a8 <_ZN3DHT4readEv+0x6a>
    24a6:	77 c0       	rjmp	.+238    	; 0x2596 <_ZN3DHT4readEv+0x158>
    return true; // return last correct measurement
    //delay(2000 - (currenttime - _lastreadtime));
  }
  firstreading = false;
    24a8:	1d 86       	std	Y+13, r1	; 0x0d
  /*
    Serial.print("Currtime: "); Serial.print(currenttime);
    Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
  */
  _lastreadtime = millis();
    24aa:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <millis>
    24ae:	69 87       	std	Y+9, r22	; 0x09
    24b0:	7a 87       	std	Y+10, r23	; 0x0a
    24b2:	8b 87       	std	Y+11, r24	; 0x0b
    24b4:	9c 87       	std	Y+12, r25	; 0x0c

  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    24b6:	1c 82       	std	Y+4, r1	; 0x04
    24b8:	1b 82       	std	Y+3, r1	; 0x03
    24ba:	1a 82       	std	Y+2, r1	; 0x02
    24bc:	19 82       	std	Y+1, r1	; 0x01
    24be:	18 82       	st	Y, r1
  
  // now pull it low for ~20 milliseconds
  pinMode(_pin, OUTPUT);
    24c0:	8e 81       	ldd	r24, Y+6	; 0x06
    24c2:	61 e0       	ldi	r22, 0x01	; 1
    24c4:	0e 94 26 1a 	call	0x344c	; 0x344c <pinMode>
  digitalWrite(_pin, LOW);
    24c8:	8e 81       	ldd	r24, Y+6	; 0x06
    24ca:	60 e0       	ldi	r22, 0x00	; 0
    24cc:	0e 94 65 1a 	call	0x34ca	; 0x34ca <digitalWrite>
  delay(20);
    24d0:	64 e1       	ldi	r22, 0x14	; 20
    24d2:	70 e0       	ldi	r23, 0x00	; 0
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	0e 94 88 19 	call	0x3310	; 0x3310 <delay>
  cli();
    24dc:	f8 94       	cli
  digitalWrite(_pin, HIGH);
    24de:	8e 81       	ldd	r24, Y+6	; 0x06
    24e0:	61 e0       	ldi	r22, 0x01	; 1
    24e2:	0e 94 65 1a 	call	0x34ca	; 0x34ca <digitalWrite>
  delayMicroseconds(40);
    24e6:	88 e2       	ldi	r24, 0x28	; 40
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <delayMicroseconds>
  pinMode(_pin, INPUT);
    24ee:	8e 81       	ldd	r24, Y+6	; 0x06
    24f0:	60 e0       	ldi	r22, 0x00	; 0
    24f2:	0e 94 26 1a 	call	0x344c	; 0x344c <pinMode>
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	ee 24       	eor	r14, r14
    24fa:	00 e0       	ldi	r16, 0x00	; 0
    24fc:	10 e0       	ldi	r17, 0x00	; 0
    24fe:	0a c0       	rjmp	.+20     	; 0x2514 <_ZN3DHT4readEv+0xd6>

  // read in timings
  for ( i=0; i< MAXTIMINGS; i++) {
    counter = 0;
    while (digitalRead(_pin) == laststate) {
      counter++;
    2500:	f3 94       	inc	r15
      delayMicroseconds(1);
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <delayMicroseconds>
      if (counter == 255) {
    250a:	8f ef       	ldi	r24, 0xFF	; 255
    250c:	f8 16       	cp	r15, r24
    250e:	29 f4       	brne	.+10     	; 0x251a <_ZN3DHT4readEv+0xdc>
    2510:	0a c0       	rjmp	.+20     	; 0x2526 <_ZN3DHT4readEv+0xe8>
        break;
      }
    }
    laststate = digitalRead(_pin);
    2512:	82 2f       	mov	r24, r18
    2514:	ff 24       	eor	r15, r15
  pinMode(_pin, INPUT);

  // read in timings
  for ( i=0; i< MAXTIMINGS; i++) {
    counter = 0;
    while (digitalRead(_pin) == laststate) {
    2516:	c8 2e       	mov	r12, r24
    2518:	dd 24       	eor	r13, r13
    251a:	8e 81       	ldd	r24, Y+6	; 0x06
    251c:	0e 94 b9 1a 	call	0x3572	; 0x3572 <digitalRead>
    2520:	8c 15       	cp	r24, r12
    2522:	9d 05       	cpc	r25, r13
    2524:	69 f3       	breq	.-38     	; 0x2500 <_ZN3DHT4readEv+0xc2>
      delayMicroseconds(1);
      if (counter == 255) {
        break;
      }
    }
    laststate = digitalRead(_pin);
    2526:	8e 81       	ldd	r24, Y+6	; 0x06
    2528:	0e 94 b9 1a 	call	0x3572	; 0x3572 <digitalRead>
    252c:	28 2f       	mov	r18, r24

    if (counter == 255) break;
    252e:	8f ef       	ldi	r24, 0xFF	; 255
    2530:	f8 16       	cp	r15, r24
    2532:	c9 f0       	breq	.+50     	; 0x2566 <_ZN3DHT4readEv+0x128>

    // ignore first 3 transitions
    if ((i >= 4) && (i%2 == 0)) {
    2534:	04 30       	cpi	r16, 0x04	; 4
    2536:	90 f0       	brcs	.+36     	; 0x255c <_ZN3DHT4readEv+0x11e>
    2538:	00 fd       	sbrc	r16, 0
    253a:	10 c0       	rjmp	.+32     	; 0x255c <_ZN3DHT4readEv+0x11e>
      // shove each bit into the storage bytes
      data[j/8] <<= 1;
    253c:	8e 2d       	mov	r24, r14
    253e:	86 95       	lsr	r24
    2540:	86 95       	lsr	r24
    2542:	86 95       	lsr	r24
    2544:	fe 01       	movw	r30, r28
    2546:	e8 0f       	add	r30, r24
    2548:	f1 1d       	adc	r31, r1
    254a:	90 81       	ld	r25, Z
    254c:	99 0f       	add	r25, r25
    254e:	90 83       	st	Z, r25
      if (counter > _count)
    2550:	88 85       	ldd	r24, Y+8	; 0x08
    2552:	8f 15       	cp	r24, r15
    2554:	10 f4       	brcc	.+4      	; 0x255a <_ZN3DHT4readEv+0x11c>
        data[j/8] |= 1;
    2556:	91 60       	ori	r25, 0x01	; 1
    2558:	90 83       	st	Z, r25
      j++;
    255a:	e3 94       	inc	r14
    255c:	0f 5f       	subi	r16, 0xFF	; 255
    255e:	1f 4f       	sbci	r17, 0xFF	; 255
  digitalWrite(_pin, HIGH);
  delayMicroseconds(40);
  pinMode(_pin, INPUT);

  // read in timings
  for ( i=0; i< MAXTIMINGS; i++) {
    2560:	05 35       	cpi	r16, 0x55	; 85
    2562:	11 05       	cpc	r17, r1
    2564:	b1 f6       	brne	.-84     	; 0x2512 <_ZN3DHT4readEv+0xd4>
      j++;
    }

  }

  sei();
    2566:	78 94       	sei
  Serial.print(data[4], HEX); Serial.print(" =? ");
  Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
  */

  // check we read 40 bits and that the checksum matches
  if ((j >= 40) && 
    2568:	87 e2       	ldi	r24, 0x27	; 39
    256a:	8e 15       	cp	r24, r14
    256c:	10 f0       	brcs	.+4      	; 0x2572 <_ZN3DHT4readEv+0x134>
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	13 c0       	rjmp	.+38     	; 0x2598 <_ZN3DHT4readEv+0x15a>
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	4c 81       	ldd	r20, Y+4	; 0x04
    2576:	50 e0       	ldi	r21, 0x00	; 0
    2578:	29 81       	ldd	r18, Y+1	; 0x01
    257a:	88 81       	ld	r24, Y
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	82 0f       	add	r24, r18
    2580:	91 1d       	adc	r25, r1
    2582:	2a 81       	ldd	r18, Y+2	; 0x02
    2584:	82 0f       	add	r24, r18
    2586:	91 1d       	adc	r25, r1
    2588:	2b 81       	ldd	r18, Y+3	; 0x03
    258a:	82 0f       	add	r24, r18
    258c:	91 1d       	adc	r25, r1
    258e:	90 70       	andi	r25, 0x00	; 0
    2590:	48 17       	cp	r20, r24
    2592:	59 07       	cpc	r21, r25
    2594:	09 f4       	brne	.+2      	; 0x2598 <_ZN3DHT4readEv+0x15a>
    2596:	31 e0       	ldi	r19, 0x01	; 1
  }
  

  return false;

}
    2598:	83 2f       	mov	r24, r19
    259a:	df 91       	pop	r29
    259c:	cf 91       	pop	r28
    259e:	1f 91       	pop	r17
    25a0:	0f 91       	pop	r16
    25a2:	ff 90       	pop	r15
    25a4:	ef 90       	pop	r14
    25a6:	df 90       	pop	r13
    25a8:	cf 90       	pop	r12
    25aa:	08 95       	ret

000025ac <_ZN3DHT12readHumidityEv>:

float DHT::convertCtoF(float c) {
	return c * 9 / 5 + 32;
}

float DHT::readHumidity(void) {
    25ac:	ef 92       	push	r14
    25ae:	ff 92       	push	r15
    25b0:	0f 93       	push	r16
    25b2:	1f 93       	push	r17
    25b4:	cf 93       	push	r28
    25b6:	df 93       	push	r29
    25b8:	ec 01       	movw	r28, r24
  float f;
  if (read()) {
    25ba:	0e 94 1f 12 	call	0x243e	; 0x243e <_ZN3DHT4readEv>
    25be:	88 23       	and	r24, r24
    25c0:	a9 f1       	breq	.+106    	; 0x262c <_ZN3DHT12readHumidityEv+0x80>
    switch (_type) {
    25c2:	8f 81       	ldd	r24, Y+7	; 0x07
    25c4:	8b 30       	cpi	r24, 0x0B	; 11
    25c6:	31 f0       	breq	.+12     	; 0x25d4 <_ZN3DHT12readHumidityEv+0x28>
    25c8:	8b 30       	cpi	r24, 0x0B	; 11
    25ca:	80 f1       	brcs	.+96     	; 0x262c <_ZN3DHT12readHumidityEv+0x80>
    25cc:	85 51       	subi	r24, 0x15	; 21
    25ce:	82 30       	cpi	r24, 0x02	; 2
    25d0:	68 f5       	brcc	.+90     	; 0x262c <_ZN3DHT12readHumidityEv+0x80>
    25d2:	07 c0       	rjmp	.+14     	; 0x25e2 <_ZN3DHT12readHumidityEv+0x36>
    case DHT11:
      f = data[0];
    25d4:	68 81       	ld	r22, Y
    25d6:	70 e0       	ldi	r23, 0x00	; 0
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	0e 94 0e 1c 	call	0x381c	; 0x381c <__floatunsisf>
    25e0:	22 c0       	rjmp	.+68     	; 0x2626 <_ZN3DHT12readHumidityEv+0x7a>
      return f;
    case DHT22:
    case DHT21:
      f = data[0];
    25e2:	68 81       	ld	r22, Y
    25e4:	70 e0       	ldi	r23, 0x00	; 0
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	0e 94 0e 1c 	call	0x381c	; 0x381c <__floatunsisf>
      f *= 256;
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e8       	ldi	r20, 0x80	; 128
    25f4:	53 e4       	ldi	r21, 0x43	; 67
    25f6:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__mulsf3>
    25fa:	7b 01       	movw	r14, r22
    25fc:	8c 01       	movw	r16, r24
      f += data[1];
    25fe:	69 81       	ldd	r22, Y+1	; 0x01
    2600:	70 e0       	ldi	r23, 0x00	; 0
    2602:	88 27       	eor	r24, r24
    2604:	77 fd       	sbrc	r23, 7
    2606:	80 95       	com	r24
    2608:	98 2f       	mov	r25, r24
    260a:	0e 94 10 1c 	call	0x3820	; 0x3820 <__floatsisf>
    260e:	9b 01       	movw	r18, r22
    2610:	ac 01       	movw	r20, r24
    2612:	c8 01       	movw	r24, r16
    2614:	b7 01       	movw	r22, r14
    2616:	0e 94 0d 1b 	call	0x361a	; 0x361a <__addsf3>
      f /= 10;
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	40 e2       	ldi	r20, 0x20	; 32
    2620:	51 e4       	ldi	r21, 0x41	; 65
    2622:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__divsf3>
    2626:	e6 2f       	mov	r30, r22
    2628:	69 2f       	mov	r22, r25
    262a:	0a c0       	rjmp	.+20     	; 0x2640 <_ZN3DHT12readHumidityEv+0x94>
      return f;
    }
  }
  Serial.print("Read fail");
    262c:	88 e9       	ldi	r24, 0x98	; 152
    262e:	96 e0       	ldi	r25, 0x06	; 6
    2630:	60 e0       	ldi	r22, 0x00	; 0
    2632:	71 e0       	ldi	r23, 0x01	; 1
    2634:	0e 94 16 18 	call	0x302c	; 0x302c <_ZN5Print5printEPKc>
    2638:	e0 e0       	ldi	r30, 0x00	; 0
    263a:	70 e0       	ldi	r23, 0x00	; 0
    263c:	80 ec       	ldi	r24, 0xC0	; 192
    263e:	6f e7       	ldi	r22, 0x7F	; 127
  return NAN;
}
    2640:	2e 2f       	mov	r18, r30
    2642:	37 2f       	mov	r19, r23
    2644:	48 2f       	mov	r20, r24
    2646:	56 2f       	mov	r21, r22
    2648:	b9 01       	movw	r22, r18
    264a:	ca 01       	movw	r24, r20
    264c:	df 91       	pop	r29
    264e:	cf 91       	pop	r28
    2650:	1f 91       	pop	r17
    2652:	0f 91       	pop	r16
    2654:	ff 90       	pop	r15
    2656:	ef 90       	pop	r14
    2658:	08 95       	ret

0000265a <_ZN3DHT15readTemperatureEb>:
  digitalWrite(_pin, HIGH);
  _lastreadtime = 0;
}

//boolean S == Scale.  True == Farenheit; False == Celcius
float DHT::readTemperature(bool S) {
    265a:	cf 92       	push	r12
    265c:	df 92       	push	r13
    265e:	ef 92       	push	r14
    2660:	ff 92       	push	r15
    2662:	0f 93       	push	r16
    2664:	1f 93       	push	r17
    2666:	cf 93       	push	r28
    2668:	df 93       	push	r29
    266a:	ec 01       	movw	r28, r24
    266c:	c6 2e       	mov	r12, r22
  float f;

  if (read()) {
    266e:	0e 94 1f 12 	call	0x243e	; 0x243e <_ZN3DHT4readEv>
    2672:	88 23       	and	r24, r24
    2674:	09 f4       	brne	.+2      	; 0x2678 <_ZN3DHT15readTemperatureEb+0x1e>
    2676:	50 c0       	rjmp	.+160    	; 0x2718 <_ZN3DHT15readTemperatureEb+0xbe>
    switch (_type) {
    2678:	8f 81       	ldd	r24, Y+7	; 0x07
    267a:	8b 30       	cpi	r24, 0x0B	; 11
    267c:	41 f0       	breq	.+16     	; 0x268e <_ZN3DHT15readTemperatureEb+0x34>
    267e:	8b 30       	cpi	r24, 0x0B	; 11
    2680:	08 f4       	brcc	.+2      	; 0x2684 <_ZN3DHT15readTemperatureEb+0x2a>
    2682:	4a c0       	rjmp	.+148    	; 0x2718 <_ZN3DHT15readTemperatureEb+0xbe>
    2684:	85 51       	subi	r24, 0x15	; 21
    2686:	82 30       	cpi	r24, 0x02	; 2
    2688:	08 f0       	brcs	.+2      	; 0x268c <_ZN3DHT15readTemperatureEb+0x32>
    268a:	46 c0       	rjmp	.+140    	; 0x2718 <_ZN3DHT15readTemperatureEb+0xbe>
    268c:	07 c0       	rjmp	.+14     	; 0x269c <_ZN3DHT15readTemperatureEb+0x42>
    case DHT11:
      f = data[2];
    268e:	6a 81       	ldd	r22, Y+2	; 0x02
    2690:	70 e0       	ldi	r23, 0x00	; 0
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	0e 94 0e 1c 	call	0x381c	; 0x381c <__floatunsisf>
    269a:	29 c0       	rjmp	.+82     	; 0x26ee <_ZN3DHT15readTemperatureEb+0x94>
      	f = convertCtoF(f);
      	
      return f;
    case DHT22:
    case DHT21:
      f = data[2] & 0x7F;
    269c:	da 80       	ldd	r13, Y+2	; 0x02
    269e:	6d 2d       	mov	r22, r13
    26a0:	70 e0       	ldi	r23, 0x00	; 0
    26a2:	6f 77       	andi	r22, 0x7F	; 127
    26a4:	70 70       	andi	r23, 0x00	; 0
    26a6:	88 27       	eor	r24, r24
    26a8:	77 fd       	sbrc	r23, 7
    26aa:	80 95       	com	r24
    26ac:	98 2f       	mov	r25, r24
    26ae:	0e 94 10 1c 	call	0x3820	; 0x3820 <__floatsisf>
      f *= 256;
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e8       	ldi	r20, 0x80	; 128
    26b8:	53 e4       	ldi	r21, 0x43	; 67
    26ba:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__mulsf3>
    26be:	7b 01       	movw	r14, r22
    26c0:	8c 01       	movw	r16, r24
      f += data[3];
    26c2:	6b 81       	ldd	r22, Y+3	; 0x03
    26c4:	70 e0       	ldi	r23, 0x00	; 0
    26c6:	88 27       	eor	r24, r24
    26c8:	77 fd       	sbrc	r23, 7
    26ca:	80 95       	com	r24
    26cc:	98 2f       	mov	r25, r24
    26ce:	0e 94 10 1c 	call	0x3820	; 0x3820 <__floatsisf>
    26d2:	9b 01       	movw	r18, r22
    26d4:	ac 01       	movw	r20, r24
    26d6:	c8 01       	movw	r24, r16
    26d8:	b7 01       	movw	r22, r14
    26da:	0e 94 0d 1b 	call	0x361a	; 0x361a <__addsf3>
      f /= 10;
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e2       	ldi	r20, 0x20	; 32
    26e4:	51 e4       	ldi	r21, 0x41	; 65
    26e6:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__divsf3>
      if (data[2] & 0x80)
    26ea:	d7 fc       	sbrc	r13, 7
	f *= -1;
    26ec:	90 58       	subi	r25, 0x80	; 128
      if(S)
    26ee:	cc 20       	and	r12, r12
    26f0:	e9 f0       	breq	.+58     	; 0x272c <_ZN3DHT15readTemperatureEb+0xd2>
  Serial.print("Read fail");
  return NAN;
}

float DHT::convertCtoF(float c) {
	return c * 9 / 5 + 32;
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	40 e1       	ldi	r20, 0x10	; 16
    26f8:	51 e4       	ldi	r21, 0x41	; 65
    26fa:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__mulsf3>
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 ea       	ldi	r20, 0xA0	; 160
    2704:	50 e4       	ldi	r21, 0x40	; 64
    2706:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__divsf3>
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	40 e0       	ldi	r20, 0x00	; 0
    2710:	52 e4       	ldi	r21, 0x42	; 66
    2712:	0e 94 0d 1b 	call	0x361a	; 0x361a <__addsf3>
    2716:	0a c0       	rjmp	.+20     	; 0x272c <_ZN3DHT15readTemperatureEb+0xd2>
	f = convertCtoF(f);

      return f;
    }
  }
  Serial.print("Read fail");
    2718:	88 e9       	ldi	r24, 0x98	; 152
    271a:	96 e0       	ldi	r25, 0x06	; 6
    271c:	60 e0       	ldi	r22, 0x00	; 0
    271e:	71 e0       	ldi	r23, 0x01	; 1
    2720:	0e 94 16 18 	call	0x302c	; 0x302c <_ZN5Print5printEPKc>
    2724:	60 e0       	ldi	r22, 0x00	; 0
    2726:	70 e0       	ldi	r23, 0x00	; 0
    2728:	80 ec       	ldi	r24, 0xC0	; 192
    272a:	9f e7       	ldi	r25, 0x7F	; 127
  return NAN;
}
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	1f 91       	pop	r17
    2732:	0f 91       	pop	r16
    2734:	ff 90       	pop	r15
    2736:	ef 90       	pop	r14
    2738:	df 90       	pop	r13
    273a:	cf 90       	pop	r12
    273c:	08 95       	ret

0000273e <_GLOBAL__I_dht>:
// change these settings to match your own setup
#define FEED    "118295"
#define APIKEY  "5_WgqPjjwmqiuZ3t_S-SYjEX0kmSAKxBZG5RdEpiWE45UT0g"
#define DHTPIN 2
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);
    273e:	89 e3       	ldi	r24, 0x39	; 57
    2740:	93 e0       	ldi	r25, 0x03	; 3
    2742:	62 e0       	ldi	r22, 0x02	; 2
    2744:	46 e1       	ldi	r20, 0x16	; 22
    2746:	26 e0       	ldi	r18, 0x06	; 6
    2748:	0e 94 03 12 	call	0x2406	; 0x2406 <_ZN3DHTC1Ehhh>
    274c:	10 92 0a 06 	sts	0x060A, r1
    2750:	10 92 09 06 	sts	0x0609, r1
    2754:	8a eb       	ldi	r24, 0xBA	; 186
    2756:	91 e0       	ldi	r25, 0x01	; 1
    2758:	90 93 08 06 	sts	0x0608, r25
    275c:	80 93 07 06 	sts	0x0607, r24
    2760:	10 92 0e 06 	sts	0x060E, r1
    2764:	10 92 0c 06 	sts	0x060C, r1

    // send the packet - this also releases all stash buffers once done
    Serial.println("Send");
    ether.tcpSend();
  }
}
    2768:	08 95       	ret

0000276a <loop>:
    Serial.println("DNS failed");

  ether.printIp("SRV: ", ether.hisip);
}

void loop () {
    276a:	9f 92       	push	r9
    276c:	af 92       	push	r10
    276e:	bf 92       	push	r11
    2770:	cf 92       	push	r12
    2772:	df 92       	push	r13
    2774:	ef 92       	push	r14
    2776:	ff 92       	push	r15
    2778:	0f 93       	push	r16
    277a:	1f 93       	push	r17
  ether.packetLoop(ether.packetReceive());
    277c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <_ZN8ENC28J6013packetReceiveEv>
    2780:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_ZN9EtherCard10packetLoopEj>

  if (millis() > timer) {
    2784:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <millis>
    2788:	20 91 03 06 	lds	r18, 0x0603
    278c:	30 91 04 06 	lds	r19, 0x0604
    2790:	40 91 05 06 	lds	r20, 0x0605
    2794:	50 91 06 06 	lds	r21, 0x0606
    2798:	26 17       	cp	r18, r22
    279a:	37 07       	cpc	r19, r23
    279c:	48 07       	cpc	r20, r24
    279e:	59 07       	cpc	r21, r25
    27a0:	08 f0       	brcs	.+2      	; 0x27a4 <loop+0x3a>
    27a2:	a5 c0       	rjmp	.+330    	; 0x28ee <loop+0x184>
    timer = millis() + 10000;
    27a4:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <millis>
    27a8:	60 5f       	subi	r22, 0xF0	; 240
    27aa:	78 4d       	sbci	r23, 0xD8	; 216
    27ac:	8f 4f       	sbci	r24, 0xFF	; 255
    27ae:	9f 4f       	sbci	r25, 0xFF	; 255
    27b0:	60 93 03 06 	sts	0x0603, r22
    27b4:	70 93 04 06 	sts	0x0604, r23
    27b8:	80 93 05 06 	sts	0x0605, r24
    27bc:	90 93 06 06 	sts	0x0606, r25

    float h = dht.readHumidity();
    27c0:	89 e3       	ldi	r24, 0x39	; 57
    27c2:	93 e0       	ldi	r25, 0x03	; 3
    27c4:	0e 94 d6 12 	call	0x25ac	; 0x25ac <_ZN3DHT12readHumidityEv>
    27c8:	5b 01       	movw	r10, r22
    27ca:	6c 01       	movw	r12, r24
    float t = dht.readTemperature();
    27cc:	89 e3       	ldi	r24, 0x39	; 57
    27ce:	93 e0       	ldi	r25, 0x03	; 3
    27d0:	60 e0       	ldi	r22, 0x00	; 0
    27d2:	0e 94 2d 13 	call	0x265a	; 0x265a <_ZN3DHT15readTemperatureEb>
    t = t*1.8+32;
    27d6:	26 e6       	ldi	r18, 0x66	; 102
    27d8:	36 e6       	ldi	r19, 0x66	; 102
    27da:	46 ee       	ldi	r20, 0xE6	; 230
    27dc:	5f e3       	ldi	r21, 0x3F	; 63
    27de:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__mulsf3>
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	40 e0       	ldi	r20, 0x00	; 0
    27e8:	52 e4       	ldi	r21, 0x42	; 66
    27ea:	0e 94 0d 1b 	call	0x361a	; 0x361a <__addsf3>
    27ee:	7b 01       	movw	r14, r22
    27f0:	8c 01       	movw	r16, r24

    // generate two fake values as payload - by using a separate stash,
    // we can determine the size of the generated message ahead of time

    byte sd = stash.create();
    27f2:	87 e0       	ldi	r24, 0x07	; 7
    27f4:	96 e0       	ldi	r25, 0x06	; 6
    27f6:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_ZN5Stash6createEv>
    27fa:	98 2e       	mov	r9, r24
    stash.print("2,");
    27fc:	87 e0       	ldi	r24, 0x07	; 7
    27fe:	96 e0       	ldi	r25, 0x06	; 6
    2800:	6a e0       	ldi	r22, 0x0A	; 10
    2802:	71 e0       	ldi	r23, 0x01	; 1
    2804:	0e 94 16 18 	call	0x302c	; 0x302c <_ZN5Print5printEPKc>
    stash.println(h);
    2808:	87 e0       	ldi	r24, 0x07	; 7
    280a:	96 e0       	ldi	r25, 0x06	; 6
    280c:	b6 01       	movw	r22, r12
    280e:	a5 01       	movw	r20, r10
    2810:	22 e0       	ldi	r18, 0x02	; 2
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEdi>
    Serial.println("data 1");
    2818:	88 e9       	ldi	r24, 0x98	; 152
    281a:	96 e0       	ldi	r25, 0x06	; 6
    281c:	6d e0       	ldi	r22, 0x0D	; 13
    281e:	71 e0       	ldi	r23, 0x01	; 1
    2820:	0e 94 10 19 	call	0x3220	; 0x3220 <_ZN5Print7printlnEPKc>
    Serial.println(h);
    2824:	88 e9       	ldi	r24, 0x98	; 152
    2826:	96 e0       	ldi	r25, 0x06	; 6
    2828:	b6 01       	movw	r22, r12
    282a:	a5 01       	movw	r20, r10
    282c:	22 e0       	ldi	r18, 0x02	; 2
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEdi>
    stash.print("3,");
    2834:	87 e0       	ldi	r24, 0x07	; 7
    2836:	96 e0       	ldi	r25, 0x06	; 6
    2838:	64 e1       	ldi	r22, 0x14	; 20
    283a:	71 e0       	ldi	r23, 0x01	; 1
    283c:	0e 94 16 18 	call	0x302c	; 0x302c <_ZN5Print5printEPKc>
    stash.println(t);
    2840:	87 e0       	ldi	r24, 0x07	; 7
    2842:	96 e0       	ldi	r25, 0x06	; 6
    2844:	a7 01       	movw	r20, r14
    2846:	b8 01       	movw	r22, r16
    2848:	22 e0       	ldi	r18, 0x02	; 2
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEdi>
    Serial.println("data 2");
    2850:	88 e9       	ldi	r24, 0x98	; 152
    2852:	96 e0       	ldi	r25, 0x06	; 6
    2854:	67 e1       	ldi	r22, 0x17	; 23
    2856:	71 e0       	ldi	r23, 0x01	; 1
    2858:	0e 94 10 19 	call	0x3220	; 0x3220 <_ZN5Print7printlnEPKc>
    Serial.println(t);
    285c:	88 e9       	ldi	r24, 0x98	; 152
    285e:	96 e0       	ldi	r25, 0x06	; 6
    2860:	a7 01       	movw	r20, r14
    2862:	b8 01       	movw	r22, r16
    2864:	22 e0       	ldi	r18, 0x02	; 2
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEdi>
    stash.save();
    286c:	87 e0       	ldi	r24, 0x07	; 7
    286e:	96 e0       	ldi	r25, 0x06	; 6
    2870:	0e 94 08 03 	call	0x610	; 0x610 <_ZN5Stash4saveEv>
                        "Host: $F" "\r\n"
                        "X-ApiKey: $F" "\r\n"
                        "Content-Length: $D" "\r\n"
                        "\r\n"
                        "$H"),
            website, PSTR(FEED), website, PSTR(APIKEY), stash.size(), sd);
    2874:	87 e0       	ldi	r24, 0x07	; 7
    2876:	96 e0       	ldi	r25, 0x06	; 6
    2878:	0e 94 4a 02 	call	0x494	; 0x494 <_ZN5Stash4sizeEv>
    287c:	2d b7       	in	r18, 0x3d	; 61
    287e:	3e b7       	in	r19, 0x3e	; 62
    2880:	2e 50       	subi	r18, 0x0E	; 14
    2882:	30 40       	sbci	r19, 0x00	; 0
    2884:	0f b6       	in	r0, 0x3f	; 63
    2886:	f8 94       	cli
    2888:	3e bf       	out	0x3e, r19	; 62
    288a:	0f be       	out	0x3f, r0	; 63
    288c:	2d bf       	out	0x3d, r18	; 61
    288e:	ed b7       	in	r30, 0x3d	; 61
    2890:	fe b7       	in	r31, 0x3e	; 62
    2892:	31 96       	adiw	r30, 0x01	; 1
    Serial.println(t);
    stash.save();

    // generate the header with payload - note that the stash size is used,
    // and that a "stash descriptor" is passed in as argument using "$H"
    Stash::prepare(PSTR("PUT http://$F/v2/feeds/$F.csv HTTP/1.0" "\r\n"
    2894:	25 e7       	ldi	r18, 0x75	; 117
    2896:	31 e0       	ldi	r19, 0x01	; 1
    2898:	ad b7       	in	r26, 0x3d	; 61
    289a:	be b7       	in	r27, 0x3e	; 62
    289c:	12 96       	adiw	r26, 0x02	; 2
    289e:	3c 93       	st	X, r19
    28a0:	2e 93       	st	-X, r18
    28a2:	11 97       	sbiw	r26, 0x01	; 1
    28a4:	40 e3       	ldi	r20, 0x30	; 48
    28a6:	51 e0       	ldi	r21, 0x01	; 1
    28a8:	53 83       	std	Z+3, r21	; 0x03
    28aa:	42 83       	std	Z+2, r20	; 0x02
                        "Host: $F" "\r\n"
                        "X-ApiKey: $F" "\r\n"
                        "Content-Length: $D" "\r\n"
                        "\r\n"
                        "$H"),
            website, PSTR(FEED), website, PSTR(APIKEY), stash.size(), sd);
    28ac:	2e e6       	ldi	r18, 0x6E	; 110
    28ae:	31 e0       	ldi	r19, 0x01	; 1
    28b0:	35 83       	std	Z+5, r19	; 0x05
    28b2:	24 83       	std	Z+4, r18	; 0x04
    28b4:	57 83       	std	Z+7, r21	; 0x07
    28b6:	46 83       	std	Z+6, r20	; 0x06
    28b8:	2d e3       	ldi	r18, 0x3D	; 61
    28ba:	31 e0       	ldi	r19, 0x01	; 1
    28bc:	31 87       	std	Z+9, r19	; 0x09
    28be:	20 87       	std	Z+8, r18	; 0x08
    28c0:	93 87       	std	Z+11, r25	; 0x0b
    28c2:	82 87       	std	Z+10, r24	; 0x0a
    28c4:	94 86       	std	Z+12, r9	; 0x0c
    28c6:	15 86       	std	Z+13, r1	; 0x0d
    28c8:	0e 94 91 03 	call	0x722	; 0x722 <_ZN5Stash7prepareEPKcz>

    // send the packet - this also releases all stash buffers once done
    Serial.println("Send");
    28cc:	2d b7       	in	r18, 0x3d	; 61
    28ce:	3e b7       	in	r19, 0x3e	; 62
    28d0:	22 5f       	subi	r18, 0xF2	; 242
    28d2:	3f 4f       	sbci	r19, 0xFF	; 255
    28d4:	0f b6       	in	r0, 0x3f	; 63
    28d6:	f8 94       	cli
    28d8:	3e bf       	out	0x3e, r19	; 62
    28da:	0f be       	out	0x3f, r0	; 63
    28dc:	2d bf       	out	0x3d, r18	; 61
    28de:	88 e9       	ldi	r24, 0x98	; 152
    28e0:	96 e0       	ldi	r25, 0x06	; 6
    28e2:	6e e1       	ldi	r22, 0x1E	; 30
    28e4:	71 e0       	ldi	r23, 0x01	; 1
    28e6:	0e 94 10 19 	call	0x3220	; 0x3220 <_ZN5Print7printlnEPKc>
    ether.tcpSend();
    28ea:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN9EtherCard7tcpSendEv>
  }
}
    28ee:	1f 91       	pop	r17
    28f0:	0f 91       	pop	r16
    28f2:	ff 90       	pop	r15
    28f4:	ef 90       	pop	r14
    28f6:	df 90       	pop	r13
    28f8:	cf 90       	pop	r12
    28fa:	bf 90       	pop	r11
    28fc:	af 90       	pop	r10
    28fe:	9f 90       	pop	r9
    2900:	08 95       	ret

00002902 <setup>:
byte Ethernet::buffer[700];
uint32_t timer;
Stash stash;

void setup () {
  Serial.begin(9600);
    2902:	88 e9       	ldi	r24, 0x98	; 152
    2904:	96 e0       	ldi	r25, 0x06	; 6
    2906:	40 e8       	ldi	r20, 0x80	; 128
    2908:	55 e2       	ldi	r21, 0x25	; 37
    290a:	60 e0       	ldi	r22, 0x00	; 0
    290c:	70 e0       	ldi	r23, 0x00	; 0
    290e:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <_ZN14HardwareSerial5beginEm>
  Serial.println("\n[webClient]");
    2912:	88 e9       	ldi	r24, 0x98	; 152
    2914:	96 e0       	ldi	r25, 0x06	; 6
    2916:	63 e2       	ldi	r22, 0x23	; 35
    2918:	71 e0       	ldi	r23, 0x01	; 1
    291a:	0e 94 10 19 	call	0x3220	; 0x3220 <_ZN5Print7printlnEPKc>
  dht.begin();
    291e:	89 e3       	ldi	r24, 0x39	; 57
    2920:	93 e0       	ldi	r25, 0x03	; 3
    2922:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN3DHT5beginEv>

  if (ether.begin(sizeof Ethernet::buffer, mymac) == 0)
    2926:	8c eb       	ldi	r24, 0xBC	; 188
    2928:	92 e0       	ldi	r25, 0x02	; 2
    292a:	60 eb       	ldi	r22, 0xB0	; 176
    292c:	71 e0       	ldi	r23, 0x01	; 1
    292e:	48 e0       	ldi	r20, 0x08	; 8
    2930:	0e 94 ba 01 	call	0x374	; 0x374 <_ZN9EtherCard5beginEjPKhh>
    2934:	88 23       	and	r24, r24
    2936:	31 f4       	brne	.+12     	; 0x2944 <setup+0x42>
    Serial.println( "Failed to access Ethernet controller");
    2938:	88 e9       	ldi	r24, 0x98	; 152
    293a:	96 e0       	ldi	r25, 0x06	; 6
    293c:	60 e3       	ldi	r22, 0x30	; 48
    293e:	71 e0       	ldi	r23, 0x01	; 1
    2940:	0e 94 10 19 	call	0x3220	; 0x3220 <_ZN5Print7printlnEPKc>
  if (!ether.dhcpSetup())
    2944:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN9EtherCard9dhcpSetupEv>
    2948:	88 23       	and	r24, r24
    294a:	31 f4       	brne	.+12     	; 0x2958 <setup+0x56>
    Serial.println("DHCP failed");
    294c:	88 e9       	ldi	r24, 0x98	; 152
    294e:	96 e0       	ldi	r25, 0x06	; 6
    2950:	65 e5       	ldi	r22, 0x55	; 85
    2952:	71 e0       	ldi	r23, 0x01	; 1
    2954:	0e 94 10 19 	call	0x3220	; 0x3220 <_ZN5Print7printlnEPKc>

  ether.printIp("IP:  ", ether.myip);
    2958:	81 e6       	ldi	r24, 0x61	; 97
    295a:	91 e0       	ldi	r25, 0x01	; 1
    295c:	62 e8       	ldi	r22, 0x82	; 130
    295e:	72 e0       	ldi	r23, 0x02	; 2
    2960:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <_ZN9EtherCard7printIpEPKcPKh>
  ether.printIp("GW:  ", ether.gwip);
    2964:	87 e6       	ldi	r24, 0x67	; 103
    2966:	91 e0       	ldi	r25, 0x01	; 1
    2968:	6a e8       	ldi	r22, 0x8A	; 138
    296a:	72 e0       	ldi	r23, 0x02	; 2
    296c:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <_ZN9EtherCard7printIpEPKcPKh>
  ether.printIp("DNS: ", ether.dnsip);
    2970:	8d e6       	ldi	r24, 0x6D	; 109
    2972:	91 e0       	ldi	r25, 0x01	; 1
    2974:	62 e9       	ldi	r22, 0x92	; 146
    2976:	72 e0       	ldi	r23, 0x02	; 2
    2978:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <_ZN9EtherCard7printIpEPKcPKh>

  if (!ether.dnsLookup(website))
    297c:	80 e3       	ldi	r24, 0x30	; 48
    297e:	91 e0       	ldi	r25, 0x01	; 1
    2980:	60 e0       	ldi	r22, 0x00	; 0
    2982:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN9EtherCard9dnsLookupEPcb>
    2986:	88 23       	and	r24, r24
    2988:	31 f4       	brne	.+12     	; 0x2996 <setup+0x94>
    Serial.println("DNS failed");
    298a:	88 e9       	ldi	r24, 0x98	; 152
    298c:	96 e0       	ldi	r25, 0x06	; 6
    298e:	63 e7       	ldi	r22, 0x73	; 115
    2990:	71 e0       	ldi	r23, 0x01	; 1
    2992:	0e 94 10 19 	call	0x3220	; 0x3220 <_ZN5Print7printlnEPKc>

  ether.printIp("SRV: ", ether.hisip);
    2996:	8e e7       	ldi	r24, 0x7E	; 126
    2998:	91 e0       	ldi	r25, 0x01	; 1
    299a:	66 e9       	ldi	r22, 0x96	; 150
    299c:	72 e0       	ldi	r23, 0x02	; 2
    299e:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <_ZN9EtherCard7printIpEPKcPKh>
}
    29a2:	08 95       	ret

000029a4 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    29a4:	08 95       	ret

000029a6 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
    29a6:	1f 92       	push	r1
    29a8:	0f 92       	push	r0
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	0f 92       	push	r0
    29ae:	11 24       	eor	r1, r1
    29b0:	2f 93       	push	r18
    29b2:	3f 93       	push	r19
    29b4:	4f 93       	push	r20
    29b6:	8f 93       	push	r24
    29b8:	9f 93       	push	r25
    29ba:	ef 93       	push	r30
    29bc:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    29be:	80 91 c0 00 	lds	r24, 0x00C0
    29c2:	82 fd       	sbrc	r24, 2
    29c4:	1d c0       	rjmp	.+58     	; 0x2a00 <__vector_18+0x5a>
      unsigned char c = UDR0;
    29c6:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    29ca:	20 91 50 06 	lds	r18, 0x0650
    29ce:	30 91 51 06 	lds	r19, 0x0651

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    29d2:	2f 5f       	subi	r18, 0xFF	; 255
    29d4:	3f 4f       	sbci	r19, 0xFF	; 255
    29d6:	2f 73       	andi	r18, 0x3F	; 63
    29d8:	30 70       	andi	r19, 0x00	; 0
    29da:	80 91 52 06 	lds	r24, 0x0652
    29de:	90 91 53 06 	lds	r25, 0x0653
    29e2:	28 17       	cp	r18, r24
    29e4:	39 07       	cpc	r19, r25
    29e6:	71 f0       	breq	.+28     	; 0x2a04 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    29e8:	e0 91 50 06 	lds	r30, 0x0650
    29ec:	f0 91 51 06 	lds	r31, 0x0651
    29f0:	e0 5f       	subi	r30, 0xF0	; 240
    29f2:	f9 4f       	sbci	r31, 0xF9	; 249
    29f4:	40 83       	st	Z, r20
    buffer->head = i;
    29f6:	30 93 51 06 	sts	0x0651, r19
    29fa:	20 93 50 06 	sts	0x0650, r18
    29fe:	02 c0       	rjmp	.+4      	; 0x2a04 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    2a00:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    2a04:	ff 91       	pop	r31
    2a06:	ef 91       	pop	r30
    2a08:	9f 91       	pop	r25
    2a0a:	8f 91       	pop	r24
    2a0c:	4f 91       	pop	r20
    2a0e:	3f 91       	pop	r19
    2a10:	2f 91       	pop	r18
    2a12:	0f 90       	pop	r0
    2a14:	0f be       	out	0x3f, r0	; 63
    2a16:	0f 90       	pop	r0
    2a18:	1f 90       	pop	r1
    2a1a:	18 95       	reti

00002a1c <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    2a1c:	e0 91 a4 06 	lds	r30, 0x06A4
    2a20:	f0 91 a5 06 	lds	r31, 0x06A5
    2a24:	e0 5c       	subi	r30, 0xC0	; 192
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	81 91       	ld	r24, Z+
    2a2a:	91 91       	ld	r25, Z+
    2a2c:	20 81       	ld	r18, Z
    2a2e:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    2a30:	82 1b       	sub	r24, r18
    2a32:	93 0b       	sbc	r25, r19
    2a34:	8f 73       	andi	r24, 0x3F	; 63
    2a36:	90 70       	andi	r25, 0x00	; 0
    2a38:	89 2b       	or	r24, r25
    2a3a:	11 f0       	breq	.+4      	; 0x2a40 <_Z14serialEventRunv+0x24>
    2a3c:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <_Z11serialEventv>
    2a40:	08 95       	ret

00002a42 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    2a42:	1f 92       	push	r1
    2a44:	0f 92       	push	r0
    2a46:	0f b6       	in	r0, 0x3f	; 63
    2a48:	0f 92       	push	r0
    2a4a:	11 24       	eor	r1, r1
    2a4c:	2f 93       	push	r18
    2a4e:	3f 93       	push	r19
    2a50:	8f 93       	push	r24
    2a52:	9f 93       	push	r25
    2a54:	ef 93       	push	r30
    2a56:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    2a58:	20 91 94 06 	lds	r18, 0x0694
    2a5c:	30 91 95 06 	lds	r19, 0x0695
    2a60:	80 91 96 06 	lds	r24, 0x0696
    2a64:	90 91 97 06 	lds	r25, 0x0697
    2a68:	28 17       	cp	r18, r24
    2a6a:	39 07       	cpc	r19, r25
    2a6c:	31 f4       	brne	.+12     	; 0x2a7a <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    2a6e:	80 91 c1 00 	lds	r24, 0x00C1
    2a72:	8f 7d       	andi	r24, 0xDF	; 223
    2a74:	80 93 c1 00 	sts	0x00C1, r24
    2a78:	14 c0       	rjmp	.+40     	; 0x2aa2 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    2a7a:	e0 91 96 06 	lds	r30, 0x0696
    2a7e:	f0 91 97 06 	lds	r31, 0x0697
    2a82:	ec 5a       	subi	r30, 0xAC	; 172
    2a84:	f9 4f       	sbci	r31, 0xF9	; 249
    2a86:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    2a88:	80 91 96 06 	lds	r24, 0x0696
    2a8c:	90 91 97 06 	lds	r25, 0x0697
    2a90:	01 96       	adiw	r24, 0x01	; 1
    2a92:	8f 73       	andi	r24, 0x3F	; 63
    2a94:	90 70       	andi	r25, 0x00	; 0
    2a96:	90 93 97 06 	sts	0x0697, r25
    2a9a:	80 93 96 06 	sts	0x0696, r24
	
  #if defined(UDR0)
    UDR0 = c;
    2a9e:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    2aa2:	ff 91       	pop	r31
    2aa4:	ef 91       	pop	r30
    2aa6:	9f 91       	pop	r25
    2aa8:	8f 91       	pop	r24
    2aaa:	3f 91       	pop	r19
    2aac:	2f 91       	pop	r18
    2aae:	0f 90       	pop	r0
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	0f 90       	pop	r0
    2ab4:	1f 90       	pop	r1
    2ab6:	18 95       	reti

00002ab8 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    2ab8:	af 92       	push	r10
    2aba:	bf 92       	push	r11
    2abc:	df 92       	push	r13
    2abe:	ef 92       	push	r14
    2ac0:	ff 92       	push	r15
    2ac2:	0f 93       	push	r16
    2ac4:	1f 93       	push	r17
    2ac6:	cf 93       	push	r28
    2ac8:	df 93       	push	r29
    2aca:	ec 01       	movw	r28, r24
    2acc:	7a 01       	movw	r14, r20
    2ace:	8b 01       	movw	r16, r22
    2ad0:	dd 24       	eor	r13, r13
    2ad2:	40 30       	cpi	r20, 0x00	; 0
    2ad4:	81 ee       	ldi	r24, 0xE1	; 225
    2ad6:	58 07       	cpc	r21, r24
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	68 07       	cpc	r22, r24
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	78 07       	cpc	r23, r24
    2ae0:	11 f0       	breq	.+4      	; 0x2ae6 <_ZN14HardwareSerial5beginEm+0x2e>
    2ae2:	dd 24       	eor	r13, r13
    2ae4:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    2ae6:	91 e0       	ldi	r25, 0x01	; 1
    2ae8:	a9 2e       	mov	r10, r25
    2aea:	b1 2c       	mov	r11, r1
    2aec:	ec 89       	ldd	r30, Y+20	; 0x14
    2aee:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    2af0:	dd 20       	and	r13, r13
    2af2:	69 f0       	breq	.+26     	; 0x2b0e <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    2af4:	c5 01       	movw	r24, r10
    2af6:	08 a0       	ldd	r0, Y+32	; 0x20
    2af8:	02 c0       	rjmp	.+4      	; 0x2afe <_ZN14HardwareSerial5beginEm+0x46>
    2afa:	88 0f       	add	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	0a 94       	dec	r0
    2b00:	e2 f7       	brpl	.-8      	; 0x2afa <_ZN14HardwareSerial5beginEm+0x42>
    2b02:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2b04:	60 e0       	ldi	r22, 0x00	; 0
    2b06:	79 e0       	ldi	r23, 0x09	; 9
    2b08:	8d e3       	ldi	r24, 0x3D	; 61
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	05 c0       	rjmp	.+10     	; 0x2b18 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    2b0e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2b10:	60 e8       	ldi	r22, 0x80	; 128
    2b12:	74 e8       	ldi	r23, 0x84	; 132
    2b14:	8e e1       	ldi	r24, 0x1E	; 30
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	a8 01       	movw	r20, r16
    2b1a:	97 01       	movw	r18, r14
    2b1c:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <__udivmodsi4>
    2b20:	21 50       	subi	r18, 0x01	; 1
    2b22:	30 40       	sbci	r19, 0x00	; 0
    2b24:	40 40       	sbci	r20, 0x00	; 0
    2b26:	50 40       	sbci	r21, 0x00	; 0
    2b28:	56 95       	lsr	r21
    2b2a:	47 95       	ror	r20
    2b2c:	37 95       	ror	r19
    2b2e:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    2b30:	80 e1       	ldi	r24, 0x10	; 16
    2b32:	20 30       	cpi	r18, 0x00	; 0
    2b34:	38 07       	cpc	r19, r24
    2b36:	20 f0       	brcs	.+8      	; 0x2b40 <_ZN14HardwareSerial5beginEm+0x88>
    2b38:	dd 20       	and	r13, r13
    2b3a:	11 f0       	breq	.+4      	; 0x2b40 <_ZN14HardwareSerial5beginEm+0x88>
    2b3c:	dd 24       	eor	r13, r13
    2b3e:	d6 cf       	rjmp	.-84     	; 0x2aec <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2b40:	e8 89       	ldd	r30, Y+16	; 0x10
    2b42:	f9 89       	ldd	r31, Y+17	; 0x11
    2b44:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2b46:	ea 89       	ldd	r30, Y+18	; 0x12
    2b48:	fb 89       	ldd	r31, Y+19	; 0x13
    2b4a:	20 83       	st	Z, r18

  transmitting = false;
    2b4c:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    2b4e:	ee 89       	ldd	r30, Y+22	; 0x16
    2b50:	ff 89       	ldd	r31, Y+23	; 0x17
    2b52:	40 81       	ld	r20, Z
    2b54:	21 e0       	ldi	r18, 0x01	; 1
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	c9 01       	movw	r24, r18
    2b5a:	0c 8c       	ldd	r0, Y+28	; 0x1c
    2b5c:	02 c0       	rjmp	.+4      	; 0x2b62 <_ZN14HardwareSerial5beginEm+0xaa>
    2b5e:	88 0f       	add	r24, r24
    2b60:	99 1f       	adc	r25, r25
    2b62:	0a 94       	dec	r0
    2b64:	e2 f7       	brpl	.-8      	; 0x2b5e <_ZN14HardwareSerial5beginEm+0xa6>
    2b66:	48 2b       	or	r20, r24
    2b68:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    2b6a:	ee 89       	ldd	r30, Y+22	; 0x16
    2b6c:	ff 89       	ldd	r31, Y+23	; 0x17
    2b6e:	40 81       	ld	r20, Z
    2b70:	c9 01       	movw	r24, r18
    2b72:	0d 8c       	ldd	r0, Y+29	; 0x1d
    2b74:	02 c0       	rjmp	.+4      	; 0x2b7a <_ZN14HardwareSerial5beginEm+0xc2>
    2b76:	88 0f       	add	r24, r24
    2b78:	99 1f       	adc	r25, r25
    2b7a:	0a 94       	dec	r0
    2b7c:	e2 f7       	brpl	.-8      	; 0x2b76 <_ZN14HardwareSerial5beginEm+0xbe>
    2b7e:	48 2b       	or	r20, r24
    2b80:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    2b82:	ee 89       	ldd	r30, Y+22	; 0x16
    2b84:	ff 89       	ldd	r31, Y+23	; 0x17
    2b86:	40 81       	ld	r20, Z
    2b88:	c9 01       	movw	r24, r18
    2b8a:	0e 8c       	ldd	r0, Y+30	; 0x1e
    2b8c:	02 c0       	rjmp	.+4      	; 0x2b92 <_ZN14HardwareSerial5beginEm+0xda>
    2b8e:	88 0f       	add	r24, r24
    2b90:	99 1f       	adc	r25, r25
    2b92:	0a 94       	dec	r0
    2b94:	e2 f7       	brpl	.-8      	; 0x2b8e <_ZN14HardwareSerial5beginEm+0xd6>
    2b96:	48 2b       	or	r20, r24
    2b98:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    2b9a:	ee 89       	ldd	r30, Y+22	; 0x16
    2b9c:	ff 89       	ldd	r31, Y+23	; 0x17
    2b9e:	80 81       	ld	r24, Z
    2ba0:	0f 8c       	ldd	r0, Y+31	; 0x1f
    2ba2:	02 c0       	rjmp	.+4      	; 0x2ba8 <_ZN14HardwareSerial5beginEm+0xf0>
    2ba4:	22 0f       	add	r18, r18
    2ba6:	33 1f       	adc	r19, r19
    2ba8:	0a 94       	dec	r0
    2baa:	e2 f7       	brpl	.-8      	; 0x2ba4 <_ZN14HardwareSerial5beginEm+0xec>
    2bac:	20 95       	com	r18
    2bae:	28 23       	and	r18, r24
    2bb0:	20 83       	st	Z, r18
}
    2bb2:	df 91       	pop	r29
    2bb4:	cf 91       	pop	r28
    2bb6:	1f 91       	pop	r17
    2bb8:	0f 91       	pop	r16
    2bba:	ff 90       	pop	r15
    2bbc:	ef 90       	pop	r14
    2bbe:	df 90       	pop	r13
    2bc0:	bf 90       	pop	r11
    2bc2:	af 90       	pop	r10
    2bc4:	08 95       	ret

00002bc6 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	1c 96       	adiw	r26, 0x0c	; 12
    2bca:	ed 91       	ld	r30, X+
    2bcc:	fc 91       	ld	r31, X
    2bce:	1d 97       	sbiw	r26, 0x0d	; 13
    2bd0:	e0 5c       	subi	r30, 0xC0	; 192
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	21 91       	ld	r18, Z+
    2bd6:	31 91       	ld	r19, Z+
    2bd8:	80 81       	ld	r24, Z
    2bda:	91 81       	ldd	r25, Z+1	; 0x01
    2bdc:	28 1b       	sub	r18, r24
    2bde:	39 0b       	sbc	r19, r25
    2be0:	2f 73       	andi	r18, 0x3F	; 63
    2be2:	30 70       	andi	r19, 0x00	; 0
}
    2be4:	c9 01       	movw	r24, r18
    2be6:	08 95       	ret

00002be8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    2be8:	dc 01       	movw	r26, r24
    2bea:	1c 96       	adiw	r26, 0x0c	; 12
    2bec:	ed 91       	ld	r30, X+
    2bee:	fc 91       	ld	r31, X
    2bf0:	1d 97       	sbiw	r26, 0x0d	; 13
    2bf2:	e0 5c       	subi	r30, 0xC0	; 192
    2bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf6:	20 81       	ld	r18, Z
    2bf8:	31 81       	ldd	r19, Z+1	; 0x01
    2bfa:	e0 54       	subi	r30, 0x40	; 64
    2bfc:	f0 40       	sbci	r31, 0x00	; 0
    2bfe:	df 01       	movw	r26, r30
    2c00:	ae 5b       	subi	r26, 0xBE	; 190
    2c02:	bf 4f       	sbci	r27, 0xFF	; 255
    2c04:	8d 91       	ld	r24, X+
    2c06:	9c 91       	ld	r25, X
    2c08:	11 97       	sbiw	r26, 0x01	; 1
    2c0a:	28 17       	cp	r18, r24
    2c0c:	39 07       	cpc	r19, r25
    2c0e:	19 f4       	brne	.+6      	; 0x2c16 <_ZN14HardwareSerial4peekEv+0x2e>
    2c10:	2f ef       	ldi	r18, 0xFF	; 255
    2c12:	3f ef       	ldi	r19, 0xFF	; 255
    2c14:	07 c0       	rjmp	.+14     	; 0x2c24 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    2c16:	8d 91       	ld	r24, X+
    2c18:	9c 91       	ld	r25, X
    2c1a:	e8 0f       	add	r30, r24
    2c1c:	f9 1f       	adc	r31, r25
    2c1e:	80 81       	ld	r24, Z
    2c20:	28 2f       	mov	r18, r24
    2c22:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    2c24:	c9 01       	movw	r24, r18
    2c26:	08 95       	ret

00002c28 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    2c28:	dc 01       	movw	r26, r24
    2c2a:	1c 96       	adiw	r26, 0x0c	; 12
    2c2c:	ed 91       	ld	r30, X+
    2c2e:	fc 91       	ld	r31, X
    2c30:	1d 97       	sbiw	r26, 0x0d	; 13
    2c32:	e0 5c       	subi	r30, 0xC0	; 192
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	20 81       	ld	r18, Z
    2c38:	31 81       	ldd	r19, Z+1	; 0x01
    2c3a:	e0 54       	subi	r30, 0x40	; 64
    2c3c:	f0 40       	sbci	r31, 0x00	; 0
    2c3e:	df 01       	movw	r26, r30
    2c40:	ae 5b       	subi	r26, 0xBE	; 190
    2c42:	bf 4f       	sbci	r27, 0xFF	; 255
    2c44:	8d 91       	ld	r24, X+
    2c46:	9c 91       	ld	r25, X
    2c48:	11 97       	sbiw	r26, 0x01	; 1
    2c4a:	28 17       	cp	r18, r24
    2c4c:	39 07       	cpc	r19, r25
    2c4e:	19 f4       	brne	.+6      	; 0x2c56 <_ZN14HardwareSerial4readEv+0x2e>
    2c50:	2f ef       	ldi	r18, 0xFF	; 255
    2c52:	3f ef       	ldi	r19, 0xFF	; 255
    2c54:	10 c0       	rjmp	.+32     	; 0x2c76 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    2c56:	8d 91       	ld	r24, X+
    2c58:	9c 91       	ld	r25, X
    2c5a:	11 97       	sbiw	r26, 0x01	; 1
    2c5c:	e8 0f       	add	r30, r24
    2c5e:	f9 1f       	adc	r31, r25
    2c60:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    2c62:	8d 91       	ld	r24, X+
    2c64:	9c 91       	ld	r25, X
    2c66:	11 97       	sbiw	r26, 0x01	; 1
    2c68:	01 96       	adiw	r24, 0x01	; 1
    2c6a:	8f 73       	andi	r24, 0x3F	; 63
    2c6c:	90 70       	andi	r25, 0x00	; 0
    2c6e:	11 96       	adiw	r26, 0x01	; 1
    2c70:	9c 93       	st	X, r25
    2c72:	8e 93       	st	-X, r24
    return c;
    2c74:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    2c76:	c9 01       	movw	r24, r18
    2c78:	08 95       	ret

00002c7a <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
    2c7a:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    2c7c:	91 96       	adiw	r26, 0x21	; 33
    2c7e:	8c 91       	ld	r24, X
    2c80:	91 97       	sbiw	r26, 0x21	; 33
    2c82:	88 23       	and	r24, r24
    2c84:	39 f0       	breq	.+14     	; 0x2c94 <_ZN14HardwareSerial5flushEv+0x1a>
    2c86:	54 96       	adiw	r26, 0x14	; 20
    2c88:	ed 91       	ld	r30, X+
    2c8a:	fc 91       	ld	r31, X
    2c8c:	55 97       	sbiw	r26, 0x15	; 21
    2c8e:	80 81       	ld	r24, Z
    2c90:	86 ff       	sbrs	r24, 6
    2c92:	f9 cf       	rjmp	.-14     	; 0x2c86 <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
    2c94:	91 96       	adiw	r26, 0x21	; 33
    2c96:	1c 92       	st	X, r1
}
    2c98:	08 95       	ret

00002c9a <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    2c9a:	cf 93       	push	r28
    2c9c:	df 93       	push	r29
    2c9e:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    2ca0:	ee 85       	ldd	r30, Y+14	; 0x0e
    2ca2:	ff 85       	ldd	r31, Y+15	; 0x0f
    2ca4:	e0 5c       	subi	r30, 0xC0	; 192
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	20 81       	ld	r18, Z
    2caa:	31 81       	ldd	r19, Z+1	; 0x01
    2cac:	e0 54       	subi	r30, 0x40	; 64
    2cae:	f0 40       	sbci	r31, 0x00	; 0
    2cb0:	2f 5f       	subi	r18, 0xFF	; 255
    2cb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb4:	2f 73       	andi	r18, 0x3F	; 63
    2cb6:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    2cb8:	df 01       	movw	r26, r30
    2cba:	ae 5b       	subi	r26, 0xBE	; 190
    2cbc:	bf 4f       	sbci	r27, 0xFF	; 255
    2cbe:	8d 91       	ld	r24, X+
    2cc0:	9c 91       	ld	r25, X
    2cc2:	11 97       	sbiw	r26, 0x01	; 1
    2cc4:	28 17       	cp	r18, r24
    2cc6:	39 07       	cpc	r19, r25
    2cc8:	d1 f3       	breq	.-12     	; 0x2cbe <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    2cca:	e0 5c       	subi	r30, 0xC0	; 192
    2ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cce:	80 81       	ld	r24, Z
    2cd0:	91 81       	ldd	r25, Z+1	; 0x01
    2cd2:	e0 54       	subi	r30, 0x40	; 64
    2cd4:	f0 40       	sbci	r31, 0x00	; 0
    2cd6:	e8 0f       	add	r30, r24
    2cd8:	f9 1f       	adc	r31, r25
    2cda:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    2cdc:	ee 85       	ldd	r30, Y+14	; 0x0e
    2cde:	ff 85       	ldd	r31, Y+15	; 0x0f
    2ce0:	e0 5c       	subi	r30, 0xC0	; 192
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	31 83       	std	Z+1, r19	; 0x01
    2ce6:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    2ce8:	ee 89       	ldd	r30, Y+22	; 0x16
    2cea:	ff 89       	ldd	r31, Y+23	; 0x17
    2cec:	20 81       	ld	r18, Z
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	0f 8c       	ldd	r0, Y+31	; 0x1f
    2cf4:	02 c0       	rjmp	.+4      	; 0x2cfa <_ZN14HardwareSerial5writeEh+0x60>
    2cf6:	88 0f       	add	r24, r24
    2cf8:	99 1f       	adc	r25, r25
    2cfa:	0a 94       	dec	r0
    2cfc:	e2 f7       	brpl	.-8      	; 0x2cf6 <_ZN14HardwareSerial5writeEh+0x5c>
    2cfe:	28 2b       	or	r18, r24
    2d00:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    2d06:	ec 89       	ldd	r30, Y+20	; 0x14
    2d08:	fd 89       	ldd	r31, Y+21	; 0x15
    2d0a:	80 81       	ld	r24, Z
    2d0c:	80 64       	ori	r24, 0x40	; 64
    2d0e:	80 83       	st	Z, r24
  
  return 1;
}
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	df 91       	pop	r29
    2d16:	cf 91       	pop	r28
    2d18:	08 95       	ret

00002d1a <_GLOBAL__I_rx_buffer>:
    2d1a:	10 92 9b 06 	sts	0x069B, r1
    2d1e:	10 92 9a 06 	sts	0x069A, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2d22:	88 ee       	ldi	r24, 0xE8	; 232
    2d24:	93 e0       	ldi	r25, 0x03	; 3
    2d26:	a0 e0       	ldi	r26, 0x00	; 0
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	80 93 9c 06 	sts	0x069C, r24
    2d2e:	90 93 9d 06 	sts	0x069D, r25
    2d32:	a0 93 9e 06 	sts	0x069E, r26
    2d36:	b0 93 9f 06 	sts	0x069F, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    2d3a:	8e ec       	ldi	r24, 0xCE	; 206
    2d3c:	91 e0       	ldi	r25, 0x01	; 1
    2d3e:	90 93 99 06 	sts	0x0699, r25
    2d42:	80 93 98 06 	sts	0x0698, r24
{
  _rx_buffer = rx_buffer;
    2d46:	80 e1       	ldi	r24, 0x10	; 16
    2d48:	96 e0       	ldi	r25, 0x06	; 6
    2d4a:	90 93 a5 06 	sts	0x06A5, r25
    2d4e:	80 93 a4 06 	sts	0x06A4, r24
  _tx_buffer = tx_buffer;
    2d52:	84 e5       	ldi	r24, 0x54	; 84
    2d54:	96 e0       	ldi	r25, 0x06	; 6
    2d56:	90 93 a7 06 	sts	0x06A7, r25
    2d5a:	80 93 a6 06 	sts	0x06A6, r24
  _ubrrh = ubrrh;
    2d5e:	85 ec       	ldi	r24, 0xC5	; 197
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	90 93 a9 06 	sts	0x06A9, r25
    2d66:	80 93 a8 06 	sts	0x06A8, r24
  _ubrrl = ubrrl;
    2d6a:	84 ec       	ldi	r24, 0xC4	; 196
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	90 93 ab 06 	sts	0x06AB, r25
    2d72:	80 93 aa 06 	sts	0x06AA, r24
  _ucsra = ucsra;
    2d76:	80 ec       	ldi	r24, 0xC0	; 192
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	90 93 ad 06 	sts	0x06AD, r25
    2d7e:	80 93 ac 06 	sts	0x06AC, r24
  _ucsrb = ucsrb;
    2d82:	81 ec       	ldi	r24, 0xC1	; 193
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	90 93 af 06 	sts	0x06AF, r25
    2d8a:	80 93 ae 06 	sts	0x06AE, r24
  _ucsrc = ucsrc;
    2d8e:	82 ec       	ldi	r24, 0xC2	; 194
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	90 93 b1 06 	sts	0x06B1, r25
    2d96:	80 93 b0 06 	sts	0x06B0, r24
  _udr = udr;
    2d9a:	86 ec       	ldi	r24, 0xC6	; 198
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	90 93 b3 06 	sts	0x06B3, r25
    2da2:	80 93 b2 06 	sts	0x06B2, r24
  _rxen = rxen;
    2da6:	84 e0       	ldi	r24, 0x04	; 4
    2da8:	80 93 b4 06 	sts	0x06B4, r24
  _txen = txen;
    2dac:	83 e0       	ldi	r24, 0x03	; 3
    2dae:	80 93 b5 06 	sts	0x06B5, r24
  _rxcie = rxcie;
    2db2:	87 e0       	ldi	r24, 0x07	; 7
    2db4:	80 93 b6 06 	sts	0x06B6, r24
  _udrie = udrie;
    2db8:	85 e0       	ldi	r24, 0x05	; 5
    2dba:	80 93 b7 06 	sts	0x06B7, r24
  _u2x = u2x;
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	80 93 b8 06 	sts	0x06B8, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    2dc4:	08 95       	ret

00002dc6 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    2dc6:	cf 92       	push	r12
    2dc8:	df 92       	push	r13
    2dca:	ef 92       	push	r14
    2dcc:	ff 92       	push	r15
    2dce:	0f 93       	push	r16
    2dd0:	1f 93       	push	r17
    2dd2:	cf 93       	push	r28
    2dd4:	df 93       	push	r29
    2dd6:	7c 01       	movw	r14, r24
    2dd8:	6b 01       	movw	r12, r22
    2dda:	8a 01       	movw	r16, r20
    2ddc:	c0 e0       	ldi	r28, 0x00	; 0
    2dde:	d0 e0       	ldi	r29, 0x00	; 0
    2de0:	0f c0       	rjmp	.+30     	; 0x2e00 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    2de2:	d6 01       	movw	r26, r12
    2de4:	6d 91       	ld	r22, X+
    2de6:	6d 01       	movw	r12, r26
    2de8:	d7 01       	movw	r26, r14
    2dea:	ed 91       	ld	r30, X+
    2dec:	fc 91       	ld	r31, X
    2dee:	01 90       	ld	r0, Z+
    2df0:	f0 81       	ld	r31, Z
    2df2:	e0 2d       	mov	r30, r0
    2df4:	c7 01       	movw	r24, r14
    2df6:	09 95       	icall
    2df8:	c8 0f       	add	r28, r24
    2dfa:	d9 1f       	adc	r29, r25
    2dfc:	01 50       	subi	r16, 0x01	; 1
    2dfe:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    2e00:	01 15       	cp	r16, r1
    2e02:	11 05       	cpc	r17, r1
    2e04:	71 f7       	brne	.-36     	; 0x2de2 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    2e06:	ce 01       	movw	r24, r28
    2e08:	df 91       	pop	r29
    2e0a:	cf 91       	pop	r28
    2e0c:	1f 91       	pop	r17
    2e0e:	0f 91       	pop	r16
    2e10:	ff 90       	pop	r15
    2e12:	ef 90       	pop	r14
    2e14:	df 90       	pop	r13
    2e16:	cf 90       	pop	r12
    2e18:	08 95       	ret

00002e1a <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    2e1a:	dc 01       	movw	r26, r24
{
  return write(c);
    2e1c:	ed 91       	ld	r30, X+
    2e1e:	fc 91       	ld	r31, X
    2e20:	01 90       	ld	r0, Z+
    2e22:	f0 81       	ld	r31, Z
    2e24:	e0 2d       	mov	r30, r0
    2e26:	09 95       	icall
}
    2e28:	08 95       	ret

00002e2a <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    2e2a:	ef 92       	push	r14
    2e2c:	ff 92       	push	r15
    2e2e:	0f 93       	push	r16
    2e30:	1f 93       	push	r17
    2e32:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    2e34:	dc 01       	movw	r26, r24
    2e36:	ed 91       	ld	r30, X+
    2e38:	fc 91       	ld	r31, X
    2e3a:	01 90       	ld	r0, Z+
    2e3c:	f0 81       	ld	r31, Z
    2e3e:	e0 2d       	mov	r30, r0
    2e40:	6d e0       	ldi	r22, 0x0D	; 13
    2e42:	09 95       	icall
    2e44:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    2e46:	d8 01       	movw	r26, r16
    2e48:	ed 91       	ld	r30, X+
    2e4a:	fc 91       	ld	r31, X
    2e4c:	01 90       	ld	r0, Z+
    2e4e:	f0 81       	ld	r31, Z
    2e50:	e0 2d       	mov	r30, r0
    2e52:	c8 01       	movw	r24, r16
    2e54:	6a e0       	ldi	r22, 0x0A	; 10
    2e56:	09 95       	icall
    2e58:	9c 01       	movw	r18, r24
    2e5a:	2e 0d       	add	r18, r14
    2e5c:	3f 1d       	adc	r19, r15
    2e5e:	c9 01       	movw	r24, r18
    2e60:	1f 91       	pop	r17
    2e62:	0f 91       	pop	r16
    2e64:	ff 90       	pop	r15
    2e66:	ef 90       	pop	r14
    2e68:	08 95       	ret

00002e6a <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    2e6a:	cf 93       	push	r28
    2e6c:	df 93       	push	r29
    2e6e:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    2e70:	61 15       	cp	r22, r1
    2e72:	71 05       	cpc	r23, r1
    2e74:	19 f4       	brne	.+6      	; 0x2e7c <_ZN5Print5writeEPKc+0x12>
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	0f c0       	rjmp	.+30     	; 0x2e9a <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    2e7c:	db 01       	movw	r26, r22
    2e7e:	0d 90       	ld	r0, X+
    2e80:	00 20       	and	r0, r0
    2e82:	e9 f7       	brne	.-6      	; 0x2e7e <_ZN5Print5writeEPKc+0x14>
    2e84:	11 97       	sbiw	r26, 0x01	; 1
    2e86:	a6 1b       	sub	r26, r22
    2e88:	b7 0b       	sbc	r27, r23
    2e8a:	e8 81       	ld	r30, Y
    2e8c:	f9 81       	ldd	r31, Y+1	; 0x01
    2e8e:	02 80       	ldd	r0, Z+2	; 0x02
    2e90:	f3 81       	ldd	r31, Z+3	; 0x03
    2e92:	e0 2d       	mov	r30, r0
    2e94:	ad 01       	movw	r20, r26
    2e96:	09 95       	icall
    2e98:	9c 01       	movw	r18, r24
    }
    2e9a:	c9 01       	movw	r24, r18
    2e9c:	df 91       	pop	r29
    2e9e:	cf 91       	pop	r28
    2ea0:	08 95       	ret

00002ea2 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    2ea2:	4f 92       	push	r4
    2ea4:	5f 92       	push	r5
    2ea6:	7f 92       	push	r7
    2ea8:	8f 92       	push	r8
    2eaa:	9f 92       	push	r9
    2eac:	af 92       	push	r10
    2eae:	bf 92       	push	r11
    2eb0:	cf 92       	push	r12
    2eb2:	df 92       	push	r13
    2eb4:	ef 92       	push	r14
    2eb6:	ff 92       	push	r15
    2eb8:	0f 93       	push	r16
    2eba:	1f 93       	push	r17
    2ebc:	df 93       	push	r29
    2ebe:	cf 93       	push	r28
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
    2ec4:	a1 97       	sbiw	r28, 0x21	; 33
    2ec6:	0f b6       	in	r0, 0x3f	; 63
    2ec8:	f8 94       	cli
    2eca:	de bf       	out	0x3e, r29	; 62
    2ecc:	0f be       	out	0x3f, r0	; 63
    2ece:	cd bf       	out	0x3d, r28	; 61
    2ed0:	2c 01       	movw	r4, r24
    2ed2:	74 2e       	mov	r7, r20
    2ed4:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    2ed6:	22 30       	cpi	r18, 0x02	; 2
    2ed8:	08 f4       	brcc	.+2      	; 0x2edc <_ZN5Print11printNumberEmh+0x3a>
    2eda:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    2edc:	19 a2       	std	Y+33, r1	; 0x21
    2ede:	31 e2       	ldi	r19, 0x21	; 33
    2ee0:	c3 2e       	mov	r12, r19
    2ee2:	d1 2c       	mov	r13, r1
    2ee4:	cc 0e       	add	r12, r28
    2ee6:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    2ee8:	82 2e       	mov	r8, r18
    2eea:	99 24       	eor	r9, r9
    2eec:	aa 24       	eor	r10, r10
    2eee:	bb 24       	eor	r11, r11
    2ef0:	67 2d       	mov	r22, r7
    2ef2:	75 2f       	mov	r23, r21
    2ef4:	a5 01       	movw	r20, r10
    2ef6:	94 01       	movw	r18, r8
    2ef8:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <__udivmodsi4>
    2efc:	79 01       	movw	r14, r18
    2efe:	8a 01       	movw	r16, r20
    char c = m - base * n;
    2f00:	c8 01       	movw	r24, r16
    2f02:	b7 01       	movw	r22, r14
    2f04:	a5 01       	movw	r20, r10
    2f06:	94 01       	movw	r18, r8
    2f08:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <__mulsi3>
    2f0c:	47 2d       	mov	r20, r7
    2f0e:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2f10:	08 94       	sec
    2f12:	c1 08       	sbc	r12, r1
    2f14:	d1 08       	sbc	r13, r1
    2f16:	4a 30       	cpi	r20, 0x0A	; 10
    2f18:	14 f4       	brge	.+4      	; 0x2f1e <_ZN5Print11printNumberEmh+0x7c>
    2f1a:	40 5d       	subi	r20, 0xD0	; 208
    2f1c:	01 c0       	rjmp	.+2      	; 0x2f20 <_ZN5Print11printNumberEmh+0x7e>
    2f1e:	49 5c       	subi	r20, 0xC9	; 201
    2f20:	f6 01       	movw	r30, r12
    2f22:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    2f24:	e1 14       	cp	r14, r1
    2f26:	f1 04       	cpc	r15, r1
    2f28:	01 05       	cpc	r16, r1
    2f2a:	11 05       	cpc	r17, r1
    2f2c:	21 f0       	breq	.+8      	; 0x2f36 <_ZN5Print11printNumberEmh+0x94>
    2f2e:	7e 2c       	mov	r7, r14
    2f30:	5f 2d       	mov	r21, r15
    2f32:	c8 01       	movw	r24, r16
    2f34:	dd cf       	rjmp	.-70     	; 0x2ef0 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    2f36:	c2 01       	movw	r24, r4
    2f38:	b6 01       	movw	r22, r12
    2f3a:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN5Print5writeEPKc>
}
    2f3e:	a1 96       	adiw	r28, 0x21	; 33
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	de bf       	out	0x3e, r29	; 62
    2f46:	0f be       	out	0x3f, r0	; 63
    2f48:	cd bf       	out	0x3d, r28	; 61
    2f4a:	cf 91       	pop	r28
    2f4c:	df 91       	pop	r29
    2f4e:	1f 91       	pop	r17
    2f50:	0f 91       	pop	r16
    2f52:	ff 90       	pop	r15
    2f54:	ef 90       	pop	r14
    2f56:	df 90       	pop	r13
    2f58:	cf 90       	pop	r12
    2f5a:	bf 90       	pop	r11
    2f5c:	af 90       	pop	r10
    2f5e:	9f 90       	pop	r9
    2f60:	8f 90       	pop	r8
    2f62:	7f 90       	pop	r7
    2f64:	5f 90       	pop	r5
    2f66:	4f 90       	pop	r4
    2f68:	08 95       	ret

00002f6a <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    2f6a:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    2f6c:	21 15       	cp	r18, r1
    2f6e:	31 05       	cpc	r19, r1
    2f70:	41 f4       	brne	.+16     	; 0x2f82 <_ZN5Print5printEmi+0x18>
    2f72:	ed 91       	ld	r30, X+
    2f74:	fc 91       	ld	r31, X
    2f76:	01 90       	ld	r0, Z+
    2f78:	f0 81       	ld	r31, Z
    2f7a:	e0 2d       	mov	r30, r0
    2f7c:	64 2f       	mov	r22, r20
    2f7e:	09 95       	icall
    2f80:	08 95       	ret
  else return printNumber(n, base);
    2f82:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <_ZN5Print11printNumberEmh>
}
    2f86:	08 95       	ret

00002f88 <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    2f88:	ef 92       	push	r14
    2f8a:	ff 92       	push	r15
    2f8c:	0f 93       	push	r16
    2f8e:	1f 93       	push	r17
    2f90:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    2f92:	e6 2e       	mov	r14, r22
    2f94:	ff 24       	eor	r15, r15
    2f96:	00 e0       	ldi	r16, 0x00	; 0
    2f98:	10 e0       	ldi	r17, 0x00	; 0
    2f9a:	b8 01       	movw	r22, r16
    2f9c:	a7 01       	movw	r20, r14
    2f9e:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <_ZN5Print5printEmi>
}
    2fa2:	1f 91       	pop	r17
    2fa4:	0f 91       	pop	r16
    2fa6:	ff 90       	pop	r15
    2fa8:	ef 90       	pop	r14
    2faa:	08 95       	ret

00002fac <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    2fac:	cf 92       	push	r12
    2fae:	df 92       	push	r13
    2fb0:	ef 92       	push	r14
    2fb2:	ff 92       	push	r15
    2fb4:	0f 93       	push	r16
    2fb6:	1f 93       	push	r17
    2fb8:	cf 93       	push	r28
    2fba:	df 93       	push	r29
    2fbc:	ec 01       	movw	r28, r24
    2fbe:	6a 01       	movw	r12, r20
    2fc0:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    2fc2:	21 15       	cp	r18, r1
    2fc4:	31 05       	cpc	r19, r1
    2fc6:	41 f4       	brne	.+16     	; 0x2fd8 <_ZN5Print5printEli+0x2c>
    return write(n);
    2fc8:	e8 81       	ld	r30, Y
    2fca:	f9 81       	ldd	r31, Y+1	; 0x01
    2fcc:	01 90       	ld	r0, Z+
    2fce:	f0 81       	ld	r31, Z
    2fd0:	e0 2d       	mov	r30, r0
    2fd2:	64 2f       	mov	r22, r20
    2fd4:	09 95       	icall
    2fd6:	1f c0       	rjmp	.+62     	; 0x3016 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    2fd8:	2a 30       	cpi	r18, 0x0A	; 10
    2fda:	31 05       	cpc	r19, r1
    2fdc:	d1 f4       	brne	.+52     	; 0x3012 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    2fde:	77 ff       	sbrs	r23, 7
    2fe0:	17 c0       	rjmp	.+46     	; 0x3010 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    2fe2:	e8 81       	ld	r30, Y
    2fe4:	f9 81       	ldd	r31, Y+1	; 0x01
    2fe6:	01 90       	ld	r0, Z+
    2fe8:	f0 81       	ld	r31, Z
    2fea:	e0 2d       	mov	r30, r0
    2fec:	6d e2       	ldi	r22, 0x2D	; 45
    2fee:	09 95       	icall
    2ff0:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    2ff2:	44 27       	eor	r20, r20
    2ff4:	55 27       	eor	r21, r21
    2ff6:	ba 01       	movw	r22, r20
    2ff8:	4c 19       	sub	r20, r12
    2ffa:	5d 09       	sbc	r21, r13
    2ffc:	6e 09       	sbc	r22, r14
    2ffe:	7f 09       	sbc	r23, r15
    3000:	ce 01       	movw	r24, r28
    3002:	2a e0       	ldi	r18, 0x0A	; 10
    3004:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <_ZN5Print11printNumberEmh>
    3008:	98 01       	movw	r18, r16
    300a:	28 0f       	add	r18, r24
    300c:	39 1f       	adc	r19, r25
    300e:	04 c0       	rjmp	.+8      	; 0x3018 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    3010:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    3012:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <_ZN5Print11printNumberEmh>
    3016:	9c 01       	movw	r18, r24
  }
}
    3018:	c9 01       	movw	r24, r18
    301a:	df 91       	pop	r29
    301c:	cf 91       	pop	r28
    301e:	1f 91       	pop	r17
    3020:	0f 91       	pop	r16
    3022:	ff 90       	pop	r15
    3024:	ef 90       	pop	r14
    3026:	df 90       	pop	r13
    3028:	cf 90       	pop	r12
    302a:	08 95       	ret

0000302c <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    302c:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN5Print5writeEPKc>
}
    3030:	08 95       	ret

00003032 <_ZN5Print10printFloatEdh>:
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
    3032:	7f 92       	push	r7
    3034:	8f 92       	push	r8
    3036:	9f 92       	push	r9
    3038:	af 92       	push	r10
    303a:	bf 92       	push	r11
    303c:	cf 92       	push	r12
    303e:	df 92       	push	r13
    3040:	ef 92       	push	r14
    3042:	ff 92       	push	r15
    3044:	0f 93       	push	r16
    3046:	1f 93       	push	r17
    3048:	cf 93       	push	r28
    304a:	df 93       	push	r29
    304c:	4c 01       	movw	r8, r24
    304e:	7a 01       	movw	r14, r20
    3050:	8b 01       	movw	r16, r22
    3052:	72 2e       	mov	r7, r18
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    3054:	cb 01       	movw	r24, r22
    3056:	ba 01       	movw	r22, r20
    3058:	a8 01       	movw	r20, r16
    305a:	97 01       	movw	r18, r14
    305c:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__unordsf2>
    3060:	88 23       	and	r24, r24
    3062:	21 f0       	breq	.+8      	; 0x306c <_ZN5Print10printFloatEdh+0x3a>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    3064:	c4 01       	movw	r24, r8
    3066:	64 e8       	ldi	r22, 0x84	; 132
    3068:	71 e0       	ldi	r23, 0x01	; 1
    306a:	21 c0       	rjmp	.+66     	; 0x30ae <_ZN5Print10printFloatEdh+0x7c>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    306c:	c0 e0       	ldi	r28, 0x00	; 0
    306e:	d0 e0       	ldi	r29, 0x00	; 0
    3070:	57 01       	movw	r10, r14
    3072:	68 01       	movw	r12, r16
    3074:	e8 94       	clt
    3076:	d7 f8       	bld	r13, 7
    3078:	c6 01       	movw	r24, r12
    307a:	b5 01       	movw	r22, r10
    307c:	2f ef       	ldi	r18, 0xFF	; 255
    307e:	3f ef       	ldi	r19, 0xFF	; 255
    3080:	4f e7       	ldi	r20, 0x7F	; 127
    3082:	5f e7       	ldi	r21, 0x7F	; 127
    3084:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__unordsf2>
    3088:	88 23       	and	r24, r24
    308a:	51 f4       	brne	.+20     	; 0x30a0 <_ZN5Print10printFloatEdh+0x6e>
    308c:	c6 01       	movw	r24, r12
    308e:	b5 01       	movw	r22, r10
    3090:	2f ef       	ldi	r18, 0xFF	; 255
    3092:	3f ef       	ldi	r19, 0xFF	; 255
    3094:	4f e7       	ldi	r20, 0x7F	; 127
    3096:	5f e7       	ldi	r21, 0x7F	; 127
    3098:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__cmpsf2>
    309c:	18 16       	cp	r1, r24
    309e:	14 f0       	brlt	.+4      	; 0x30a4 <_ZN5Print10printFloatEdh+0x72>
    30a0:	c1 e0       	ldi	r28, 0x01	; 1
    30a2:	d0 e0       	ldi	r29, 0x00	; 0
    30a4:	21 97       	sbiw	r28, 0x01	; 1
    30a6:	39 f0       	breq	.+14     	; 0x30b6 <_ZN5Print10printFloatEdh+0x84>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    30a8:	c4 01       	movw	r24, r8
    30aa:	68 e8       	ldi	r22, 0x88	; 136
    30ac:	71 e0       	ldi	r23, 0x01	; 1
    30ae:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN5Print5writeEPKc>
    30b2:	ec 01       	movw	r28, r24
    30b4:	93 c0       	rjmp	.+294    	; 0x31dc <_ZN5Print10printFloatEdh+0x1aa>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    30b6:	c8 01       	movw	r24, r16
    30b8:	b7 01       	movw	r22, r14
    30ba:	2f ef       	ldi	r18, 0xFF	; 255
    30bc:	3f ef       	ldi	r19, 0xFF	; 255
    30be:	4f e7       	ldi	r20, 0x7F	; 127
    30c0:	5f e4       	ldi	r21, 0x4F	; 79
    30c2:	0e 94 c0 1c 	call	0x3980	; 0x3980 <__gesf2>
    30c6:	18 16       	cp	r1, r24
    30c8:	54 f0       	brlt	.+20     	; 0x30de <_ZN5Print10printFloatEdh+0xac>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    30ca:	c8 01       	movw	r24, r16
    30cc:	b7 01       	movw	r22, r14
    30ce:	2f ef       	ldi	r18, 0xFF	; 255
    30d0:	3f ef       	ldi	r19, 0xFF	; 255
    30d2:	4f e7       	ldi	r20, 0x7F	; 127
    30d4:	5f ec       	ldi	r21, 0xCF	; 207
    30d6:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__cmpsf2>
    30da:	88 23       	and	r24, r24
    30dc:	24 f4       	brge	.+8      	; 0x30e6 <_ZN5Print10printFloatEdh+0xb4>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    30de:	c4 01       	movw	r24, r8
    30e0:	6c e8       	ldi	r22, 0x8C	; 140
    30e2:	71 e0       	ldi	r23, 0x01	; 1
    30e4:	e4 cf       	rjmp	.-56     	; 0x30ae <_ZN5Print10printFloatEdh+0x7c>
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    30e6:	c8 01       	movw	r24, r16
    30e8:	b7 01       	movw	r22, r14
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	40 e0       	ldi	r20, 0x00	; 0
    30f0:	50 e0       	ldi	r21, 0x00	; 0
    30f2:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__cmpsf2>
    30f6:	87 fd       	sbrc	r24, 7
    30f8:	03 c0       	rjmp	.+6      	; 0x3100 <_ZN5Print10printFloatEdh+0xce>
    30fa:	c0 e0       	ldi	r28, 0x00	; 0
    30fc:	d0 e0       	ldi	r29, 0x00	; 0
    30fe:	0e c0       	rjmp	.+28     	; 0x311c <_ZN5Print10printFloatEdh+0xea>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    3100:	d4 01       	movw	r26, r8
    3102:	ed 91       	ld	r30, X+
    3104:	fc 91       	ld	r31, X
    3106:	01 90       	ld	r0, Z+
    3108:	f0 81       	ld	r31, Z
    310a:	e0 2d       	mov	r30, r0
    310c:	c4 01       	movw	r24, r8
    310e:	6d e2       	ldi	r22, 0x2D	; 45
    3110:	09 95       	icall
    3112:	ec 01       	movw	r28, r24
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
    3114:	17 fb       	bst	r17, 7
    3116:	10 95       	com	r17
    3118:	17 f9       	bld	r17, 7
    311a:	10 95       	com	r17
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	40 e0       	ldi	r20, 0x00	; 0
    3122:	5f e3       	ldi	r21, 0x3F	; 63
    3124:	dd 24       	eor	r13, r13
    3126:	0b c0       	rjmp	.+22     	; 0x313e <_ZN5Print10printFloatEdh+0x10c>
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    3128:	ca 01       	movw	r24, r20
    312a:	b9 01       	movw	r22, r18
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	40 e2       	ldi	r20, 0x20	; 32
    3132:	51 e4       	ldi	r21, 0x41	; 65
    3134:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__divsf3>
    3138:	9b 01       	movw	r18, r22
    313a:	ac 01       	movw	r20, r24
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    313c:	d3 94       	inc	r13
    313e:	d7 14       	cp	r13, r7
    3140:	98 f3       	brcs	.-26     	; 0x3128 <_ZN5Print10printFloatEdh+0xf6>
    rounding /= 10.0;
  
  number += rounding;
    3142:	c8 01       	movw	r24, r16
    3144:	b7 01       	movw	r22, r14
    3146:	0e 94 0d 1b 	call	0x361a	; 0x361a <__addsf3>
    314a:	5b 01       	movw	r10, r22
    314c:	6c 01       	movw	r12, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    314e:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <__fixunssfsi>
    3152:	7b 01       	movw	r14, r22
    3154:	8c 01       	movw	r16, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    3156:	c4 01       	movw	r24, r8
    3158:	b8 01       	movw	r22, r16
    315a:	a7 01       	movw	r20, r14
    315c:	2a e0       	ldi	r18, 0x0A	; 10
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <_ZN5Print5printEmi>
    3164:	c8 0f       	add	r28, r24
    3166:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    3168:	77 20       	and	r7, r7
    316a:	39 f0       	breq	.+14     	; 0x317a <_ZN5Print10printFloatEdh+0x148>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    316c:	c4 01       	movw	r24, r8
    316e:	60 e9       	ldi	r22, 0x90	; 144
    3170:	71 e0       	ldi	r23, 0x01	; 1
    3172:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    3176:	c8 0f       	add	r28, r24
    3178:	d9 1f       	adc	r29, r25
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    317a:	c8 01       	movw	r24, r16
    317c:	b7 01       	movw	r22, r14
    317e:	0e 94 0e 1c 	call	0x381c	; 0x381c <__floatunsisf>
    3182:	9b 01       	movw	r18, r22
    3184:	ac 01       	movw	r20, r24
    3186:	c6 01       	movw	r24, r12
    3188:	b5 01       	movw	r22, r10
    318a:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__subsf3>
    318e:	24 c0       	rjmp	.+72     	; 0x31d8 <_ZN5Print10printFloatEdh+0x1a6>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	40 e2       	ldi	r20, 0x20	; 32
    3196:	51 e4       	ldi	r21, 0x41	; 65
    3198:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__mulsf3>
    319c:	7b 01       	movw	r14, r22
    319e:	8c 01       	movw	r16, r24
    int toPrint = int(remainder);
    31a0:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <__fixsfsi>
    31a4:	5b 01       	movw	r10, r22
    31a6:	6c 01       	movw	r12, r24
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    31a8:	cc 24       	eor	r12, r12
    31aa:	b7 fc       	sbrc	r11, 7
    31ac:	c0 94       	com	r12
    31ae:	dc 2c       	mov	r13, r12
    31b0:	c4 01       	movw	r24, r8
    31b2:	b6 01       	movw	r22, r12
    31b4:	a5 01       	movw	r20, r10
    31b6:	2a e0       	ldi	r18, 0x0A	; 10
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	0e 94 d6 17 	call	0x2fac	; 0x2fac <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    31be:	c8 0f       	add	r28, r24
    31c0:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    31c2:	c6 01       	movw	r24, r12
    31c4:	b5 01       	movw	r22, r10
    31c6:	0e 94 10 1c 	call	0x3820	; 0x3820 <__floatsisf>
    31ca:	9b 01       	movw	r18, r22
    31cc:	ac 01       	movw	r20, r24
    31ce:	c8 01       	movw	r24, r16
    31d0:	b7 01       	movw	r22, r14
    31d2:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__subsf3>
    31d6:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    31d8:	77 20       	and	r7, r7
    31da:	d1 f6       	brne	.-76     	; 0x3190 <_ZN5Print10printFloatEdh+0x15e>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    31dc:	ce 01       	movw	r24, r28
    31de:	df 91       	pop	r29
    31e0:	cf 91       	pop	r28
    31e2:	1f 91       	pop	r17
    31e4:	0f 91       	pop	r16
    31e6:	ff 90       	pop	r15
    31e8:	ef 90       	pop	r14
    31ea:	df 90       	pop	r13
    31ec:	cf 90       	pop	r12
    31ee:	bf 90       	pop	r11
    31f0:	af 90       	pop	r10
    31f2:	9f 90       	pop	r9
    31f4:	8f 90       	pop	r8
    31f6:	7f 90       	pop	r7
    31f8:	08 95       	ret

000031fa <_ZN5Print7printlnEdi>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
    31fa:	ef 92       	push	r14
    31fc:	ff 92       	push	r15
    31fe:	0f 93       	push	r16
    3200:	1f 93       	push	r17
    3202:	7c 01       	movw	r14, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3204:	0e 94 19 18 	call	0x3032	; 0x3032 <_ZN5Print10printFloatEdh>
    3208:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    320a:	c7 01       	movw	r24, r14
    320c:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <_ZN5Print7printlnEv>
    3210:	08 0f       	add	r16, r24
    3212:	19 1f       	adc	r17, r25
  return n;
}
    3214:	c8 01       	movw	r24, r16
    3216:	1f 91       	pop	r17
    3218:	0f 91       	pop	r16
    321a:	ff 90       	pop	r15
    321c:	ef 90       	pop	r14
    321e:	08 95       	ret

00003220 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    3220:	ef 92       	push	r14
    3222:	ff 92       	push	r15
    3224:	0f 93       	push	r16
    3226:	1f 93       	push	r17
    3228:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    322a:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN5Print5writeEPKc>
    322e:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    3230:	c7 01       	movw	r24, r14
    3232:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <_ZN5Print7printlnEv>
    3236:	08 0f       	add	r16, r24
    3238:	19 1f       	adc	r17, r25
  return n;
}
    323a:	c8 01       	movw	r24, r16
    323c:	1f 91       	pop	r17
    323e:	0f 91       	pop	r16
    3240:	ff 90       	pop	r15
    3242:	ef 90       	pop	r14
    3244:	08 95       	ret

00003246 <main>:
#include <Arduino.h>

int main(void)
    3246:	cf 93       	push	r28
    3248:	df 93       	push	r29
{
	init();
    324a:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    324e:	0e 94 81 14 	call	0x2902	; 0x2902 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3252:	ce e0       	ldi	r28, 0x0E	; 14
    3254:	d5 e1       	ldi	r29, 0x15	; 21
#endif
	
	setup();
    
	for (;;) {
		loop();
    3256:	0e 94 b5 13 	call	0x276a	; 0x276a <loop>
		if (serialEventRun) serialEventRun();
    325a:	20 97       	sbiw	r28, 0x00	; 0
    325c:	e1 f3       	breq	.-8      	; 0x3256 <main+0x10>
    325e:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <_Z14serialEventRunv>
    3262:	f9 cf       	rjmp	.-14     	; 0x3256 <main+0x10>

00003264 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    3264:	1f 92       	push	r1
    3266:	0f 92       	push	r0
    3268:	0f b6       	in	r0, 0x3f	; 63
    326a:	0f 92       	push	r0
    326c:	11 24       	eor	r1, r1
    326e:	2f 93       	push	r18
    3270:	3f 93       	push	r19
    3272:	8f 93       	push	r24
    3274:	9f 93       	push	r25
    3276:	af 93       	push	r26
    3278:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    327a:	80 91 be 06 	lds	r24, 0x06BE
    327e:	90 91 bf 06 	lds	r25, 0x06BF
    3282:	a0 91 c0 06 	lds	r26, 0x06C0
    3286:	b0 91 c1 06 	lds	r27, 0x06C1
	unsigned char f = timer0_fract;
    328a:	30 91 c2 06 	lds	r19, 0x06C2

	m += MILLIS_INC;
    328e:	01 96       	adiw	r24, 0x01	; 1
    3290:	a1 1d       	adc	r26, r1
    3292:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    3294:	23 2f       	mov	r18, r19
    3296:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    3298:	2d 37       	cpi	r18, 0x7D	; 125
    329a:	20 f0       	brcs	.+8      	; 0x32a4 <__vector_16+0x40>
		f -= FRACT_MAX;
    329c:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    329e:	01 96       	adiw	r24, 0x01	; 1
    32a0:	a1 1d       	adc	r26, r1
    32a2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    32a4:	20 93 c2 06 	sts	0x06C2, r18
	timer0_millis = m;
    32a8:	80 93 be 06 	sts	0x06BE, r24
    32ac:	90 93 bf 06 	sts	0x06BF, r25
    32b0:	a0 93 c0 06 	sts	0x06C0, r26
    32b4:	b0 93 c1 06 	sts	0x06C1, r27
	timer0_overflow_count++;
    32b8:	80 91 ba 06 	lds	r24, 0x06BA
    32bc:	90 91 bb 06 	lds	r25, 0x06BB
    32c0:	a0 91 bc 06 	lds	r26, 0x06BC
    32c4:	b0 91 bd 06 	lds	r27, 0x06BD
    32c8:	01 96       	adiw	r24, 0x01	; 1
    32ca:	a1 1d       	adc	r26, r1
    32cc:	b1 1d       	adc	r27, r1
    32ce:	80 93 ba 06 	sts	0x06BA, r24
    32d2:	90 93 bb 06 	sts	0x06BB, r25
    32d6:	a0 93 bc 06 	sts	0x06BC, r26
    32da:	b0 93 bd 06 	sts	0x06BD, r27
}
    32de:	bf 91       	pop	r27
    32e0:	af 91       	pop	r26
    32e2:	9f 91       	pop	r25
    32e4:	8f 91       	pop	r24
    32e6:	3f 91       	pop	r19
    32e8:	2f 91       	pop	r18
    32ea:	0f 90       	pop	r0
    32ec:	0f be       	out	0x3f, r0	; 63
    32ee:	0f 90       	pop	r0
    32f0:	1f 90       	pop	r1
    32f2:	18 95       	reti

000032f4 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    32f4:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    32f6:	f8 94       	cli
	m = timer0_millis;
    32f8:	20 91 be 06 	lds	r18, 0x06BE
    32fc:	30 91 bf 06 	lds	r19, 0x06BF
    3300:	40 91 c0 06 	lds	r20, 0x06C0
    3304:	50 91 c1 06 	lds	r21, 0x06C1
	SREG = oldSREG;
    3308:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    330a:	b9 01       	movw	r22, r18
    330c:	ca 01       	movw	r24, r20
    330e:	08 95       	ret

00003310 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    3310:	9b 01       	movw	r18, r22
    3312:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    3314:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    3316:	f8 94       	cli
	m = timer0_overflow_count;
    3318:	80 91 ba 06 	lds	r24, 0x06BA
    331c:	90 91 bb 06 	lds	r25, 0x06BB
    3320:	a0 91 bc 06 	lds	r26, 0x06BC
    3324:	b0 91 bd 06 	lds	r27, 0x06BD
#if defined(TCNT0)
	t = TCNT0;
    3328:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    332a:	a8 9b       	sbis	0x15, 0	; 21
    332c:	05 c0       	rjmp	.+10     	; 0x3338 <delay+0x28>
    332e:	6f 3f       	cpi	r22, 0xFF	; 255
    3330:	19 f0       	breq	.+6      	; 0x3338 <delay+0x28>
		m++;
    3332:	01 96       	adiw	r24, 0x01	; 1
    3334:	a1 1d       	adc	r26, r1
    3336:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    3338:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    333a:	ba 2f       	mov	r27, r26
    333c:	a9 2f       	mov	r26, r25
    333e:	98 2f       	mov	r25, r24
    3340:	88 27       	eor	r24, r24
    3342:	86 0f       	add	r24, r22
    3344:	91 1d       	adc	r25, r1
    3346:	a1 1d       	adc	r26, r1
    3348:	b1 1d       	adc	r27, r1
    334a:	62 e0       	ldi	r22, 0x02	; 2
    334c:	88 0f       	add	r24, r24
    334e:	99 1f       	adc	r25, r25
    3350:	aa 1f       	adc	r26, r26
    3352:	bb 1f       	adc	r27, r27
    3354:	6a 95       	dec	r22
    3356:	d1 f7       	brne	.-12     	; 0x334c <delay+0x3c>
    3358:	bc 01       	movw	r22, r24
    335a:	2d c0       	rjmp	.+90     	; 0x33b6 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    335c:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    335e:	f8 94       	cli
	m = timer0_overflow_count;
    3360:	80 91 ba 06 	lds	r24, 0x06BA
    3364:	90 91 bb 06 	lds	r25, 0x06BB
    3368:	a0 91 bc 06 	lds	r26, 0x06BC
    336c:	b0 91 bd 06 	lds	r27, 0x06BD
#if defined(TCNT0)
	t = TCNT0;
    3370:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3372:	a8 9b       	sbis	0x15, 0	; 21
    3374:	05 c0       	rjmp	.+10     	; 0x3380 <delay+0x70>
    3376:	ef 3f       	cpi	r30, 0xFF	; 255
    3378:	19 f0       	breq	.+6      	; 0x3380 <delay+0x70>
		m++;
    337a:	01 96       	adiw	r24, 0x01	; 1
    337c:	a1 1d       	adc	r26, r1
    337e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    3380:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    3382:	ba 2f       	mov	r27, r26
    3384:	a9 2f       	mov	r26, r25
    3386:	98 2f       	mov	r25, r24
    3388:	88 27       	eor	r24, r24
    338a:	8e 0f       	add	r24, r30
    338c:	91 1d       	adc	r25, r1
    338e:	a1 1d       	adc	r26, r1
    3390:	b1 1d       	adc	r27, r1
    3392:	e2 e0       	ldi	r30, 0x02	; 2
    3394:	88 0f       	add	r24, r24
    3396:	99 1f       	adc	r25, r25
    3398:	aa 1f       	adc	r26, r26
    339a:	bb 1f       	adc	r27, r27
    339c:	ea 95       	dec	r30
    339e:	d1 f7       	brne	.-12     	; 0x3394 <delay+0x84>
    33a0:	86 1b       	sub	r24, r22
    33a2:	97 0b       	sbc	r25, r23
    33a4:	88 5e       	subi	r24, 0xE8	; 232
    33a6:	93 40       	sbci	r25, 0x03	; 3
    33a8:	c8 f2       	brcs	.-78     	; 0x335c <delay+0x4c>
			ms--;
    33aa:	21 50       	subi	r18, 0x01	; 1
    33ac:	30 40       	sbci	r19, 0x00	; 0
    33ae:	40 40       	sbci	r20, 0x00	; 0
    33b0:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    33b2:	68 51       	subi	r22, 0x18	; 24
    33b4:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    33b6:	21 15       	cp	r18, r1
    33b8:	31 05       	cpc	r19, r1
    33ba:	41 05       	cpc	r20, r1
    33bc:	51 05       	cpc	r21, r1
    33be:	71 f6       	brne	.-100    	; 0x335c <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    33c0:	08 95       	ret

000033c2 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    33c2:	01 97       	sbiw	r24, 0x01	; 1
    33c4:	39 f0       	breq	.+14     	; 0x33d4 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    33c6:	88 0f       	add	r24, r24
    33c8:	99 1f       	adc	r25, r25
    33ca:	88 0f       	add	r24, r24
    33cc:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    33ce:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    33d0:	01 97       	sbiw	r24, 0x01	; 1
    33d2:	f1 f7       	brne	.-4      	; 0x33d0 <delayMicroseconds+0xe>
    33d4:	08 95       	ret

000033d6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    33d6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    33d8:	84 b5       	in	r24, 0x24	; 36
    33da:	82 60       	ori	r24, 0x02	; 2
    33dc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    33de:	84 b5       	in	r24, 0x24	; 36
    33e0:	81 60       	ori	r24, 0x01	; 1
    33e2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    33e4:	85 b5       	in	r24, 0x25	; 37
    33e6:	82 60       	ori	r24, 0x02	; 2
    33e8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    33ea:	85 b5       	in	r24, 0x25	; 37
    33ec:	81 60       	ori	r24, 0x01	; 1
    33ee:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    33f0:	ee e6       	ldi	r30, 0x6E	; 110
    33f2:	f0 e0       	ldi	r31, 0x00	; 0
    33f4:	80 81       	ld	r24, Z
    33f6:	81 60       	ori	r24, 0x01	; 1
    33f8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    33fa:	e1 e8       	ldi	r30, 0x81	; 129
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3400:	80 81       	ld	r24, Z
    3402:	82 60       	ori	r24, 0x02	; 2
    3404:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3406:	80 81       	ld	r24, Z
    3408:	81 60       	ori	r24, 0x01	; 1
    340a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    340c:	e0 e8       	ldi	r30, 0x80	; 128
    340e:	f0 e0       	ldi	r31, 0x00	; 0
    3410:	80 81       	ld	r24, Z
    3412:	81 60       	ori	r24, 0x01	; 1
    3414:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3416:	e1 eb       	ldi	r30, 0xB1	; 177
    3418:	f0 e0       	ldi	r31, 0x00	; 0
    341a:	80 81       	ld	r24, Z
    341c:	84 60       	ori	r24, 0x04	; 4
    341e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3420:	e0 eb       	ldi	r30, 0xB0	; 176
    3422:	f0 e0       	ldi	r31, 0x00	; 0
    3424:	80 81       	ld	r24, Z
    3426:	81 60       	ori	r24, 0x01	; 1
    3428:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    342a:	ea e7       	ldi	r30, 0x7A	; 122
    342c:	f0 e0       	ldi	r31, 0x00	; 0
    342e:	80 81       	ld	r24, Z
    3430:	84 60       	ori	r24, 0x04	; 4
    3432:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    3434:	80 81       	ld	r24, Z
    3436:	82 60       	ori	r24, 0x02	; 2
    3438:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    343a:	80 81       	ld	r24, Z
    343c:	81 60       	ori	r24, 0x01	; 1
    343e:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3440:	80 81       	ld	r24, Z
    3442:	80 68       	ori	r24, 0x80	; 128
    3444:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3446:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    344a:	08 95       	ret

0000344c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    344c:	cf 93       	push	r28
    344e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3450:	48 2f       	mov	r20, r24
    3452:	50 e0       	ldi	r21, 0x00	; 0
    3454:	ca 01       	movw	r24, r20
    3456:	80 50       	subi	r24, 0x00	; 0
    3458:	9e 4f       	sbci	r25, 0xFE	; 254
    345a:	fc 01       	movw	r30, r24
    345c:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    345e:	44 51       	subi	r20, 0x14	; 20
    3460:	5e 4f       	sbci	r21, 0xFE	; 254
    3462:	fa 01       	movw	r30, r20
    3464:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3466:	88 23       	and	r24, r24
    3468:	69 f1       	breq	.+90     	; 0x34c4 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	88 0f       	add	r24, r24
    346e:	99 1f       	adc	r25, r25
    3470:	fc 01       	movw	r30, r24
    3472:	e2 53       	subi	r30, 0x32	; 50
    3474:	fe 4f       	sbci	r31, 0xFE	; 254
    3476:	a5 91       	lpm	r26, Z+
    3478:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    347a:	fc 01       	movw	r30, r24
    347c:	e8 52       	subi	r30, 0x28	; 40
    347e:	fe 4f       	sbci	r31, 0xFE	; 254
    3480:	c5 91       	lpm	r28, Z+
    3482:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    3484:	66 23       	and	r22, r22
    3486:	51 f4       	brne	.+20     	; 0x349c <pinMode+0x50>
		uint8_t oldSREG = SREG;
    3488:	2f b7       	in	r18, 0x3f	; 63
                cli();
    348a:	f8 94       	cli
		*reg &= ~bit;
    348c:	8c 91       	ld	r24, X
    348e:	93 2f       	mov	r25, r19
    3490:	90 95       	com	r25
    3492:	89 23       	and	r24, r25
    3494:	8c 93       	st	X, r24
		*out &= ~bit;
    3496:	88 81       	ld	r24, Y
    3498:	89 23       	and	r24, r25
    349a:	0b c0       	rjmp	.+22     	; 0x34b2 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    349c:	62 30       	cpi	r22, 0x02	; 2
    349e:	61 f4       	brne	.+24     	; 0x34b8 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    34a0:	2f b7       	in	r18, 0x3f	; 63
                cli();
    34a2:	f8 94       	cli
		*reg &= ~bit;
    34a4:	8c 91       	ld	r24, X
    34a6:	93 2f       	mov	r25, r19
    34a8:	90 95       	com	r25
    34aa:	89 23       	and	r24, r25
    34ac:	8c 93       	st	X, r24
		*out |= bit;
    34ae:	88 81       	ld	r24, Y
    34b0:	83 2b       	or	r24, r19
    34b2:	88 83       	st	Y, r24
		SREG = oldSREG;
    34b4:	2f bf       	out	0x3f, r18	; 63
    34b6:	06 c0       	rjmp	.+12     	; 0x34c4 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    34b8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    34ba:	f8 94       	cli
		*reg |= bit;
    34bc:	8c 91       	ld	r24, X
    34be:	83 2b       	or	r24, r19
    34c0:	8c 93       	st	X, r24
		SREG = oldSREG;
    34c2:	9f bf       	out	0x3f, r25	; 63
	}
}
    34c4:	df 91       	pop	r29
    34c6:	cf 91       	pop	r28
    34c8:	08 95       	ret

000034ca <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    34ca:	48 2f       	mov	r20, r24
    34cc:	50 e0       	ldi	r21, 0x00	; 0
    34ce:	ca 01       	movw	r24, r20
    34d0:	8c 5e       	subi	r24, 0xEC	; 236
    34d2:	9d 4f       	sbci	r25, 0xFD	; 253
    34d4:	fc 01       	movw	r30, r24
    34d6:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    34d8:	ca 01       	movw	r24, r20
    34da:	80 50       	subi	r24, 0x00	; 0
    34dc:	9e 4f       	sbci	r25, 0xFE	; 254
    34de:	fc 01       	movw	r30, r24
    34e0:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    34e2:	44 51       	subi	r20, 0x14	; 20
    34e4:	5e 4f       	sbci	r21, 0xFE	; 254
    34e6:	fa 01       	movw	r30, r20
    34e8:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    34ea:	33 23       	and	r19, r19
    34ec:	09 f4       	brne	.+2      	; 0x34f0 <digitalWrite+0x26>
    34ee:	40 c0       	rjmp	.+128    	; 0x3570 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    34f0:	22 23       	and	r18, r18
    34f2:	51 f1       	breq	.+84     	; 0x3548 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    34f4:	23 30       	cpi	r18, 0x03	; 3
    34f6:	71 f0       	breq	.+28     	; 0x3514 <digitalWrite+0x4a>
    34f8:	24 30       	cpi	r18, 0x04	; 4
    34fa:	28 f4       	brcc	.+10     	; 0x3506 <digitalWrite+0x3c>
    34fc:	21 30       	cpi	r18, 0x01	; 1
    34fe:	a1 f0       	breq	.+40     	; 0x3528 <digitalWrite+0x5e>
    3500:	22 30       	cpi	r18, 0x02	; 2
    3502:	11 f5       	brne	.+68     	; 0x3548 <digitalWrite+0x7e>
    3504:	14 c0       	rjmp	.+40     	; 0x352e <digitalWrite+0x64>
    3506:	26 30       	cpi	r18, 0x06	; 6
    3508:	b1 f0       	breq	.+44     	; 0x3536 <digitalWrite+0x6c>
    350a:	27 30       	cpi	r18, 0x07	; 7
    350c:	c1 f0       	breq	.+48     	; 0x353e <digitalWrite+0x74>
    350e:	24 30       	cpi	r18, 0x04	; 4
    3510:	d9 f4       	brne	.+54     	; 0x3548 <digitalWrite+0x7e>
    3512:	04 c0       	rjmp	.+8      	; 0x351c <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3514:	80 91 80 00 	lds	r24, 0x0080
    3518:	8f 77       	andi	r24, 0x7F	; 127
    351a:	03 c0       	rjmp	.+6      	; 0x3522 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    351c:	80 91 80 00 	lds	r24, 0x0080
    3520:	8f 7d       	andi	r24, 0xDF	; 223
    3522:	80 93 80 00 	sts	0x0080, r24
    3526:	10 c0       	rjmp	.+32     	; 0x3548 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3528:	84 b5       	in	r24, 0x24	; 36
    352a:	8f 77       	andi	r24, 0x7F	; 127
    352c:	02 c0       	rjmp	.+4      	; 0x3532 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    352e:	84 b5       	in	r24, 0x24	; 36
    3530:	8f 7d       	andi	r24, 0xDF	; 223
    3532:	84 bd       	out	0x24, r24	; 36
    3534:	09 c0       	rjmp	.+18     	; 0x3548 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3536:	80 91 b0 00 	lds	r24, 0x00B0
    353a:	8f 77       	andi	r24, 0x7F	; 127
    353c:	03 c0       	rjmp	.+6      	; 0x3544 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    353e:	80 91 b0 00 	lds	r24, 0x00B0
    3542:	8f 7d       	andi	r24, 0xDF	; 223
    3544:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    3548:	e3 2f       	mov	r30, r19
    354a:	f0 e0       	ldi	r31, 0x00	; 0
    354c:	ee 0f       	add	r30, r30
    354e:	ff 1f       	adc	r31, r31
    3550:	e8 52       	subi	r30, 0x28	; 40
    3552:	fe 4f       	sbci	r31, 0xFE	; 254
    3554:	a5 91       	lpm	r26, Z+
    3556:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    3558:	2f b7       	in	r18, 0x3f	; 63
	cli();
    355a:	f8 94       	cli

	if (val == LOW) {
    355c:	66 23       	and	r22, r22
    355e:	21 f4       	brne	.+8      	; 0x3568 <digitalWrite+0x9e>
		*out &= ~bit;
    3560:	8c 91       	ld	r24, X
    3562:	90 95       	com	r25
    3564:	89 23       	and	r24, r25
    3566:	02 c0       	rjmp	.+4      	; 0x356c <digitalWrite+0xa2>
	} else {
		*out |= bit;
    3568:	8c 91       	ld	r24, X
    356a:	89 2b       	or	r24, r25
    356c:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    356e:	2f bf       	out	0x3f, r18	; 63
    3570:	08 95       	ret

00003572 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    3572:	68 2f       	mov	r22, r24
    3574:	70 e0       	ldi	r23, 0x00	; 0
    3576:	cb 01       	movw	r24, r22
    3578:	8c 5e       	subi	r24, 0xEC	; 236
    357a:	9d 4f       	sbci	r25, 0xFD	; 253
    357c:	fc 01       	movw	r30, r24
    357e:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    3580:	cb 01       	movw	r24, r22
    3582:	80 50       	subi	r24, 0x00	; 0
    3584:	9e 4f       	sbci	r25, 0xFE	; 254
    3586:	fc 01       	movw	r30, r24
    3588:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    358a:	64 51       	subi	r22, 0x14	; 20
    358c:	7e 4f       	sbci	r23, 0xFE	; 254
    358e:	fb 01       	movw	r30, r22
    3590:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    3592:	99 23       	and	r25, r25
    3594:	19 f4       	brne	.+6      	; 0x359c <digitalRead+0x2a>
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	3c c0       	rjmp	.+120    	; 0x3614 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    359c:	22 23       	and	r18, r18
    359e:	51 f1       	breq	.+84     	; 0x35f4 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    35a0:	23 30       	cpi	r18, 0x03	; 3
    35a2:	71 f0       	breq	.+28     	; 0x35c0 <digitalRead+0x4e>
    35a4:	24 30       	cpi	r18, 0x04	; 4
    35a6:	28 f4       	brcc	.+10     	; 0x35b2 <digitalRead+0x40>
    35a8:	21 30       	cpi	r18, 0x01	; 1
    35aa:	a1 f0       	breq	.+40     	; 0x35d4 <digitalRead+0x62>
    35ac:	22 30       	cpi	r18, 0x02	; 2
    35ae:	11 f5       	brne	.+68     	; 0x35f4 <digitalRead+0x82>
    35b0:	14 c0       	rjmp	.+40     	; 0x35da <digitalRead+0x68>
    35b2:	26 30       	cpi	r18, 0x06	; 6
    35b4:	b1 f0       	breq	.+44     	; 0x35e2 <digitalRead+0x70>
    35b6:	27 30       	cpi	r18, 0x07	; 7
    35b8:	c1 f0       	breq	.+48     	; 0x35ea <digitalRead+0x78>
    35ba:	24 30       	cpi	r18, 0x04	; 4
    35bc:	d9 f4       	brne	.+54     	; 0x35f4 <digitalRead+0x82>
    35be:	04 c0       	rjmp	.+8      	; 0x35c8 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    35c0:	80 91 80 00 	lds	r24, 0x0080
    35c4:	8f 77       	andi	r24, 0x7F	; 127
    35c6:	03 c0       	rjmp	.+6      	; 0x35ce <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    35c8:	80 91 80 00 	lds	r24, 0x0080
    35cc:	8f 7d       	andi	r24, 0xDF	; 223
    35ce:	80 93 80 00 	sts	0x0080, r24
    35d2:	10 c0       	rjmp	.+32     	; 0x35f4 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    35d4:	84 b5       	in	r24, 0x24	; 36
    35d6:	8f 77       	andi	r24, 0x7F	; 127
    35d8:	02 c0       	rjmp	.+4      	; 0x35de <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    35da:	84 b5       	in	r24, 0x24	; 36
    35dc:	8f 7d       	andi	r24, 0xDF	; 223
    35de:	84 bd       	out	0x24, r24	; 36
    35e0:	09 c0       	rjmp	.+18     	; 0x35f4 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    35e2:	80 91 b0 00 	lds	r24, 0x00B0
    35e6:	8f 77       	andi	r24, 0x7F	; 127
    35e8:	03 c0       	rjmp	.+6      	; 0x35f0 <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    35ea:	80 91 b0 00 	lds	r24, 0x00B0
    35ee:	8f 7d       	andi	r24, 0xDF	; 223
    35f0:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    35f4:	89 2f       	mov	r24, r25
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	88 0f       	add	r24, r24
    35fa:	99 1f       	adc	r25, r25
    35fc:	8e 51       	subi	r24, 0x1E	; 30
    35fe:	9e 4f       	sbci	r25, 0xFE	; 254
    3600:	fc 01       	movw	r30, r24
    3602:	a5 91       	lpm	r26, Z+
    3604:	b4 91       	lpm	r27, Z+
    3606:	8c 91       	ld	r24, X
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	84 23       	and	r24, r20
    360e:	11 f0       	breq	.+4      	; 0x3614 <digitalRead+0xa2>
    3610:	21 e0       	ldi	r18, 0x01	; 1
    3612:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    3614:	c9 01       	movw	r24, r18
    3616:	08 95       	ret

00003618 <__subsf3>:
    3618:	50 58       	subi	r21, 0x80	; 128

0000361a <__addsf3>:
    361a:	bb 27       	eor	r27, r27
    361c:	aa 27       	eor	r26, r26
    361e:	0e d0       	rcall	.+28     	; 0x363c <__addsf3x>
    3620:	75 c1       	rjmp	.+746    	; 0x390c <__fp_round>
    3622:	66 d1       	rcall	.+716    	; 0x38f0 <__fp_pscA>
    3624:	30 f0       	brcs	.+12     	; 0x3632 <__addsf3+0x18>
    3626:	6b d1       	rcall	.+726    	; 0x38fe <__fp_pscB>
    3628:	20 f0       	brcs	.+8      	; 0x3632 <__addsf3+0x18>
    362a:	31 f4       	brne	.+12     	; 0x3638 <__addsf3+0x1e>
    362c:	9f 3f       	cpi	r25, 0xFF	; 255
    362e:	11 f4       	brne	.+4      	; 0x3634 <__addsf3+0x1a>
    3630:	1e f4       	brtc	.+6      	; 0x3638 <__addsf3+0x1e>
    3632:	5b c1       	rjmp	.+694    	; 0x38ea <__fp_nan>
    3634:	0e f4       	brtc	.+2      	; 0x3638 <__addsf3+0x1e>
    3636:	e0 95       	com	r30
    3638:	e7 fb       	bst	r30, 7
    363a:	51 c1       	rjmp	.+674    	; 0x38de <__fp_inf>

0000363c <__addsf3x>:
    363c:	e9 2f       	mov	r30, r25
    363e:	77 d1       	rcall	.+750    	; 0x392e <__fp_split3>
    3640:	80 f3       	brcs	.-32     	; 0x3622 <__addsf3+0x8>
    3642:	ba 17       	cp	r27, r26
    3644:	62 07       	cpc	r22, r18
    3646:	73 07       	cpc	r23, r19
    3648:	84 07       	cpc	r24, r20
    364a:	95 07       	cpc	r25, r21
    364c:	18 f0       	brcs	.+6      	; 0x3654 <__addsf3x+0x18>
    364e:	71 f4       	brne	.+28     	; 0x366c <__addsf3x+0x30>
    3650:	9e f5       	brtc	.+102    	; 0x36b8 <__addsf3x+0x7c>
    3652:	8f c1       	rjmp	.+798    	; 0x3972 <__fp_zero>
    3654:	0e f4       	brtc	.+2      	; 0x3658 <__addsf3x+0x1c>
    3656:	e0 95       	com	r30
    3658:	0b 2e       	mov	r0, r27
    365a:	ba 2f       	mov	r27, r26
    365c:	a0 2d       	mov	r26, r0
    365e:	0b 01       	movw	r0, r22
    3660:	b9 01       	movw	r22, r18
    3662:	90 01       	movw	r18, r0
    3664:	0c 01       	movw	r0, r24
    3666:	ca 01       	movw	r24, r20
    3668:	a0 01       	movw	r20, r0
    366a:	11 24       	eor	r1, r1
    366c:	ff 27       	eor	r31, r31
    366e:	59 1b       	sub	r21, r25
    3670:	99 f0       	breq	.+38     	; 0x3698 <__addsf3x+0x5c>
    3672:	59 3f       	cpi	r21, 0xF9	; 249
    3674:	50 f4       	brcc	.+20     	; 0x368a <__addsf3x+0x4e>
    3676:	50 3e       	cpi	r21, 0xE0	; 224
    3678:	68 f1       	brcs	.+90     	; 0x36d4 <__addsf3x+0x98>
    367a:	1a 16       	cp	r1, r26
    367c:	f0 40       	sbci	r31, 0x00	; 0
    367e:	a2 2f       	mov	r26, r18
    3680:	23 2f       	mov	r18, r19
    3682:	34 2f       	mov	r19, r20
    3684:	44 27       	eor	r20, r20
    3686:	58 5f       	subi	r21, 0xF8	; 248
    3688:	f3 cf       	rjmp	.-26     	; 0x3670 <__addsf3x+0x34>
    368a:	46 95       	lsr	r20
    368c:	37 95       	ror	r19
    368e:	27 95       	ror	r18
    3690:	a7 95       	ror	r26
    3692:	f0 40       	sbci	r31, 0x00	; 0
    3694:	53 95       	inc	r21
    3696:	c9 f7       	brne	.-14     	; 0x368a <__addsf3x+0x4e>
    3698:	7e f4       	brtc	.+30     	; 0x36b8 <__addsf3x+0x7c>
    369a:	1f 16       	cp	r1, r31
    369c:	ba 0b       	sbc	r27, r26
    369e:	62 0b       	sbc	r22, r18
    36a0:	73 0b       	sbc	r23, r19
    36a2:	84 0b       	sbc	r24, r20
    36a4:	ba f0       	brmi	.+46     	; 0x36d4 <__addsf3x+0x98>
    36a6:	91 50       	subi	r25, 0x01	; 1
    36a8:	a1 f0       	breq	.+40     	; 0x36d2 <__addsf3x+0x96>
    36aa:	ff 0f       	add	r31, r31
    36ac:	bb 1f       	adc	r27, r27
    36ae:	66 1f       	adc	r22, r22
    36b0:	77 1f       	adc	r23, r23
    36b2:	88 1f       	adc	r24, r24
    36b4:	c2 f7       	brpl	.-16     	; 0x36a6 <__addsf3x+0x6a>
    36b6:	0e c0       	rjmp	.+28     	; 0x36d4 <__addsf3x+0x98>
    36b8:	ba 0f       	add	r27, r26
    36ba:	62 1f       	adc	r22, r18
    36bc:	73 1f       	adc	r23, r19
    36be:	84 1f       	adc	r24, r20
    36c0:	48 f4       	brcc	.+18     	; 0x36d4 <__addsf3x+0x98>
    36c2:	87 95       	ror	r24
    36c4:	77 95       	ror	r23
    36c6:	67 95       	ror	r22
    36c8:	b7 95       	ror	r27
    36ca:	f7 95       	ror	r31
    36cc:	9e 3f       	cpi	r25, 0xFE	; 254
    36ce:	08 f0       	brcs	.+2      	; 0x36d2 <__addsf3x+0x96>
    36d0:	b3 cf       	rjmp	.-154    	; 0x3638 <__addsf3+0x1e>
    36d2:	93 95       	inc	r25
    36d4:	88 0f       	add	r24, r24
    36d6:	08 f0       	brcs	.+2      	; 0x36da <__addsf3x+0x9e>
    36d8:	99 27       	eor	r25, r25
    36da:	ee 0f       	add	r30, r30
    36dc:	97 95       	ror	r25
    36de:	87 95       	ror	r24
    36e0:	08 95       	ret

000036e2 <__cmpsf2>:
    36e2:	d9 d0       	rcall	.+434    	; 0x3896 <__fp_cmp>
    36e4:	08 f4       	brcc	.+2      	; 0x36e8 <__cmpsf2+0x6>
    36e6:	81 e0       	ldi	r24, 0x01	; 1
    36e8:	08 95       	ret

000036ea <__divsf3>:
    36ea:	0c d0       	rcall	.+24     	; 0x3704 <__divsf3x>
    36ec:	0f c1       	rjmp	.+542    	; 0x390c <__fp_round>
    36ee:	07 d1       	rcall	.+526    	; 0x38fe <__fp_pscB>
    36f0:	40 f0       	brcs	.+16     	; 0x3702 <__divsf3+0x18>
    36f2:	fe d0       	rcall	.+508    	; 0x38f0 <__fp_pscA>
    36f4:	30 f0       	brcs	.+12     	; 0x3702 <__divsf3+0x18>
    36f6:	21 f4       	brne	.+8      	; 0x3700 <__divsf3+0x16>
    36f8:	5f 3f       	cpi	r21, 0xFF	; 255
    36fa:	19 f0       	breq	.+6      	; 0x3702 <__divsf3+0x18>
    36fc:	f0 c0       	rjmp	.+480    	; 0x38de <__fp_inf>
    36fe:	51 11       	cpse	r21, r1
    3700:	39 c1       	rjmp	.+626    	; 0x3974 <__fp_szero>
    3702:	f3 c0       	rjmp	.+486    	; 0x38ea <__fp_nan>

00003704 <__divsf3x>:
    3704:	14 d1       	rcall	.+552    	; 0x392e <__fp_split3>
    3706:	98 f3       	brcs	.-26     	; 0x36ee <__divsf3+0x4>

00003708 <__divsf3_pse>:
    3708:	99 23       	and	r25, r25
    370a:	c9 f3       	breq	.-14     	; 0x36fe <__divsf3+0x14>
    370c:	55 23       	and	r21, r21
    370e:	b1 f3       	breq	.-20     	; 0x36fc <__divsf3+0x12>
    3710:	95 1b       	sub	r25, r21
    3712:	55 0b       	sbc	r21, r21
    3714:	bb 27       	eor	r27, r27
    3716:	aa 27       	eor	r26, r26
    3718:	62 17       	cp	r22, r18
    371a:	73 07       	cpc	r23, r19
    371c:	84 07       	cpc	r24, r20
    371e:	38 f0       	brcs	.+14     	; 0x372e <__divsf3_pse+0x26>
    3720:	9f 5f       	subi	r25, 0xFF	; 255
    3722:	5f 4f       	sbci	r21, 0xFF	; 255
    3724:	22 0f       	add	r18, r18
    3726:	33 1f       	adc	r19, r19
    3728:	44 1f       	adc	r20, r20
    372a:	aa 1f       	adc	r26, r26
    372c:	a9 f3       	breq	.-22     	; 0x3718 <__divsf3_pse+0x10>
    372e:	33 d0       	rcall	.+102    	; 0x3796 <__divsf3_pse+0x8e>
    3730:	0e 2e       	mov	r0, r30
    3732:	3a f0       	brmi	.+14     	; 0x3742 <__divsf3_pse+0x3a>
    3734:	e0 e8       	ldi	r30, 0x80	; 128
    3736:	30 d0       	rcall	.+96     	; 0x3798 <__divsf3_pse+0x90>
    3738:	91 50       	subi	r25, 0x01	; 1
    373a:	50 40       	sbci	r21, 0x00	; 0
    373c:	e6 95       	lsr	r30
    373e:	00 1c       	adc	r0, r0
    3740:	ca f7       	brpl	.-14     	; 0x3734 <__divsf3_pse+0x2c>
    3742:	29 d0       	rcall	.+82     	; 0x3796 <__divsf3_pse+0x8e>
    3744:	fe 2f       	mov	r31, r30
    3746:	27 d0       	rcall	.+78     	; 0x3796 <__divsf3_pse+0x8e>
    3748:	66 0f       	add	r22, r22
    374a:	77 1f       	adc	r23, r23
    374c:	88 1f       	adc	r24, r24
    374e:	bb 1f       	adc	r27, r27
    3750:	26 17       	cp	r18, r22
    3752:	37 07       	cpc	r19, r23
    3754:	48 07       	cpc	r20, r24
    3756:	ab 07       	cpc	r26, r27
    3758:	b0 e8       	ldi	r27, 0x80	; 128
    375a:	09 f0       	breq	.+2      	; 0x375e <__divsf3_pse+0x56>
    375c:	bb 0b       	sbc	r27, r27
    375e:	80 2d       	mov	r24, r0
    3760:	bf 01       	movw	r22, r30
    3762:	ff 27       	eor	r31, r31
    3764:	93 58       	subi	r25, 0x83	; 131
    3766:	5f 4f       	sbci	r21, 0xFF	; 255
    3768:	2a f0       	brmi	.+10     	; 0x3774 <__divsf3_pse+0x6c>
    376a:	9e 3f       	cpi	r25, 0xFE	; 254
    376c:	51 05       	cpc	r21, r1
    376e:	68 f0       	brcs	.+26     	; 0x378a <__divsf3_pse+0x82>
    3770:	b6 c0       	rjmp	.+364    	; 0x38de <__fp_inf>
    3772:	00 c1       	rjmp	.+512    	; 0x3974 <__fp_szero>
    3774:	5f 3f       	cpi	r21, 0xFF	; 255
    3776:	ec f3       	brlt	.-6      	; 0x3772 <__divsf3_pse+0x6a>
    3778:	98 3e       	cpi	r25, 0xE8	; 232
    377a:	dc f3       	brlt	.-10     	; 0x3772 <__divsf3_pse+0x6a>
    377c:	86 95       	lsr	r24
    377e:	77 95       	ror	r23
    3780:	67 95       	ror	r22
    3782:	b7 95       	ror	r27
    3784:	f7 95       	ror	r31
    3786:	9f 5f       	subi	r25, 0xFF	; 255
    3788:	c9 f7       	brne	.-14     	; 0x377c <__divsf3_pse+0x74>
    378a:	88 0f       	add	r24, r24
    378c:	91 1d       	adc	r25, r1
    378e:	96 95       	lsr	r25
    3790:	87 95       	ror	r24
    3792:	97 f9       	bld	r25, 7
    3794:	08 95       	ret
    3796:	e1 e0       	ldi	r30, 0x01	; 1
    3798:	66 0f       	add	r22, r22
    379a:	77 1f       	adc	r23, r23
    379c:	88 1f       	adc	r24, r24
    379e:	bb 1f       	adc	r27, r27
    37a0:	62 17       	cp	r22, r18
    37a2:	73 07       	cpc	r23, r19
    37a4:	84 07       	cpc	r24, r20
    37a6:	ba 07       	cpc	r27, r26
    37a8:	20 f0       	brcs	.+8      	; 0x37b2 <__divsf3_pse+0xaa>
    37aa:	62 1b       	sub	r22, r18
    37ac:	73 0b       	sbc	r23, r19
    37ae:	84 0b       	sbc	r24, r20
    37b0:	ba 0b       	sbc	r27, r26
    37b2:	ee 1f       	adc	r30, r30
    37b4:	88 f7       	brcc	.-30     	; 0x3798 <__divsf3_pse+0x90>
    37b6:	e0 95       	com	r30
    37b8:	08 95       	ret

000037ba <__fixsfsi>:
    37ba:	04 d0       	rcall	.+8      	; 0x37c4 <__fixunssfsi>
    37bc:	68 94       	set
    37be:	b1 11       	cpse	r27, r1
    37c0:	d9 c0       	rjmp	.+434    	; 0x3974 <__fp_szero>
    37c2:	08 95       	ret

000037c4 <__fixunssfsi>:
    37c4:	bc d0       	rcall	.+376    	; 0x393e <__fp_splitA>
    37c6:	88 f0       	brcs	.+34     	; 0x37ea <__fixunssfsi+0x26>
    37c8:	9f 57       	subi	r25, 0x7F	; 127
    37ca:	90 f0       	brcs	.+36     	; 0x37f0 <__fixunssfsi+0x2c>
    37cc:	b9 2f       	mov	r27, r25
    37ce:	99 27       	eor	r25, r25
    37d0:	b7 51       	subi	r27, 0x17	; 23
    37d2:	a0 f0       	brcs	.+40     	; 0x37fc <__fixunssfsi+0x38>
    37d4:	d1 f0       	breq	.+52     	; 0x380a <__fixunssfsi+0x46>
    37d6:	66 0f       	add	r22, r22
    37d8:	77 1f       	adc	r23, r23
    37da:	88 1f       	adc	r24, r24
    37dc:	99 1f       	adc	r25, r25
    37de:	1a f0       	brmi	.+6      	; 0x37e6 <__fixunssfsi+0x22>
    37e0:	ba 95       	dec	r27
    37e2:	c9 f7       	brne	.-14     	; 0x37d6 <__fixunssfsi+0x12>
    37e4:	12 c0       	rjmp	.+36     	; 0x380a <__fixunssfsi+0x46>
    37e6:	b1 30       	cpi	r27, 0x01	; 1
    37e8:	81 f0       	breq	.+32     	; 0x380a <__fixunssfsi+0x46>
    37ea:	c3 d0       	rcall	.+390    	; 0x3972 <__fp_zero>
    37ec:	b1 e0       	ldi	r27, 0x01	; 1
    37ee:	08 95       	ret
    37f0:	c0 c0       	rjmp	.+384    	; 0x3972 <__fp_zero>
    37f2:	67 2f       	mov	r22, r23
    37f4:	78 2f       	mov	r23, r24
    37f6:	88 27       	eor	r24, r24
    37f8:	b8 5f       	subi	r27, 0xF8	; 248
    37fa:	39 f0       	breq	.+14     	; 0x380a <__fixunssfsi+0x46>
    37fc:	b9 3f       	cpi	r27, 0xF9	; 249
    37fe:	cc f3       	brlt	.-14     	; 0x37f2 <__fixunssfsi+0x2e>
    3800:	86 95       	lsr	r24
    3802:	77 95       	ror	r23
    3804:	67 95       	ror	r22
    3806:	b3 95       	inc	r27
    3808:	d9 f7       	brne	.-10     	; 0x3800 <__fixunssfsi+0x3c>
    380a:	3e f4       	brtc	.+14     	; 0x381a <__fixunssfsi+0x56>
    380c:	90 95       	com	r25
    380e:	80 95       	com	r24
    3810:	70 95       	com	r23
    3812:	61 95       	neg	r22
    3814:	7f 4f       	sbci	r23, 0xFF	; 255
    3816:	8f 4f       	sbci	r24, 0xFF	; 255
    3818:	9f 4f       	sbci	r25, 0xFF	; 255
    381a:	08 95       	ret

0000381c <__floatunsisf>:
    381c:	e8 94       	clt
    381e:	09 c0       	rjmp	.+18     	; 0x3832 <__floatsisf+0x12>

00003820 <__floatsisf>:
    3820:	97 fb       	bst	r25, 7
    3822:	3e f4       	brtc	.+14     	; 0x3832 <__floatsisf+0x12>
    3824:	90 95       	com	r25
    3826:	80 95       	com	r24
    3828:	70 95       	com	r23
    382a:	61 95       	neg	r22
    382c:	7f 4f       	sbci	r23, 0xFF	; 255
    382e:	8f 4f       	sbci	r24, 0xFF	; 255
    3830:	9f 4f       	sbci	r25, 0xFF	; 255
    3832:	99 23       	and	r25, r25
    3834:	a9 f0       	breq	.+42     	; 0x3860 <__floatsisf+0x40>
    3836:	f9 2f       	mov	r31, r25
    3838:	96 e9       	ldi	r25, 0x96	; 150
    383a:	bb 27       	eor	r27, r27
    383c:	93 95       	inc	r25
    383e:	f6 95       	lsr	r31
    3840:	87 95       	ror	r24
    3842:	77 95       	ror	r23
    3844:	67 95       	ror	r22
    3846:	b7 95       	ror	r27
    3848:	f1 11       	cpse	r31, r1
    384a:	f8 cf       	rjmp	.-16     	; 0x383c <__floatsisf+0x1c>
    384c:	fa f4       	brpl	.+62     	; 0x388c <__floatsisf+0x6c>
    384e:	bb 0f       	add	r27, r27
    3850:	11 f4       	brne	.+4      	; 0x3856 <__floatsisf+0x36>
    3852:	60 ff       	sbrs	r22, 0
    3854:	1b c0       	rjmp	.+54     	; 0x388c <__floatsisf+0x6c>
    3856:	6f 5f       	subi	r22, 0xFF	; 255
    3858:	7f 4f       	sbci	r23, 0xFF	; 255
    385a:	8f 4f       	sbci	r24, 0xFF	; 255
    385c:	9f 4f       	sbci	r25, 0xFF	; 255
    385e:	16 c0       	rjmp	.+44     	; 0x388c <__floatsisf+0x6c>
    3860:	88 23       	and	r24, r24
    3862:	11 f0       	breq	.+4      	; 0x3868 <__floatsisf+0x48>
    3864:	96 e9       	ldi	r25, 0x96	; 150
    3866:	11 c0       	rjmp	.+34     	; 0x388a <__floatsisf+0x6a>
    3868:	77 23       	and	r23, r23
    386a:	21 f0       	breq	.+8      	; 0x3874 <__floatsisf+0x54>
    386c:	9e e8       	ldi	r25, 0x8E	; 142
    386e:	87 2f       	mov	r24, r23
    3870:	76 2f       	mov	r23, r22
    3872:	05 c0       	rjmp	.+10     	; 0x387e <__floatsisf+0x5e>
    3874:	66 23       	and	r22, r22
    3876:	71 f0       	breq	.+28     	; 0x3894 <__floatsisf+0x74>
    3878:	96 e8       	ldi	r25, 0x86	; 134
    387a:	86 2f       	mov	r24, r22
    387c:	70 e0       	ldi	r23, 0x00	; 0
    387e:	60 e0       	ldi	r22, 0x00	; 0
    3880:	2a f0       	brmi	.+10     	; 0x388c <__floatsisf+0x6c>
    3882:	9a 95       	dec	r25
    3884:	66 0f       	add	r22, r22
    3886:	77 1f       	adc	r23, r23
    3888:	88 1f       	adc	r24, r24
    388a:	da f7       	brpl	.-10     	; 0x3882 <__floatsisf+0x62>
    388c:	88 0f       	add	r24, r24
    388e:	96 95       	lsr	r25
    3890:	87 95       	ror	r24
    3892:	97 f9       	bld	r25, 7
    3894:	08 95       	ret

00003896 <__fp_cmp>:
    3896:	99 0f       	add	r25, r25
    3898:	00 08       	sbc	r0, r0
    389a:	55 0f       	add	r21, r21
    389c:	aa 0b       	sbc	r26, r26
    389e:	e0 e8       	ldi	r30, 0x80	; 128
    38a0:	fe ef       	ldi	r31, 0xFE	; 254
    38a2:	16 16       	cp	r1, r22
    38a4:	17 06       	cpc	r1, r23
    38a6:	e8 07       	cpc	r30, r24
    38a8:	f9 07       	cpc	r31, r25
    38aa:	c0 f0       	brcs	.+48     	; 0x38dc <__fp_cmp+0x46>
    38ac:	12 16       	cp	r1, r18
    38ae:	13 06       	cpc	r1, r19
    38b0:	e4 07       	cpc	r30, r20
    38b2:	f5 07       	cpc	r31, r21
    38b4:	98 f0       	brcs	.+38     	; 0x38dc <__fp_cmp+0x46>
    38b6:	62 1b       	sub	r22, r18
    38b8:	73 0b       	sbc	r23, r19
    38ba:	84 0b       	sbc	r24, r20
    38bc:	95 0b       	sbc	r25, r21
    38be:	39 f4       	brne	.+14     	; 0x38ce <__fp_cmp+0x38>
    38c0:	0a 26       	eor	r0, r26
    38c2:	61 f0       	breq	.+24     	; 0x38dc <__fp_cmp+0x46>
    38c4:	23 2b       	or	r18, r19
    38c6:	24 2b       	or	r18, r20
    38c8:	25 2b       	or	r18, r21
    38ca:	21 f4       	brne	.+8      	; 0x38d4 <__fp_cmp+0x3e>
    38cc:	08 95       	ret
    38ce:	0a 26       	eor	r0, r26
    38d0:	09 f4       	brne	.+2      	; 0x38d4 <__fp_cmp+0x3e>
    38d2:	a1 40       	sbci	r26, 0x01	; 1
    38d4:	a6 95       	lsr	r26
    38d6:	8f ef       	ldi	r24, 0xFF	; 255
    38d8:	81 1d       	adc	r24, r1
    38da:	81 1d       	adc	r24, r1
    38dc:	08 95       	ret

000038de <__fp_inf>:
    38de:	97 f9       	bld	r25, 7
    38e0:	9f 67       	ori	r25, 0x7F	; 127
    38e2:	80 e8       	ldi	r24, 0x80	; 128
    38e4:	70 e0       	ldi	r23, 0x00	; 0
    38e6:	60 e0       	ldi	r22, 0x00	; 0
    38e8:	08 95       	ret

000038ea <__fp_nan>:
    38ea:	9f ef       	ldi	r25, 0xFF	; 255
    38ec:	80 ec       	ldi	r24, 0xC0	; 192
    38ee:	08 95       	ret

000038f0 <__fp_pscA>:
    38f0:	00 24       	eor	r0, r0
    38f2:	0a 94       	dec	r0
    38f4:	16 16       	cp	r1, r22
    38f6:	17 06       	cpc	r1, r23
    38f8:	18 06       	cpc	r1, r24
    38fa:	09 06       	cpc	r0, r25
    38fc:	08 95       	ret

000038fe <__fp_pscB>:
    38fe:	00 24       	eor	r0, r0
    3900:	0a 94       	dec	r0
    3902:	12 16       	cp	r1, r18
    3904:	13 06       	cpc	r1, r19
    3906:	14 06       	cpc	r1, r20
    3908:	05 06       	cpc	r0, r21
    390a:	08 95       	ret

0000390c <__fp_round>:
    390c:	09 2e       	mov	r0, r25
    390e:	03 94       	inc	r0
    3910:	00 0c       	add	r0, r0
    3912:	11 f4       	brne	.+4      	; 0x3918 <__fp_round+0xc>
    3914:	88 23       	and	r24, r24
    3916:	52 f0       	brmi	.+20     	; 0x392c <__fp_round+0x20>
    3918:	bb 0f       	add	r27, r27
    391a:	40 f4       	brcc	.+16     	; 0x392c <__fp_round+0x20>
    391c:	bf 2b       	or	r27, r31
    391e:	11 f4       	brne	.+4      	; 0x3924 <__fp_round+0x18>
    3920:	60 ff       	sbrs	r22, 0
    3922:	04 c0       	rjmp	.+8      	; 0x392c <__fp_round+0x20>
    3924:	6f 5f       	subi	r22, 0xFF	; 255
    3926:	7f 4f       	sbci	r23, 0xFF	; 255
    3928:	8f 4f       	sbci	r24, 0xFF	; 255
    392a:	9f 4f       	sbci	r25, 0xFF	; 255
    392c:	08 95       	ret

0000392e <__fp_split3>:
    392e:	57 fd       	sbrc	r21, 7
    3930:	90 58       	subi	r25, 0x80	; 128
    3932:	44 0f       	add	r20, r20
    3934:	55 1f       	adc	r21, r21
    3936:	59 f0       	breq	.+22     	; 0x394e <__fp_splitA+0x10>
    3938:	5f 3f       	cpi	r21, 0xFF	; 255
    393a:	71 f0       	breq	.+28     	; 0x3958 <__fp_splitA+0x1a>
    393c:	47 95       	ror	r20

0000393e <__fp_splitA>:
    393e:	88 0f       	add	r24, r24
    3940:	97 fb       	bst	r25, 7
    3942:	99 1f       	adc	r25, r25
    3944:	61 f0       	breq	.+24     	; 0x395e <__fp_splitA+0x20>
    3946:	9f 3f       	cpi	r25, 0xFF	; 255
    3948:	79 f0       	breq	.+30     	; 0x3968 <__fp_splitA+0x2a>
    394a:	87 95       	ror	r24
    394c:	08 95       	ret
    394e:	12 16       	cp	r1, r18
    3950:	13 06       	cpc	r1, r19
    3952:	14 06       	cpc	r1, r20
    3954:	55 1f       	adc	r21, r21
    3956:	f2 cf       	rjmp	.-28     	; 0x393c <__fp_split3+0xe>
    3958:	46 95       	lsr	r20
    395a:	f1 df       	rcall	.-30     	; 0x393e <__fp_splitA>
    395c:	08 c0       	rjmp	.+16     	; 0x396e <__fp_splitA+0x30>
    395e:	16 16       	cp	r1, r22
    3960:	17 06       	cpc	r1, r23
    3962:	18 06       	cpc	r1, r24
    3964:	99 1f       	adc	r25, r25
    3966:	f1 cf       	rjmp	.-30     	; 0x394a <__fp_splitA+0xc>
    3968:	86 95       	lsr	r24
    396a:	71 05       	cpc	r23, r1
    396c:	61 05       	cpc	r22, r1
    396e:	08 94       	sec
    3970:	08 95       	ret

00003972 <__fp_zero>:
    3972:	e8 94       	clt

00003974 <__fp_szero>:
    3974:	bb 27       	eor	r27, r27
    3976:	66 27       	eor	r22, r22
    3978:	77 27       	eor	r23, r23
    397a:	cb 01       	movw	r24, r22
    397c:	97 f9       	bld	r25, 7
    397e:	08 95       	ret

00003980 <__gesf2>:
    3980:	8a df       	rcall	.-236    	; 0x3896 <__fp_cmp>
    3982:	08 f4       	brcc	.+2      	; 0x3986 <__gesf2+0x6>
    3984:	8f ef       	ldi	r24, 0xFF	; 255
    3986:	08 95       	ret

00003988 <__mulsf3>:
    3988:	0b d0       	rcall	.+22     	; 0x39a0 <__mulsf3x>
    398a:	c0 cf       	rjmp	.-128    	; 0x390c <__fp_round>
    398c:	b1 df       	rcall	.-158    	; 0x38f0 <__fp_pscA>
    398e:	28 f0       	brcs	.+10     	; 0x399a <__mulsf3+0x12>
    3990:	b6 df       	rcall	.-148    	; 0x38fe <__fp_pscB>
    3992:	18 f0       	brcs	.+6      	; 0x399a <__mulsf3+0x12>
    3994:	95 23       	and	r25, r21
    3996:	09 f0       	breq	.+2      	; 0x399a <__mulsf3+0x12>
    3998:	a2 cf       	rjmp	.-188    	; 0x38de <__fp_inf>
    399a:	a7 cf       	rjmp	.-178    	; 0x38ea <__fp_nan>
    399c:	11 24       	eor	r1, r1
    399e:	ea cf       	rjmp	.-44     	; 0x3974 <__fp_szero>

000039a0 <__mulsf3x>:
    39a0:	c6 df       	rcall	.-116    	; 0x392e <__fp_split3>
    39a2:	a0 f3       	brcs	.-24     	; 0x398c <__mulsf3+0x4>

000039a4 <__mulsf3_pse>:
    39a4:	95 9f       	mul	r25, r21
    39a6:	d1 f3       	breq	.-12     	; 0x399c <__mulsf3+0x14>
    39a8:	95 0f       	add	r25, r21
    39aa:	50 e0       	ldi	r21, 0x00	; 0
    39ac:	55 1f       	adc	r21, r21
    39ae:	62 9f       	mul	r22, r18
    39b0:	f0 01       	movw	r30, r0
    39b2:	72 9f       	mul	r23, r18
    39b4:	bb 27       	eor	r27, r27
    39b6:	f0 0d       	add	r31, r0
    39b8:	b1 1d       	adc	r27, r1
    39ba:	63 9f       	mul	r22, r19
    39bc:	aa 27       	eor	r26, r26
    39be:	f0 0d       	add	r31, r0
    39c0:	b1 1d       	adc	r27, r1
    39c2:	aa 1f       	adc	r26, r26
    39c4:	64 9f       	mul	r22, r20
    39c6:	66 27       	eor	r22, r22
    39c8:	b0 0d       	add	r27, r0
    39ca:	a1 1d       	adc	r26, r1
    39cc:	66 1f       	adc	r22, r22
    39ce:	82 9f       	mul	r24, r18
    39d0:	22 27       	eor	r18, r18
    39d2:	b0 0d       	add	r27, r0
    39d4:	a1 1d       	adc	r26, r1
    39d6:	62 1f       	adc	r22, r18
    39d8:	73 9f       	mul	r23, r19
    39da:	b0 0d       	add	r27, r0
    39dc:	a1 1d       	adc	r26, r1
    39de:	62 1f       	adc	r22, r18
    39e0:	83 9f       	mul	r24, r19
    39e2:	a0 0d       	add	r26, r0
    39e4:	61 1d       	adc	r22, r1
    39e6:	22 1f       	adc	r18, r18
    39e8:	74 9f       	mul	r23, r20
    39ea:	33 27       	eor	r19, r19
    39ec:	a0 0d       	add	r26, r0
    39ee:	61 1d       	adc	r22, r1
    39f0:	23 1f       	adc	r18, r19
    39f2:	84 9f       	mul	r24, r20
    39f4:	60 0d       	add	r22, r0
    39f6:	21 1d       	adc	r18, r1
    39f8:	82 2f       	mov	r24, r18
    39fa:	76 2f       	mov	r23, r22
    39fc:	6a 2f       	mov	r22, r26
    39fe:	11 24       	eor	r1, r1
    3a00:	9f 57       	subi	r25, 0x7F	; 127
    3a02:	50 40       	sbci	r21, 0x00	; 0
    3a04:	8a f0       	brmi	.+34     	; 0x3a28 <__mulsf3_pse+0x84>
    3a06:	e1 f0       	breq	.+56     	; 0x3a40 <__mulsf3_pse+0x9c>
    3a08:	88 23       	and	r24, r24
    3a0a:	4a f0       	brmi	.+18     	; 0x3a1e <__mulsf3_pse+0x7a>
    3a0c:	ee 0f       	add	r30, r30
    3a0e:	ff 1f       	adc	r31, r31
    3a10:	bb 1f       	adc	r27, r27
    3a12:	66 1f       	adc	r22, r22
    3a14:	77 1f       	adc	r23, r23
    3a16:	88 1f       	adc	r24, r24
    3a18:	91 50       	subi	r25, 0x01	; 1
    3a1a:	50 40       	sbci	r21, 0x00	; 0
    3a1c:	a9 f7       	brne	.-22     	; 0x3a08 <__mulsf3_pse+0x64>
    3a1e:	9e 3f       	cpi	r25, 0xFE	; 254
    3a20:	51 05       	cpc	r21, r1
    3a22:	70 f0       	brcs	.+28     	; 0x3a40 <__mulsf3_pse+0x9c>
    3a24:	5c cf       	rjmp	.-328    	; 0x38de <__fp_inf>
    3a26:	a6 cf       	rjmp	.-180    	; 0x3974 <__fp_szero>
    3a28:	5f 3f       	cpi	r21, 0xFF	; 255
    3a2a:	ec f3       	brlt	.-6      	; 0x3a26 <__mulsf3_pse+0x82>
    3a2c:	98 3e       	cpi	r25, 0xE8	; 232
    3a2e:	dc f3       	brlt	.-10     	; 0x3a26 <__mulsf3_pse+0x82>
    3a30:	86 95       	lsr	r24
    3a32:	77 95       	ror	r23
    3a34:	67 95       	ror	r22
    3a36:	b7 95       	ror	r27
    3a38:	f7 95       	ror	r31
    3a3a:	e7 95       	ror	r30
    3a3c:	9f 5f       	subi	r25, 0xFF	; 255
    3a3e:	c1 f7       	brne	.-16     	; 0x3a30 <__mulsf3_pse+0x8c>
    3a40:	fe 2b       	or	r31, r30
    3a42:	88 0f       	add	r24, r24
    3a44:	91 1d       	adc	r25, r1
    3a46:	96 95       	lsr	r25
    3a48:	87 95       	ror	r24
    3a4a:	97 f9       	bld	r25, 7
    3a4c:	08 95       	ret

00003a4e <__unordsf2>:
    3a4e:	23 df       	rcall	.-442    	; 0x3896 <__fp_cmp>
    3a50:	88 0b       	sbc	r24, r24
    3a52:	99 0b       	sbc	r25, r25
    3a54:	08 95       	ret

00003a56 <__mulsi3>:
    3a56:	62 9f       	mul	r22, r18
    3a58:	d0 01       	movw	r26, r0
    3a5a:	73 9f       	mul	r23, r19
    3a5c:	f0 01       	movw	r30, r0
    3a5e:	82 9f       	mul	r24, r18
    3a60:	e0 0d       	add	r30, r0
    3a62:	f1 1d       	adc	r31, r1
    3a64:	64 9f       	mul	r22, r20
    3a66:	e0 0d       	add	r30, r0
    3a68:	f1 1d       	adc	r31, r1
    3a6a:	92 9f       	mul	r25, r18
    3a6c:	f0 0d       	add	r31, r0
    3a6e:	83 9f       	mul	r24, r19
    3a70:	f0 0d       	add	r31, r0
    3a72:	74 9f       	mul	r23, r20
    3a74:	f0 0d       	add	r31, r0
    3a76:	65 9f       	mul	r22, r21
    3a78:	f0 0d       	add	r31, r0
    3a7a:	99 27       	eor	r25, r25
    3a7c:	72 9f       	mul	r23, r18
    3a7e:	b0 0d       	add	r27, r0
    3a80:	e1 1d       	adc	r30, r1
    3a82:	f9 1f       	adc	r31, r25
    3a84:	63 9f       	mul	r22, r19
    3a86:	b0 0d       	add	r27, r0
    3a88:	e1 1d       	adc	r30, r1
    3a8a:	f9 1f       	adc	r31, r25
    3a8c:	bd 01       	movw	r22, r26
    3a8e:	cf 01       	movw	r24, r30
    3a90:	11 24       	eor	r1, r1
    3a92:	08 95       	ret

00003a94 <__udivmodhi4>:
    3a94:	aa 1b       	sub	r26, r26
    3a96:	bb 1b       	sub	r27, r27
    3a98:	51 e1       	ldi	r21, 0x11	; 17
    3a9a:	07 c0       	rjmp	.+14     	; 0x3aaa <__udivmodhi4_ep>

00003a9c <__udivmodhi4_loop>:
    3a9c:	aa 1f       	adc	r26, r26
    3a9e:	bb 1f       	adc	r27, r27
    3aa0:	a6 17       	cp	r26, r22
    3aa2:	b7 07       	cpc	r27, r23
    3aa4:	10 f0       	brcs	.+4      	; 0x3aaa <__udivmodhi4_ep>
    3aa6:	a6 1b       	sub	r26, r22
    3aa8:	b7 0b       	sbc	r27, r23

00003aaa <__udivmodhi4_ep>:
    3aaa:	88 1f       	adc	r24, r24
    3aac:	99 1f       	adc	r25, r25
    3aae:	5a 95       	dec	r21
    3ab0:	a9 f7       	brne	.-22     	; 0x3a9c <__udivmodhi4_loop>
    3ab2:	80 95       	com	r24
    3ab4:	90 95       	com	r25
    3ab6:	bc 01       	movw	r22, r24
    3ab8:	cd 01       	movw	r24, r26
    3aba:	08 95       	ret

00003abc <__udivmodsi4>:
    3abc:	a1 e2       	ldi	r26, 0x21	; 33
    3abe:	1a 2e       	mov	r1, r26
    3ac0:	aa 1b       	sub	r26, r26
    3ac2:	bb 1b       	sub	r27, r27
    3ac4:	fd 01       	movw	r30, r26
    3ac6:	0d c0       	rjmp	.+26     	; 0x3ae2 <__udivmodsi4_ep>

00003ac8 <__udivmodsi4_loop>:
    3ac8:	aa 1f       	adc	r26, r26
    3aca:	bb 1f       	adc	r27, r27
    3acc:	ee 1f       	adc	r30, r30
    3ace:	ff 1f       	adc	r31, r31
    3ad0:	a2 17       	cp	r26, r18
    3ad2:	b3 07       	cpc	r27, r19
    3ad4:	e4 07       	cpc	r30, r20
    3ad6:	f5 07       	cpc	r31, r21
    3ad8:	20 f0       	brcs	.+8      	; 0x3ae2 <__udivmodsi4_ep>
    3ada:	a2 1b       	sub	r26, r18
    3adc:	b3 0b       	sbc	r27, r19
    3ade:	e4 0b       	sbc	r30, r20
    3ae0:	f5 0b       	sbc	r31, r21

00003ae2 <__udivmodsi4_ep>:
    3ae2:	66 1f       	adc	r22, r22
    3ae4:	77 1f       	adc	r23, r23
    3ae6:	88 1f       	adc	r24, r24
    3ae8:	99 1f       	adc	r25, r25
    3aea:	1a 94       	dec	r1
    3aec:	69 f7       	brne	.-38     	; 0x3ac8 <__udivmodsi4_loop>
    3aee:	60 95       	com	r22
    3af0:	70 95       	com	r23
    3af2:	80 95       	com	r24
    3af4:	90 95       	com	r25
    3af6:	9b 01       	movw	r18, r22
    3af8:	ac 01       	movw	r20, r24
    3afa:	bd 01       	movw	r22, r26
    3afc:	cf 01       	movw	r24, r30
    3afe:	08 95       	ret

00003b00 <__tablejump2__>:
    3b00:	ee 0f       	add	r30, r30
    3b02:	ff 1f       	adc	r31, r31

00003b04 <__tablejump__>:
    3b04:	05 90       	lpm	r0, Z+
    3b06:	f4 91       	lpm	r31, Z+
    3b08:	e0 2d       	mov	r30, r0
    3b0a:	09 94       	ijmp

00003b0c <_exit>:
    3b0c:	f8 94       	cli

00003b0e <__stop_program>:
    3b0e:	ff cf       	rjmp	.-2      	; 0x3b0e <__stop_program>
